
Module_Sound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d4  080058d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058dc  080058dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000074  08005958  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08005958  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0d3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfb  00000000  00000000  0003a175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029de7  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d87  00000000  00000000  000692f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001084fa  00000000  00000000  0008107e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  001895cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005778 	.word	0x08005778

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005778 	.word	0x08005778

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fdf4 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f893 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f9eb 	bl	80009c0 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80005ea:	f000 f98b 	bl	8000904 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 f9b9 	bl	8000964 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005f2:	f000 f8fd 	bl	80007f0 <MX_I2C1_Init>
  MX_TIM14_Init();
 80005f6:	f000 f961 	bl	80008bc <MX_TIM14_Init>
  MX_TIM13_Init();
 80005fa:	f000 f93b 	bl	8000874 <MX_TIM13_Init>


  uint8_t buffer_conf[3];
  uint16_t val;
  uint16_t val_prev;
  buffer_conf[0] = 0b00000001;
 80005fe:	2301      	movs	r3, #1
 8000600:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  buffer_conf[1] = 0b00000100;
 8000604:	2304      	movs	r3, #4
 8000606:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  buffer_conf[2] = 0b10000011;
 800060a:	2383      	movs	r3, #131	; 0x83
 800060c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  HAL_TIM_Base_Start_IT(&htim14); //TWO TIMERS START, ONE TO CHANGE BETWEEN EACH TONE OF A MELODY (see at the end of the file)
 8000610:	4837      	ldr	r0, [pc, #220]	; (80006f0 <main+0x118>)
 8000612:	f003 f9f1 	bl	80039f8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim13); //THE NEXT ONE TO CHANGE THE VALUE SENT TO THE SPEAKER, 1 OR 0, CREATING A SQUARE WAVE
 8000616:	4837      	ldr	r0, [pc, #220]	; (80006f4 <main+0x11c>)
 8000618:	f003 f9ee 	bl	80039f8 <HAL_TIM_Base_Start_IT>


  //Init Mic
  ret = HAL_I2C_Master_Transmit(&hi2c1, MIC_ADDR, buffer_conf, 3, 0xFFFFFF);
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	b299      	uxth	r1, r3
 8000620:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000624:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2303      	movs	r3, #3
 800062c:	4832      	ldr	r0, [pc, #200]	; (80006f8 <main+0x120>)
 800062e:	f001 f9f1 	bl	8001a14 <HAL_I2C_Master_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <main+0x124>)
 8000638:	701a      	strb	r2, [r3, #0]

  uint8_t buffer_conv[1];
  uint8_t buffer_data[2];
  uint8_t Buffer[30] = {0};
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	831a      	strh	r2, [r3, #24]
  {


////Start Mic recording

	  buffer_conv[0] = 0b00000000;
 8000650:	2300      	movs	r3, #0
 8000652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	  ret = HAL_I2C_Master_Transmit(&hi2c1, MIC_ADDR, buffer_conv, 1, 0xFFFFFF);
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	b299      	uxth	r1, r3
 800065a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800065e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <main+0x120>)
 8000668:	f001 f9d4 	bl	8001a14 <HAL_I2C_Master_Transmit>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <main+0x124>)
 8000672:	701a      	strb	r2, [r3, #0]

	  ret = HAL_I2C_Master_Receive(&hi2c1, MIC_ADDR, buffer_data, 2, 0xFFFFFF);
 8000674:	2390      	movs	r3, #144	; 0x90
 8000676:	b299      	uxth	r1, r3
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2302      	movs	r3, #2
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <main+0x120>)
 8000686:	f001 fab9 	bl	8001bfc <HAL_I2C_Master_Receive>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0x124>)
 8000690:	701a      	strb	r2, [r3, #0]
	  val_prev = val;
 8000692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000694:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  val =  ((int16_t)(buffer_data[0] << 4) | (buffer_data[1]>>4));
 8000696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	b21a      	sxth	r2, r3
 800069e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006a2:	091b      	lsrs	r3, r3, #4
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

	  sprintf(Buffer, "0x%u\r\n", val);
 80006ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006b0:	463b      	mov	r3, r7
 80006b2:	4913      	ldr	r1, [pc, #76]	; (8000700 <main+0x128>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fc31 	bl	8004f1c <siprintf>
	  HAL_UART_Transmit(&huart3, Buffer, sizeof(Buffer), 10000);
 80006ba:	4639      	mov	r1, r7
 80006bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80006c0:	221e      	movs	r2, #30
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <main+0x12c>)
 80006c4:	f003 fc64 	bl	8003f90 <HAL_UART_Transmit>

	  //Value of a LED change when an user tap on the mic

	  if (val-val_prev > 0x20)
 80006c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80006ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b20      	cmp	r3, #32
 80006d0:	dd05      	ble.n	80006de <main+0x106>
	  {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <main+0x130>)
 80006d8:	f001 f8ce 	bl	8001878 <HAL_GPIO_WritePin>
 80006dc:	e004      	b.n	80006e8 <main+0x110>
	  }else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <main+0x130>)
 80006e4:	f001 f8c8 	bl	8001878 <HAL_GPIO_WritePin>
	  }



	  HAL_Delay(20);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f000 fdcb 	bl	8001284 <HAL_Delay>
	  buffer_conv[0] = 0b00000000;
 80006ee:	e7af      	b.n	8000650 <main+0x78>
 80006f0:	200005c0 	.word	0x200005c0
 80006f4:	20000574 	.word	0x20000574
 80006f8:	20000124 	.word	0x20000124
 80006fc:	20000654 	.word	0x20000654
 8000700:	08005790 	.word	0x08005790
 8000704:	200000a0 	.word	0x200000a0
 8000708:	40020400 	.word	0x40020400

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fbf6 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000730:	f001 ffd2 	bl	80026d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <SystemClock_Config+0xdc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <SystemClock_Config+0xdc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemClock_Config+0xdc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <SystemClock_Config+0xe0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xe0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800076c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4618      	mov	r0, r3
 8000796:	f001 ffff 	bl	8002798 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a0:	f000 fa6a 	bl	8000c78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a4:	f001 ffa8 	bl	80026f8 <HAL_PWREx_EnableOverDrive>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ae:	f000 fa63 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2103      	movs	r1, #3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fa90 	bl	8002cf4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007da:	f000 fa4d 	bl	8000c78 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_I2C1_Init+0x78>)
 80007f6:	4a1d      	ldr	r2, [pc, #116]	; (800086c <MX_I2C1_Init+0x7c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x78>)
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_I2C1_Init+0x80>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_I2C1_Init+0x78>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x78>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_I2C1_Init+0x78>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x78>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_I2C1_Init+0x78>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x78>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2C1_Init+0x78>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_I2C1_Init+0x78>)
 800082c:	f001 f862 	bl	80018f4 <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 fa1f 	bl	8000c78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	480a      	ldr	r0, [pc, #40]	; (8000868 <MX_I2C1_Init+0x78>)
 800083e:	f001 fd4b 	bl	80022d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 fa16 	bl	8000c78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_I2C1_Init+0x78>)
 8000850:	f001 fd8d 	bl	800236e <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fa0d 	bl	8000c78 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800085e:	2001      	movs	r0, #1
 8000860:	f001 fdd2 	bl	8002408 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000124 	.word	0x20000124
 800086c:	40005400 	.word	0x40005400
 8000870:	20000209 	.word	0x20000209

08000874 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_TIM13_Init+0x40>)
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MX_TIM13_Init+0x44>)
 800087c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_TIM13_Init+0x40>)
 8000880:	224f      	movs	r2, #79	; 0x4f
 8000882:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_TIM13_Init+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5186-1;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_TIM13_Init+0x40>)
 800088c:	f241 4241 	movw	r2, #5185	; 0x1441
 8000890:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_TIM13_Init+0x40>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_TIM13_Init+0x40>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM13_Init+0x40>)
 80008a0:	f003 f852 	bl	8003948 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80008aa:	f000 f9e5 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000574 	.word	0x20000574
 80008b8:	40001c00 	.word	0x40001c00

080008bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_TIM14_Init+0x40>)
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <MX_TIM14_Init+0x44>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_TIM14_Init+0x40>)
 80008c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008cc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_TIM14_Init+0x40>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1500-1;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_TIM14_Init+0x40>)
 80008d6:	f240 52db 	movw	r2, #1499	; 0x5db
 80008da:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_TIM14_Init+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_TIM14_Init+0x40>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_TIM14_Init+0x40>)
 80008ea:	f003 f82d 	bl	8003948 <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80008f4:	f000 f9c0 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200005c0 	.word	0x200005c0
 8000900:	40002000 	.word	0x40002000

08000904 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART3_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_USART3_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART3_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART3_UART_Init+0x58>)
 8000948:	f003 fad4 	bl	8003ef4 <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f991 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000a0 	.word	0x200000a0
 8000960:	40004800 	.word	0x40004800

08000964 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800096e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2206      	movs	r2, #6
 8000974:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2202      	movs	r2, #2
 800097a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2202      	movs	r2, #2
 8000986:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2201      	movs	r2, #1
 800098c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2201      	movs	r2, #1
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	f001 fd4e 	bl	8002448 <HAL_PCD_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f961 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000170 	.word	0x20000170

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <MX_GPIO_Init+0x144>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a2c      	ldr	r2, [pc, #176]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_GPIO_Init+0x144>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a6c:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000a6e:	f000 ff03 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4825      	ldr	r0, [pc, #148]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000a78:	f000 fefe 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	481f      	ldr	r0, [pc, #124]	; (8000b10 <MX_GPIO_Init+0x150>)
 8000a94:	f000 fd2c 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a98:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4815      	ldr	r0, [pc, #84]	; (8000b08 <MX_GPIO_Init+0x148>)
 8000ab2:	f000 fd1d 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab6:	2340      	movs	r3, #64	; 0x40
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000ace:	f000 fd0f 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_GPIO_Init+0x14c>)
 8000ae6:	f000 fd03 	bl	80014f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f000 fcc7 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af4:	2028      	movs	r0, #40	; 0x28
 8000af6:	f000 fce0 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d14b      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xa8>
  {
	  if (playing==0)
 8000b24:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d114      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x42>
	  {
		  playing = 1;
 8000b2c:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
		  uint16_t tone = hymne_joy[countermel];
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3e:	82bb      	strh	r3, [r7, #20]
		  uint16_t presc = freq_to_presc(tone);
 8000b40:	8abb      	ldrh	r3, [r7, #20]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8a0 	bl	8000c88 <freq_to_presc>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	827b      	strh	r3, [r7, #18]
		  TIM13->ARR = presc-1;
 8000b4c:	8a7b      	ldrh	r3, [r7, #18]
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b54:	e032      	b.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xa8>
	  }else{
		  uint8_t count_tot = hymne_joy[countermel+1];
 8000b56:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	75fb      	strb	r3, [r7, #23]
		  if (counter_len <= count_tot)
 8000b64:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	7dfa      	ldrb	r2, [r7, #23]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d316      	bcc.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x88>
		  {
			  if (counter_len == count_tot)
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	7dfa      	ldrb	r2, [r7, #23]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d10b      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x7c>
			  {
					playing = 0;
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
			  	  	countermel += 2;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3302      	adds	r3, #2
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b88:	701a      	strb	r2, [r3, #0]
			  	  	counter_len = 0;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

			  }
			  counter_len += 1;
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b9a:	701a      	strb	r2, [r3, #0]
		  }
		  if (countermel >= 60)
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ba2:	d90b      	bls.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xa8>
		  {
			  countermel = 0;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			  counter_len = 1;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
			  playing = 0;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
			  melody_started = 0;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
		  }
	  }
  }

  if (htim == &htim13 )
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d140      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x132>
  {
	  if ((playing == 1) & (melody_started == 1))
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	bf0c      	ite	eq
 8000bcc:	2301      	moveq	r3, #1
 8000bce:	2300      	movne	r3, #0
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	bf0c      	ite	eq
 8000bda:	2301      	moveq	r3, #1
 8000bdc:	2300      	movne	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d02e      	beq.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x132>
	  {
		  uint8_t buffer[3];
				  if (counter_2 == 0)
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d113      	bne.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x104>
				  {
					  buffer[2] = 0x40;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	73bb      	strb	r3, [r7, #14]
					  buffer[1] = 0xFF;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	737b      	strb	r3, [r7, #13]
					  buffer[0] = 0x40;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	733b      	strb	r3, [r7, #12]
					  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_SPEAK, buffer, 3, 0xFFFFFF);
 8000bfc:	f107 020c 	add.w	r2, r7, #12
 8000c00:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2303      	movs	r3, #3
 8000c08:	21c4      	movs	r1, #196	; 0xc4
 8000c0a:	481a      	ldr	r0, [pc, #104]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000c0c:	f000 ff02 	bl	8001a14 <HAL_I2C_Master_Transmit>
					  counter_2 = 1;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
					  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_SPEAK, buffer, 3, 0xFFFFFF);
					  counter_2 = 0;
				  }
	  }
  }
}
 8000c16:	e016      	b.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x132>
				  else if (counter_2 == 1)
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d112      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x132>
					  buffer[2] = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73bb      	strb	r3, [r7, #14]
					  buffer[1] = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	737b      	strb	r3, [r7, #13]
					  buffer[0] = 0x40;
 8000c28:	2340      	movs	r3, #64	; 0x40
 8000c2a:	733b      	strb	r3, [r7, #12]
					  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR_SPEAK, buffer, 3, 0xFFFFFF);
 8000c2c:	f107 020c 	add.w	r2, r7, #12
 8000c30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2303      	movs	r3, #3
 8000c38:	21c4      	movs	r1, #196	; 0xc4
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000c3c:	f000 feea 	bl	8001a14 <HAL_I2C_Master_Transmit>
					  counter_2 = 0;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200005c0 	.word	0x200005c0
 8000c54:	20000092 	.word	0x20000092
 8000c58:	20000091 	.word	0x20000091
 8000c5c:	08005798 	.word	0x08005798
 8000c60:	40001c00 	.word	0x40001c00
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000001 	.word	0x20000001
 8000c6c:	20000574 	.word	0x20000574
 8000c70:	20000090 	.word	0x20000090
 8000c74:	20000124 	.word	0x20000124

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
 8000c82:	0000      	movs	r0, r0
 8000c84:	0000      	movs	r0, r0
	...

08000c88 <freq_to_presc>:
#define MI 659*2
#define FA 698*2
extern const

int freq_to_presc(int freq_desired)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	return (freq_desired*(-3.922) + 6906.97);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c9a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000cc0 <freq_to_presc+0x38>
 8000c9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ca2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000cc8 <freq_to_presc+0x40>
 8000ca6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000caa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cae:	ee17 3a90 	vmov	r3, s15
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	89374bc7 	.word	0x89374bc7
 8000cc4:	c00f6041 	.word	0xc00f6041
 8000cc8:	51eb851f 	.word	0x51eb851f
 8000ccc:	40bafaf8 	.word	0x40bafaf8

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ae      	sub	sp, #184	; 0xb8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2290      	movs	r2, #144	; 0x90
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 f8e7 	bl	8004f0c <memset>
  if(hi2c->Instance==I2C1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13c      	bne.n	8000dc2 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 f9ce 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff ff89 	bl	8000c78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_I2C_MspInit+0xbc>)
 8000da6:	f000 fba3 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37b8      	adds	r7, #184	; 0xb8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_TIM_Base_MspInit+0x78>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d114      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	202c      	movs	r0, #44	; 0x2c
 8000e08:	f000 fb3b 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000e0c:	202c      	movs	r0, #44	; 0x2c
 8000e0e:	f000 fb54 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e12:	e018      	b.n	8000e46 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM14)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_TIM_Base_MspInit+0x80>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d113      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_TIM_Base_MspInit+0x7c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	202d      	movs	r0, #45	; 0x2d
 8000e3c:	f000 fb21 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e40:	202d      	movs	r0, #45	; 0x2d
 8000e42:	f000 fb3a 	bl	80014ba <HAL_NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40001c00 	.word	0x40001c00
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40002000 	.word	0x40002000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ae      	sub	sp, #184	; 0xb8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2290      	movs	r2, #144	; 0x90
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 f845 	bl	8004f0c <memset>
  if(huart->Instance==USART3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13c      	bne.n	8000f06 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 f92c 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ea6:	f7ff fee7 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0xbc>)
 8000f02:	f000 faf5 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37b8      	adds	r7, #184	; 0xb8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004800 	.word	0x40004800
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ae      	sub	sp, #184	; 0xb8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2290      	movs	r2, #144	; 0x90
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 ffe5 	bl	8004f0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4a:	d159      	bne.n	8001000 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 f8cb 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f68:	f7ff fe86 	bl	8000c78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000fac:	f000 faa0 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000fcc:	f000 fa90 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fda:	6353      	str	r3, [r2, #52]	; 0x34
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	37b8      	adds	r7, #184	; 0xb8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f8f2 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  for (int i=0; i<65535; ++i);
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e002      	b.n	8001076 <EXTI15_10_IRQHandler+0x12>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800107c:	4293      	cmp	r3, r2
 800107e:	ddf7      	ble.n	8001070 <EXTI15_10_IRQHandler+0xc>
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <EXTI15_10_IRQHandler+0x54>)
 8001086:	f000 fbdf 	bl	8001848 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <EXTI15_10_IRQHandler+0x42>
	  if (melody_started)
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <EXTI15_10_IRQHandler+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <EXTI15_10_IRQHandler+0x3c>
		  melody_started = 0;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <EXTI15_10_IRQHandler+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e002      	b.n	80010a6 <EXTI15_10_IRQHandler+0x42>
	  else
		  melody_started = 1;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <EXTI15_10_IRQHandler+0x58>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80010a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010aa:	f000 fbff 	bl	80018ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020800 	.word	0x40020800
 80010bc:	20000001 	.word	0x20000001

080010c0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80010c6:	f002 fd0f 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000574 	.word	0x20000574

080010d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010da:	f002 fd05 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200005c0 	.word	0x200005c0

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f003 fece 	bl	8004eb8 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20080000 	.word	0x20080000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000094 	.word	0x20000094
 8001150:	20000670 	.word	0x20000670

08001154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 fe8d 	bl	8004ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fa15 	bl	80005d8 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011bc:	080058e4 	.word	0x080058e4
  ldr r2, =_sbss
 80011c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011c4:	2000066c 	.word	0x2000066c

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>

080011ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f94c 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f805 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd79 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f967 	bl	80014d6 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f92f 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000004 	.word	0x20000004
 800123c:	2000000c 	.word	0x2000000c
 8001240:	20000008 	.word	0x20000008

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	2000000c 	.word	0x2000000c
 8001268:	20000658 	.word	0x20000658

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000658 	.word	0x20000658

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e175      	b.n	80017fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8164 	bne.w	80017f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x56>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80be 	beq.w	80017f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_GPIO_Init+0x324>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001692:	4a61      	ldr	r2, [pc, #388]	; (8001818 <HAL_GPIO_Init+0x328>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_GPIO_Init+0x32c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d037      	beq.n	800172e <HAL_GPIO_Init+0x23e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_GPIO_Init+0x330>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d031      	beq.n	800172a <HAL_GPIO_Init+0x23a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a56      	ldr	r2, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x334>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d02b      	beq.n	8001726 <HAL_GPIO_Init+0x236>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_GPIO_Init+0x338>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x232>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_GPIO_Init+0x33c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x22e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a53      	ldr	r2, [pc, #332]	; (8001830 <HAL_GPIO_Init+0x340>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x22a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_GPIO_Init+0x344>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x226>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_GPIO_Init+0x348>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x222>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_GPIO_Init+0x34c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x21e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_GPIO_Init+0x350>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x21a>
 8001706:	2309      	movs	r3, #9
 8001708:	e012      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800170a:	230a      	movs	r3, #10
 800170c:	e010      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800170e:	2308      	movs	r3, #8
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001712:	2307      	movs	r3, #7
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001716:	2306      	movs	r3, #6
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x240>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x240>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x328>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_GPIO_Init+0x354>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_GPIO_Init+0x354>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <HAL_GPIO_Init+0x354>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a29      	ldr	r2, [pc, #164]	; (8001844 <HAL_GPIO_Init+0x354>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_GPIO_Init+0x354>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae86 	bls.w	8001510 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40021c00 	.word	0x40021c00
 800183c:	40022000 	.word	0x40022000
 8001840:	40022400 	.word	0x40022400
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f806 	bl	80018dc <HAL_GPIO_EXTI_Callback>
  }
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f9fc 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e006      	b.n	800197c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800197a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d104      	bne.n	800198e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800198c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_I2C_Init+0x11c>)
 800199a:	430b      	orrs	r3, r1
 800199c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69d9      	ldr	r1, [r3, #28]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	02008000 	.word	0x02008000

08001a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	460b      	mov	r3, r1
 8001a22:	817b      	strh	r3, [r7, #10]
 8001a24:	4613      	mov	r3, r2
 8001a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	f040 80da 	bne.w	8001bea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x30>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e0d3      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a4c:	f7ff fc0e 	bl	800126c <HAL_GetTick>
 8001a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2319      	movs	r3, #25
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f9e6 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0be      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2221      	movs	r2, #33	; 0x21
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	893a      	ldrh	r2, [r7, #8]
 8001a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2bff      	cmp	r3, #255	; 0xff
 8001a9e:	d90e      	bls.n	8001abe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	8979      	ldrh	r1, [r7, #10]
 8001aae:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fbdc 	bl	8002274 <I2C_TransferConfig>
 8001abc:	e06c      	b.n	8001b98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	8979      	ldrh	r1, [r7, #10]
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fbcb 	bl	8002274 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ade:	e05b      	b.n	8001b98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f9e3 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e07b      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d034      	beq.n	8001b98 <HAL_I2C_Master_Transmit+0x184>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d130      	bne.n	8001b98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f975 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e04d      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2bff      	cmp	r3, #255	; 0xff
 8001b58:	d90e      	bls.n	8001b78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	22ff      	movs	r2, #255	; 0xff
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	8979      	ldrh	r1, [r7, #10]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fb7f 	bl	8002274 <I2C_TransferConfig>
 8001b76:	e00f      	b.n	8001b98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	8979      	ldrh	r1, [r7, #10]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fb6e 	bl	8002274 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d19e      	bne.n	8001ae0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f9c2 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01a      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bca:	400b      	ands	r3, r1
 8001bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	80002000 	.word	0x80002000
 8001bf8:	fe00e800 	.word	0xfe00e800

08001bfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 80db 	bne.w	8001dd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_I2C_Master_Receive+0x30>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e0d4      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c34:	f7ff fb1a 	bl	800126c <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2319      	movs	r3, #25
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f8f2 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0bf      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2222      	movs	r2, #34	; 0x22
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2210      	movs	r2, #16
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	893a      	ldrh	r2, [r7, #8]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d90e      	bls.n	8001ca6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_I2C_Master_Receive+0x1e4>)
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fae8 	bl	8002274 <I2C_TransferConfig>
 8001ca4:	e06d      	b.n	8001d82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_I2C_Master_Receive+0x1e4>)
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fad7 	bl	8002274 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cc6:	e05c      	b.n	8001d82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f96b 	bl	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e07c      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d034      	beq.n	8001d82 <HAL_I2C_Master_Receive+0x186>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d130      	bne.n	8001d82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f880 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e04d      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2bff      	cmp	r3, #255	; 0xff
 8001d42:	d90e      	bls.n	8001d62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fa8a 	bl	8002274 <I2C_TransferConfig>
 8001d60:	e00f      	b.n	8001d82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	8979      	ldrh	r1, [r7, #10]
 8001d74:	2300      	movs	r3, #0
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 fa79 	bl	8002274 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d19d      	bne.n	8001cc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f8cd 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e01a      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_I2C_Master_Receive+0x1e8>)
 8001db4:	400b      	ands	r3, r1
 8001db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
  }
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	80002400 	.word	0x80002400
 8001de4:	fe00e800 	.word	0xfe00e800

08001de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	619a      	str	r2, [r3, #24]
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	e022      	b.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d01e      	beq.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4a:	f7ff fa0f 	bl	800126c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d302      	bcc.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d113      	bne.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00f      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d0cd      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ebc:	e02c      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f8ea 	bl	800209c <I2C_IsErrorOccurred>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e02a      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f9c7 	bl	800126c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1cb      	bne.n	8001ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	e028      	b.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f8aa 	bl	800209c <I2C_IsErrorOccurred>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e026      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f98b 	bl	800126c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d1cf      	bne.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb4:	e064      	b.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f86e 	bl	800209c <I2C_IsErrorOccurred>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e062      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d138      	bne.n	800204a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d105      	bne.n	8001ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e04e      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d107      	bne.n	8002010 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2204      	movs	r2, #4
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
 800200e:	e002      	b.n	8002016 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2220      	movs	r2, #32
 800201c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800202a:	400b      	ands	r3, r1
 800202c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e022      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f90f 	bl	800126c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10f      	bne.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e007      	b.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d193      	bne.n	8001fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	fe00e800 	.word	0xfe00e800

0800209c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d075      	beq.n	80021b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2210      	movs	r2, #16
 80020ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020d0:	e056      	b.n	8002180 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d052      	beq.n	8002180 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff f8c7 	bl	800126c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_IsErrorOccurred+0x54>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d147      	bne.n	8002180 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002102:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002112:	d12e      	bne.n	8002172 <I2C_IsErrorOccurred+0xd6>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800211a:	d02a      	beq.n	8002172 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b20      	cmp	r3, #32
 8002120:	d027      	beq.n	8002172 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002130:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002132:	f7ff f89b 	bl	800126c <HAL_GetTick>
 8002136:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002138:	e01b      	b.n	8002172 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800213a:	f7ff f897 	bl	800126c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b19      	cmp	r3, #25
 8002146:	d914      	bls.n	8002172 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d1dc      	bne.n	800213a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d003      	beq.n	8002196 <I2C_IsErrorOccurred+0xfa>
 800218e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002192:	2b00      	cmp	r3, #0
 8002194:	d09d      	beq.n	80020d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2220      	movs	r2, #32
 80021a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00b      	beq.n	8002200 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01c      	beq.n	8002264 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff fddc 	bl	8001de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <I2C_IsErrorOccurred+0x1d4>)
 800223c:	400b      	ands	r3, r1
 800223e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002268:	4618      	mov	r0, r3
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	817b      	strh	r3, [r7, #10]
 8002282:	4613      	mov	r3, r2
 8002284:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002286:	897b      	ldrh	r3, [r7, #10]
 8002288:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800228c:	7a7b      	ldrb	r3, [r7, #9]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002294:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	4313      	orrs	r3, r2
 800229e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	0d5b      	lsrs	r3, r3, #21
 80022ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <I2C_TransferConfig+0x60>)
 80022b4:	430b      	orrs	r3, r1
 80022b6:	43db      	mvns	r3, r3
 80022b8:	ea02 0103 	and.w	r1, r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	03ff63ff 	.word	0x03ff63ff

080022d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d138      	bne.n	8002360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e032      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800232a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	d139      	bne.n	80023f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800238e:	2302      	movs	r3, #2
 8002390:	e033      	b.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241a:	6453      	str	r3, [r2, #68]	; 0x44
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4905      	ldr	r1, [pc, #20]	; (8002444 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800

08002448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	b08f      	sub	sp, #60	; 0x3c
 800244c:	af0a      	add	r7, sp, #40	; 0x28
 800244e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e116      	b.n	8002688 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe fd51 	bl	8000f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fa77 	bl	800498c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	687e      	ldr	r6, [r7, #4]
 80024a6:	466d      	mov	r5, sp
 80024a8:	f106 0410 	add.w	r4, r6, #16
 80024ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024bc:	1d33      	adds	r3, r6, #4
 80024be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f002 fa0b 	bl	80048dc <USB_CoreInit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d7      	b.n	8002688 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fa65 	bl	80049ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e04a      	b.n	8002580 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	333d      	adds	r3, #61	; 0x3d
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	333c      	adds	r3, #60	; 0x3c
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	b298      	uxth	r0, r3
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3342      	adds	r3, #66	; 0x42
 8002526:	4602      	mov	r2, r0
 8002528:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	333f      	adds	r3, #63	; 0x3f
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3344      	adds	r3, #68	; 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3348      	adds	r3, #72	; 0x48
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	3350      	adds	r3, #80	; 0x50
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	3301      	adds	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3af      	bcc.n	80024ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e044      	b.n	800261a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3b5      	bcc.n	8002590 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	687e      	ldr	r6, [r7, #4]
 800262c:	466d      	mov	r5, sp
 800262e:	f106 0410 	add.w	r4, r6, #16
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800263a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002642:	1d33      	adds	r3, r6, #4
 8002644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002646:	6838      	ldr	r0, [r7, #0]
 8002648:	f002 f9fe 	bl	8004a48 <USB_DevInit>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e014      	b.n	8002688 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f80a 	bl	8002690 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fbb8 	bl	8004df6 <USB_DevDisconnect>

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	10000003 	.word	0x10000003

080026d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_PWREx_EnableOverDrive+0x98>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_PWREx_EnableOverDrive+0x98>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_PWREx_EnableOverDrive+0x98>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002726:	f7fe fda1 	bl	800126c <HAL_GetTick>
 800272a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800272c:	e009      	b.n	8002742 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800272e:	f7fe fd9d 	bl	800126c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273c:	d901      	bls.n	8002742 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e022      	b.n	8002788 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d1ee      	bne.n	800272e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275c:	f7fe fd86 	bl	800126c <HAL_GetTick>
 8002760:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002762:	e009      	b.n	8002778 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002764:	f7fe fd82 	bl	800126c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002772:	d901      	bls.n	8002778 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e007      	b.n	8002788 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_PWREx_EnableOverDrive+0x9c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002784:	d1ee      	bne.n	8002764 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000

08002798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e29b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4b96      	ldr	r3, [pc, #600]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d00c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c8:	4b93      	ldr	r3, [pc, #588]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d112      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d06c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x130>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d168      	bne.n	80028c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e275      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x7a>
 8002804:	4b84      	ldr	r3, [pc, #528]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a83      	ldr	r2, [pc, #524]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e02e      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x9c>
 800281a:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7e      	ldr	r2, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7b      	ldr	r2, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0xc0>
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xd8>
 8002858:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6b      	ldr	r2, [pc, #428]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fcf8 	bl	800126c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fcf4 	bl	800126c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e229      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fce4 	bl	800126c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fce0 	bl	800126c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e215      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x110>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d069      	beq.n	80029aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d6:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1e9      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	493d      	ldr	r1, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc96 	bl	800126c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fc92 	bl	800126c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4929      	ldr	r1, [pc, #164]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fc72 	bl	800126c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fc6e 	bl	800126c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1a3      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d038      	beq.n	8002a28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fc4f 	bl	800126c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fc4b 	bl	800126c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e180      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x23a>
 80029f0:	e01a      	b.n	8002a28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_RCC_OscConfig+0x280>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fc35 	bl	800126c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe fc31 	bl	800126c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d903      	bls.n	8002a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e166      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
 8002a18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a4 	beq.w	8002b7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b8c      	ldr	r3, [pc, #560]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a88      	ldr	r2, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b86      	ldr	r3, [pc, #536]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	4b83      	ldr	r3, [pc, #524]	; (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a6a:	4b80      	ldr	r3, [pc, #512]	; (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7f      	ldr	r2, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fbf9 	bl	800126c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fbf5 	bl	800126c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e12a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x4d4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x31a>
 8002aa4:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a6f      	ldr	r2, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	e02d      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x33c>
 8002aba:	4b6b      	ldr	r3, [pc, #428]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a6a      	ldr	r2, [pc, #424]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a67      	ldr	r2, [pc, #412]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	e01c      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x35e>
 8002adc:	4b62      	ldr	r3, [pc, #392]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a5e      	ldr	r2, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	e00b      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fba9 	bl	800126c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fba5 	bl	800126c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0d8      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCC_OscConfig+0x386>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fb93 	bl	800126c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fb8f 	bl	800126c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0c2      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ee      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d105      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80ae 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d06d      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d14b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fb60 	bl	800126c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fb5c 	bl	800126c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e091      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	491b      	ldr	r1, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb2e 	bl	800126c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fb2a 	bl	800126c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e05f      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x47c>
 8002c32:	e057      	b.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb14 	bl	800126c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fb10 	bl	800126c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4b0>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_RCC_OscConfig+0x558>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d030      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d129      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d122      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d119      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0d0      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b6a      	ldr	r3, [pc, #424]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	4965      	ldr	r1, [pc, #404]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b63      	ldr	r3, [pc, #396]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0b8      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d78:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	494d      	ldr	r1, [pc, #308]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d040      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e07f      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e073      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06b      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4936      	ldr	r1, [pc, #216]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fa40 	bl	800126c <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fa3c 	bl	800126c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e053      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d210      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4922      	ldr	r1, [pc, #136]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e032      	b.n	8002eae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4916      	ldr	r1, [pc, #88]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	490e      	ldr	r1, [pc, #56]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e86:	f000 f821 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f99c 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023c00 	.word	0x40023c00
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	08005888 	.word	0x08005888
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	20000008 	.word	0x20000008

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d00d      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x40>
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	f200 80bd 	bhi.w	8003070 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x34>
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002efe:	e0b7      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f02:	60bb      	str	r3, [r7, #8]
      break;
 8002f04:	e0b7      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f06:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f08:	60bb      	str	r3, [r7, #8]
      break;
 8002f0a:	e0b4      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d04d      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	ea02 0800 	and.w	r8, r2, r0
 8002f3a:	ea03 0901 	and.w	r9, r3, r1
 8002f3e:	4640      	mov	r0, r8
 8002f40:	4649      	mov	r1, r9
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	014b      	lsls	r3, r1, #5
 8002f4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f50:	0142      	lsls	r2, r0, #5
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	ebb0 0008 	subs.w	r0, r0, r8
 8002f5a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f6c:	0182      	lsls	r2, r0, #6
 8002f6e:	1a12      	subs	r2, r2, r0
 8002f70:	eb63 0301 	sbc.w	r3, r3, r1
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	00d9      	lsls	r1, r3, #3
 8002f7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f82:	00d0      	lsls	r0, r2, #3
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	eb12 0208 	adds.w	r2, r2, r8
 8002f8c:	eb43 0309 	adc.w	r3, r3, r9
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0259      	lsls	r1, r3, #9
 8002f9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f9e:	0250      	lsls	r0, r2, #9
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f7fd f996 	bl	80002e0 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e04a      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	ea02 0400 	and.w	r4, r2, r0
 8002fd6:	ea03 0501 	and.w	r5, r3, r1
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	014b      	lsls	r3, r1, #5
 8002fe8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fec:	0142      	lsls	r2, r0, #5
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	1b00      	subs	r0, r0, r4
 8002ff4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	018b      	lsls	r3, r1, #6
 8003002:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003006:	0182      	lsls	r2, r0, #6
 8003008:	1a12      	subs	r2, r2, r0
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	00d9      	lsls	r1, r3, #3
 8003018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800301c:	00d0      	lsls	r0, r2, #3
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	1912      	adds	r2, r2, r4
 8003024:	eb45 0303 	adc.w	r3, r5, r3
 8003028:	f04f 0000 	mov.w	r0, #0
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	0299      	lsls	r1, r3, #10
 8003032:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003036:	0290      	lsls	r0, r2, #10
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	461a      	mov	r2, r3
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	f7fd f94a 	bl	80002e0 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	60bb      	str	r3, [r7, #8]
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003072:	60bb      	str	r3, [r7, #8]
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	68bb      	ldr	r3, [r7, #8]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	00f42400 	.word	0x00f42400
 800308c:	007a1200 	.word	0x007a1200

08003090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030ac:	f7ff fff0 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0a9b      	lsrs	r3, r3, #10
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08005898 	.word	0x08005898

080030d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d4:	f7ff ffdc 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0b5b      	lsrs	r3, r3, #13
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4903      	ldr	r1, [pc, #12]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	08005898 	.word	0x08005898

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003120:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	4964      	ldr	r1, [pc, #400]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	4959      	ldr	r1, [pc, #356]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800318e:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	494a      	ldr	r1, [pc, #296]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 808b 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
 80031e8:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fe f834 	bl	800126c <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe f830 	bl	800126c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e38f      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d035      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d02e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d114      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd fff8 	bl	800126c <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	e00a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fd fff4 	bl	800126c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e351      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ee      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ae:	d111      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032be:	400b      	ands	r3, r1
 80032c0:	4901      	ldr	r1, [pc, #4]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	0ffffcff 	.word	0x0ffffcff
 80032d4:	4bb3      	ldr	r3, [pc, #716]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4ab2      	ldr	r2, [pc, #712]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	4bb0      	ldr	r3, [pc, #704]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	49ad      	ldr	r1, [pc, #692]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d010      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032fe:	4ba9      	ldr	r3, [pc, #676]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	4aa7      	ldr	r2, [pc, #668]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800330e:	4ba5      	ldr	r3, [pc, #660]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003310:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	49a2      	ldr	r1, [pc, #648]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332c:	4b9d      	ldr	r3, [pc, #628]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	499a      	ldr	r1, [pc, #616]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800334e:	4b95      	ldr	r3, [pc, #596]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335c:	4991      	ldr	r1, [pc, #580]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337e:	4989      	ldr	r1, [pc, #548]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003392:	4b84      	ldr	r3, [pc, #528]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4980      	ldr	r1, [pc, #512]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b4:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4978      	ldr	r1, [pc, #480]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 020c 	bic.w	r2, r3, #12
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	496f      	ldr	r1, [pc, #444]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	4967      	ldr	r1, [pc, #412]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800341a:	4b62      	ldr	r3, [pc, #392]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003428:	495e      	ldr	r1, [pc, #376]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343c:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	4956      	ldr	r1, [pc, #344]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	494d      	ldr	r1, [pc, #308]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	4945      	ldr	r1, [pc, #276]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	493c      	ldr	r1, [pc, #240]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d2:	4934      	ldr	r1, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d011      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034e6:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f4:	492b      	ldr	r1, [pc, #172]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	4912      	ldr	r1, [pc, #72]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800356c:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357c:	4909      	ldr	r1, [pc, #36]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00f      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	4986      	ldr	r1, [pc, #536]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035bc:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035cc:	497d      	ldr	r1, [pc, #500]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d006      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80d6 	beq.w	8003794 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e8:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a75      	ldr	r2, [pc, #468]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fd fe3a 	bl	800126c <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035fc:	f7fd fe36 	bl	800126c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e195      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800360e:	4b6d      	ldr	r3, [pc, #436]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d021      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11d      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003642:	0e1b      	lsrs	r3, r3, #24
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	019a      	lsls	r2, r3, #6
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4958      	ldr	r1, [pc, #352]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02e      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003694:	d129      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003696:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a4:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	0f1b      	lsrs	r3, r3, #28
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	019a      	lsls	r2, r3, #6
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	071b      	lsls	r3, r3, #28
 80036ca:	493e      	ldr	r1, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036d2:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d8:	f023 021f 	bic.w	r2, r3, #31
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4938      	ldr	r1, [pc, #224]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01d      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f6:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	0f1b      	lsrs	r3, r3, #28
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	019a      	lsls	r2, r3, #6
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	071b      	lsls	r3, r3, #28
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	019a      	lsls	r2, r3, #6
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	071b      	lsls	r3, r3, #28
 800375a:	491a      	ldr	r1, [pc, #104]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800376c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376e:	f7fd fd7d 	bl	800126c <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003776:	f7fd fd79 	bl	800126c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e0d8      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	f040 80ce 	bne.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd fd60 	bl	800126c <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037ae:	e00b      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037b0:	f7fd fd5c 	bl	800126c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d904      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0bb      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d4:	d0ec      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02e      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d12a      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800380c:	4b4d      	ldr	r3, [pc, #308]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	0f1b      	lsrs	r3, r3, #28
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	019a      	lsls	r2, r3, #6
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	071b      	lsls	r3, r3, #28
 8003832:	4944      	ldr	r1, [pc, #272]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800383a:	4b42      	ldr	r3, [pc, #264]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800383c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003840:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	493d      	ldr	r1, [pc, #244]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d11d      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	0e1b      	lsrs	r3, r3, #24
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003878:	4b32      	ldr	r3, [pc, #200]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	0f1b      	lsrs	r3, r3, #28
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	019a      	lsls	r2, r3, #6
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	4929      	ldr	r1, [pc, #164]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	0e1b      	lsrs	r3, r3, #24
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	019a      	lsls	r2, r3, #6
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	4917      	ldr	r1, [pc, #92]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4911      	ldr	r1, [pc, #68]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fd fcac 	bl	800126c <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003918:	f7fd fca8 	bl	800126c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e007      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003936:	d1ef      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800

08003948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e049      	b.n	80039ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fa32 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f000 f9f6 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e054      	b.n	8003aba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d01d      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIM_Base_Start_IT+0xe4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d115      	bne.n	8003aa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xec>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d015      	beq.n	8003ab6 <HAL_TIM_Base_Start_IT+0xbe>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d011      	beq.n	8003ab6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e008      	b.n	8003ab6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40010400 	.word	0x40010400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40001800 	.word	0x40001800
 8003ae4:	00010007 	.word	0x00010007

08003ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0202 	mvn.w	r2, #2
 8003b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f905 	bl	8003d3a <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8f7 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f908 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0204 	mvn.w	r2, #4
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8db 	bl	8003d3a <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8cd 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8de 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0208 	mvn.w	r2, #8
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8b1 	bl	8003d3a <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8a3 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8b4 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0210 	mvn.w	r2, #16
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2208      	movs	r2, #8
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f887 	bl	8003d3a <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f879 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f88a 	bl	8003d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0201 	mvn.w	r2, #1
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc ff54 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d10e      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d107      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f91a 	bl	8003ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d10e      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d107      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f90d 	bl	8003ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d107      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f838 	bl	8003d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d10e      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0220 	mvn.w	r2, #32
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8cd 	bl	8003eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d00f      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3a      	ldr	r2, [pc, #232]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d108      	bne.n	8003dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d027      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d023      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d017      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <TIM_Base_SetConfig+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <TIM_Base_SetConfig+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00f      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <TIM_Base_SetConfig+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a25      	ldr	r2, [pc, #148]	; (8003eac <TIM_Base_SetConfig+0x134>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <TIM_Base_SetConfig+0x138>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <TIM_Base_SetConfig+0x13c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40010400 	.word	0x40010400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800
 8003eac:	40001800 	.word	0x40001800
 8003eb0:	40001c00 	.word	0x40001c00
 8003eb4:	40002000 	.word	0x40002000

08003eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e040      	b.n	8003f88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc ffa0 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	; 0x24
 8003f20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8c0 	bl	80040b8 <UART_SetConfig>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e022      	b.n	8003f88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb16 	bl	800457c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb9d 	bl	80046c0 <UART_CheckIdleState>
 8003f86:	4603      	mov	r3, r0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	f040 8081 	bne.w	80040ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Transmit+0x26>
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e079      	b.n	80040ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Transmit+0x38>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e072      	b.n	80040ae <HAL_UART_Transmit+0x11e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2221      	movs	r2, #33	; 0x21
 8003fdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fde:	f7fd f945 	bl	800126c <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d108      	bne.n	8004010 <HAL_UART_Transmit+0x80>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004020:	e02c      	b.n	800407c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb90 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e038      	b.n	80040ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	3302      	adds	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e007      	b.n	800406a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1cc      	bne.n	8004022 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fb5d 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e005      	b.n	80040ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4ba7      	ldr	r3, [pc, #668]	; (8004380 <UART_SetConfig+0x2c8>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	6979      	ldr	r1, [r7, #20]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a95      	ldr	r2, [pc, #596]	; (8004384 <UART_SetConfig+0x2cc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d120      	bne.n	8004176 <UART_SetConfig+0xbe>
 8004134:	4b94      	ldr	r3, [pc, #592]	; (8004388 <UART_SetConfig+0x2d0>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d816      	bhi.n	8004170 <UART_SetConfig+0xb8>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x90>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	08004159 	.word	0x08004159
 800414c:	08004165 	.word	0x08004165
 8004150:	0800415f 	.word	0x0800415f
 8004154:	0800416b 	.word	0x0800416b
 8004158:	2301      	movs	r3, #1
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e14f      	b.n	80043fe <UART_SetConfig+0x346>
 800415e:	2302      	movs	r3, #2
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e14c      	b.n	80043fe <UART_SetConfig+0x346>
 8004164:	2304      	movs	r3, #4
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e149      	b.n	80043fe <UART_SetConfig+0x346>
 800416a:	2308      	movs	r3, #8
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e146      	b.n	80043fe <UART_SetConfig+0x346>
 8004170:	2310      	movs	r3, #16
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e143      	b.n	80043fe <UART_SetConfig+0x346>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a84      	ldr	r2, [pc, #528]	; (800438c <UART_SetConfig+0x2d4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d132      	bne.n	80041e6 <UART_SetConfig+0x12e>
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <UART_SetConfig+0x2d0>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d828      	bhi.n	80041e0 <UART_SetConfig+0x128>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0xdc>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041e1 	.word	0x080041e1
 80041a0:	080041e1 	.word	0x080041e1
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041e1 	.word	0x080041e1
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	080041e1 	.word	0x080041e1
 80041b4:	080041cf 	.word	0x080041cf
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e1 	.word	0x080041e1
 80041c4:	080041db 	.word	0x080041db
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e117      	b.n	80043fe <UART_SetConfig+0x346>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e114      	b.n	80043fe <UART_SetConfig+0x346>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e111      	b.n	80043fe <UART_SetConfig+0x346>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e10e      	b.n	80043fe <UART_SetConfig+0x346>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e10b      	b.n	80043fe <UART_SetConfig+0x346>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a69      	ldr	r2, [pc, #420]	; (8004390 <UART_SetConfig+0x2d8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d120      	bne.n	8004232 <UART_SetConfig+0x17a>
 80041f0:	4b65      	ldr	r3, [pc, #404]	; (8004388 <UART_SetConfig+0x2d0>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041fa:	2b30      	cmp	r3, #48	; 0x30
 80041fc:	d013      	beq.n	8004226 <UART_SetConfig+0x16e>
 80041fe:	2b30      	cmp	r3, #48	; 0x30
 8004200:	d814      	bhi.n	800422c <UART_SetConfig+0x174>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d009      	beq.n	800421a <UART_SetConfig+0x162>
 8004206:	2b20      	cmp	r3, #32
 8004208:	d810      	bhi.n	800422c <UART_SetConfig+0x174>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <UART_SetConfig+0x15c>
 800420e:	2b10      	cmp	r3, #16
 8004210:	d006      	beq.n	8004220 <UART_SetConfig+0x168>
 8004212:	e00b      	b.n	800422c <UART_SetConfig+0x174>
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e0f1      	b.n	80043fe <UART_SetConfig+0x346>
 800421a:	2302      	movs	r3, #2
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e0ee      	b.n	80043fe <UART_SetConfig+0x346>
 8004220:	2304      	movs	r3, #4
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e0eb      	b.n	80043fe <UART_SetConfig+0x346>
 8004226:	2308      	movs	r3, #8
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e0e8      	b.n	80043fe <UART_SetConfig+0x346>
 800422c:	2310      	movs	r3, #16
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e0e5      	b.n	80043fe <UART_SetConfig+0x346>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a57      	ldr	r2, [pc, #348]	; (8004394 <UART_SetConfig+0x2dc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d120      	bne.n	800427e <UART_SetConfig+0x1c6>
 800423c:	4b52      	ldr	r3, [pc, #328]	; (8004388 <UART_SetConfig+0x2d0>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d013      	beq.n	8004272 <UART_SetConfig+0x1ba>
 800424a:	2bc0      	cmp	r3, #192	; 0xc0
 800424c:	d814      	bhi.n	8004278 <UART_SetConfig+0x1c0>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d009      	beq.n	8004266 <UART_SetConfig+0x1ae>
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d810      	bhi.n	8004278 <UART_SetConfig+0x1c0>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x1a8>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d006      	beq.n	800426c <UART_SetConfig+0x1b4>
 800425e:	e00b      	b.n	8004278 <UART_SetConfig+0x1c0>
 8004260:	2300      	movs	r3, #0
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e0cb      	b.n	80043fe <UART_SetConfig+0x346>
 8004266:	2302      	movs	r3, #2
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e0c8      	b.n	80043fe <UART_SetConfig+0x346>
 800426c:	2304      	movs	r3, #4
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e0c5      	b.n	80043fe <UART_SetConfig+0x346>
 8004272:	2308      	movs	r3, #8
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e0c2      	b.n	80043fe <UART_SetConfig+0x346>
 8004278:	2310      	movs	r3, #16
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e0bf      	b.n	80043fe <UART_SetConfig+0x346>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a45      	ldr	r2, [pc, #276]	; (8004398 <UART_SetConfig+0x2e0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d125      	bne.n	80042d4 <UART_SetConfig+0x21c>
 8004288:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <UART_SetConfig+0x2d0>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004296:	d017      	beq.n	80042c8 <UART_SetConfig+0x210>
 8004298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429c:	d817      	bhi.n	80042ce <UART_SetConfig+0x216>
 800429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a2:	d00b      	beq.n	80042bc <UART_SetConfig+0x204>
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d811      	bhi.n	80042ce <UART_SetConfig+0x216>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <UART_SetConfig+0x1fe>
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d006      	beq.n	80042c2 <UART_SetConfig+0x20a>
 80042b4:	e00b      	b.n	80042ce <UART_SetConfig+0x216>
 80042b6:	2300      	movs	r3, #0
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e0a0      	b.n	80043fe <UART_SetConfig+0x346>
 80042bc:	2302      	movs	r3, #2
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e09d      	b.n	80043fe <UART_SetConfig+0x346>
 80042c2:	2304      	movs	r3, #4
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e09a      	b.n	80043fe <UART_SetConfig+0x346>
 80042c8:	2308      	movs	r3, #8
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e097      	b.n	80043fe <UART_SetConfig+0x346>
 80042ce:	2310      	movs	r3, #16
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e094      	b.n	80043fe <UART_SetConfig+0x346>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <UART_SetConfig+0x2e4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d125      	bne.n	800432a <UART_SetConfig+0x272>
 80042de:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <UART_SetConfig+0x2d0>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ec:	d017      	beq.n	800431e <UART_SetConfig+0x266>
 80042ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f2:	d817      	bhi.n	8004324 <UART_SetConfig+0x26c>
 80042f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f8:	d00b      	beq.n	8004312 <UART_SetConfig+0x25a>
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fe:	d811      	bhi.n	8004324 <UART_SetConfig+0x26c>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0x254>
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d006      	beq.n	8004318 <UART_SetConfig+0x260>
 800430a:	e00b      	b.n	8004324 <UART_SetConfig+0x26c>
 800430c:	2301      	movs	r3, #1
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e075      	b.n	80043fe <UART_SetConfig+0x346>
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e072      	b.n	80043fe <UART_SetConfig+0x346>
 8004318:	2304      	movs	r3, #4
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e06f      	b.n	80043fe <UART_SetConfig+0x346>
 800431e:	2308      	movs	r3, #8
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e06c      	b.n	80043fe <UART_SetConfig+0x346>
 8004324:	2310      	movs	r3, #16
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e069      	b.n	80043fe <UART_SetConfig+0x346>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <UART_SetConfig+0x2e8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d137      	bne.n	80043a4 <UART_SetConfig+0x2ec>
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <UART_SetConfig+0x2d0>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800433e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004342:	d017      	beq.n	8004374 <UART_SetConfig+0x2bc>
 8004344:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004348:	d817      	bhi.n	800437a <UART_SetConfig+0x2c2>
 800434a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434e:	d00b      	beq.n	8004368 <UART_SetConfig+0x2b0>
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d811      	bhi.n	800437a <UART_SetConfig+0x2c2>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <UART_SetConfig+0x2aa>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d006      	beq.n	800436e <UART_SetConfig+0x2b6>
 8004360:	e00b      	b.n	800437a <UART_SetConfig+0x2c2>
 8004362:	2300      	movs	r3, #0
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e04a      	b.n	80043fe <UART_SetConfig+0x346>
 8004368:	2302      	movs	r3, #2
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e047      	b.n	80043fe <UART_SetConfig+0x346>
 800436e:	2304      	movs	r3, #4
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e044      	b.n	80043fe <UART_SetConfig+0x346>
 8004374:	2308      	movs	r3, #8
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e041      	b.n	80043fe <UART_SetConfig+0x346>
 800437a:	2310      	movs	r3, #16
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e03e      	b.n	80043fe <UART_SetConfig+0x346>
 8004380:	efff69f3 	.word	0xefff69f3
 8004384:	40011000 	.word	0x40011000
 8004388:	40023800 	.word	0x40023800
 800438c:	40004400 	.word	0x40004400
 8004390:	40004800 	.word	0x40004800
 8004394:	40004c00 	.word	0x40004c00
 8004398:	40005000 	.word	0x40005000
 800439c:	40011400 	.word	0x40011400
 80043a0:	40007800 	.word	0x40007800
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a71      	ldr	r2, [pc, #452]	; (8004570 <UART_SetConfig+0x4b8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d125      	bne.n	80043fa <UART_SetConfig+0x342>
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <UART_SetConfig+0x4bc>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043bc:	d017      	beq.n	80043ee <UART_SetConfig+0x336>
 80043be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043c2:	d817      	bhi.n	80043f4 <UART_SetConfig+0x33c>
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d00b      	beq.n	80043e2 <UART_SetConfig+0x32a>
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d811      	bhi.n	80043f4 <UART_SetConfig+0x33c>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <UART_SetConfig+0x324>
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d8:	d006      	beq.n	80043e8 <UART_SetConfig+0x330>
 80043da:	e00b      	b.n	80043f4 <UART_SetConfig+0x33c>
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e00d      	b.n	80043fe <UART_SetConfig+0x346>
 80043e2:	2302      	movs	r3, #2
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e00a      	b.n	80043fe <UART_SetConfig+0x346>
 80043e8:	2304      	movs	r3, #4
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e007      	b.n	80043fe <UART_SetConfig+0x346>
 80043ee:	2308      	movs	r3, #8
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e004      	b.n	80043fe <UART_SetConfig+0x346>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e001      	b.n	80043fe <UART_SetConfig+0x346>
 80043fa:	2310      	movs	r3, #16
 80043fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004406:	d15a      	bne.n	80044be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004408:	7ffb      	ldrb	r3, [r7, #31]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d827      	bhi.n	800445e <UART_SetConfig+0x3a6>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x35c>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004439 	.word	0x08004439
 8004418:	08004441 	.word	0x08004441
 800441c:	08004449 	.word	0x08004449
 8004420:	0800445f 	.word	0x0800445f
 8004424:	0800444f 	.word	0x0800444f
 8004428:	0800445f 	.word	0x0800445f
 800442c:	0800445f 	.word	0x0800445f
 8004430:	0800445f 	.word	0x0800445f
 8004434:	08004457 	.word	0x08004457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fe36 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 800443c:	61b8      	str	r0, [r7, #24]
        break;
 800443e:	e013      	b.n	8004468 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe fe46 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 8004444:	61b8      	str	r0, [r7, #24]
        break;
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <UART_SetConfig+0x4c0>)
 800444a:	61bb      	str	r3, [r7, #24]
        break;
 800444c:	e00c      	b.n	8004468 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444e:	f7fe fd3d 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8004452:	61b8      	str	r0, [r7, #24]
        break;
 8004454:	e008      	b.n	8004468 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e004      	b.n	8004468 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	77bb      	strb	r3, [r7, #30]
        break;
 8004466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d074      	beq.n	8004558 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	005a      	lsls	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d916      	bls.n	80044b8 <UART_SetConfig+0x400>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d212      	bcs.n	80044b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f023 030f 	bic.w	r3, r3, #15
 800449a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	89fa      	ldrh	r2, [r7, #14]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	e04f      	b.n	8004558 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	77bb      	strb	r3, [r7, #30]
 80044bc:	e04c      	b.n	8004558 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044be:	7ffb      	ldrb	r3, [r7, #31]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d828      	bhi.n	8004516 <UART_SetConfig+0x45e>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x414>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe fdda 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 80044f4:	61b8      	str	r0, [r7, #24]
        break;
 80044f6:	e013      	b.n	8004520 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7fe fdea 	bl	80030d0 <HAL_RCC_GetPCLK2Freq>
 80044fc:	61b8      	str	r0, [r7, #24]
        break;
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <UART_SetConfig+0x4c0>)
 8004502:	61bb      	str	r3, [r7, #24]
        break;
 8004504:	e00c      	b.n	8004520 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe fce1 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 800450a:	61b8      	str	r0, [r7, #24]
        break;
 800450c:	e008      	b.n	8004520 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	61bb      	str	r3, [r7, #24]
        break;
 8004514:	e004      	b.n	8004520 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77bb      	strb	r3, [r7, #30]
        break;
 800451e:	bf00      	nop
    }

    if (pclk != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	085a      	lsrs	r2, r3, #1
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d909      	bls.n	8004554 <UART_SetConfig+0x49c>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d205      	bcs.n	8004554 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	e001      	b.n	8004558 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004564:	7fbb      	ldrb	r3, [r7, #30]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40007c00 	.word	0x40007c00
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400

0800457c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467a:	d10a      	bne.n	8004692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d0:	f7fc fdcc 	bl	800126c <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d10e      	bne.n	8004702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f82d 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e023      	b.n	800474a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d10e      	bne.n	800472e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f817 	bl	8004752 <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e00d      	b.n	800474a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b09c      	sub	sp, #112	; 0x70
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	e0a5      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	f000 80a1 	beq.w	80048b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fc fd7d 	bl	800126c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <UART_WaitOnFlagUntilTimeout+0x32>
 800477e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004780:	2b00      	cmp	r3, #0
 8004782:	d13e      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004798:	667b      	str	r3, [r7, #100]	; 0x64
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e6      	bne.n	8004784 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80047d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e067      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d04f      	beq.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481e:	d147      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004828:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
 800484a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800484e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e6      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	66bb      	str	r3, [r7, #104]	; 0x68
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800487c:	623a      	str	r2, [r7, #32]
 800487e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	61bb      	str	r3, [r7, #24]
   return(result);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e010      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4013      	ands	r3, r2
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f43f af4a 	beq.w	8004764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3770      	adds	r7, #112	; 0x70
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048dc:	b084      	sub	sp, #16
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	f107 001c 	add.w	r0, r7, #28
 80048ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d120      	bne.n	8004936 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <USB_CoreInit+0xac>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d105      	bne.n	800492a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa92 	bl	8004e54 <USB_CoreReset>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
 8004934:	e010      	b.n	8004958 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa86 	bl	8004e54 <USB_CoreReset>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10b      	bne.n	8004976 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f043 0206 	orr.w	r2, r3, #6
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004982:	b004      	add	sp, #16
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	ffbdffbf 	.word	0xffbdffbf

0800498c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 0201 	bic.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d115      	bne.n	80049fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049dc:	2001      	movs	r0, #1
 80049de:	f7fc fc51 	bl	8001284 <HAL_Delay>
      ms++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3301      	adds	r3, #1
 80049e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa25 	bl	8004e38 <USB_GetMode>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d01e      	beq.n	8004a32 <USB_SetCurrentMode+0x84>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b31      	cmp	r3, #49	; 0x31
 80049f8:	d9f0      	bls.n	80049dc <USB_SetCurrentMode+0x2e>
 80049fa:	e01a      	b.n	8004a32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7fc fc38 	bl	8001284 <HAL_Delay>
      ms++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa0c 	bl	8004e38 <USB_GetMode>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <USB_SetCurrentMode+0x84>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b31      	cmp	r3, #49	; 0x31
 8004a2a:	d9f0      	bls.n	8004a0e <USB_SetCurrentMode+0x60>
 8004a2c:	e001      	b.n	8004a32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e005      	b.n	8004a3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b32      	cmp	r3, #50	; 0x32
 8004a36:	d101      	bne.n	8004a3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e009      	b.n	8004a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	3340      	adds	r3, #64	; 0x40
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	2200      	movs	r2, #0
 8004a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b0e      	cmp	r3, #14
 8004a80:	d9f2      	bls.n	8004a68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11c      	bne.n	8004ac2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a96:	f043 0302 	orr.w	r3, r3, #2
 8004a9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e005      	b.n	8004ace <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae8:	461a      	mov	r2, r3
 8004aea:	680b      	ldr	r3, [r1, #0]
 8004aec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10c      	bne.n	8004b0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004afa:	2100      	movs	r1, #0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f961 	bl	8004dc4 <USB_SetDevSpeed>
 8004b02:	e008      	b.n	8004b16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b04:	2101      	movs	r1, #1
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f95c 	bl	8004dc4 <USB_SetDevSpeed>
 8004b0c:	e003      	b.n	8004b16 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b0e:	2103      	movs	r1, #3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f957 	bl	8004dc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b16:	2110      	movs	r1, #16
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8f3 	bl	8004d04 <USB_FlushTxFifo>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f91d 	bl	8004d68 <USB_FlushRxFifo>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	461a      	mov	r2, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e043      	b.n	8004bea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b78:	d118      	bne.n	8004bac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e013      	b.n	8004bbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e008      	b.n	8004bbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004be2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	3301      	adds	r3, #1
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d3b7      	bcc.n	8004b62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e043      	b.n	8004c80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0e:	d118      	bne.n	8004c42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	461a      	mov	r2, r3
 8004c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e013      	b.n	8004c54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e008      	b.n	8004c54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	461a      	mov	r2, r3
 8004c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b7      	bcc.n	8004bf8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f043 0210 	orr.w	r2, r3, #16
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <USB_DevInit+0x2b4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f043 0208 	orr.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d105      	bne.n	8004cec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <USB_DevInit+0x2b8>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf8:	b004      	add	sp, #16
 8004cfa:	4770      	bx	lr
 8004cfc:	803c3800 	.word	0x803c3800
 8004d00:	40000004 	.word	0x40000004

08004d04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <USB_FlushTxFifo+0x60>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e01a      	b.n	8004d58 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	daf3      	bge.n	8004d12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <USB_FlushTxFifo+0x60>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e006      	b.n	8004d58 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d0f1      	beq.n	8004d3a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	00030d40 	.word	0x00030d40

08004d68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <USB_FlushRxFifo+0x58>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e017      	b.n	8004db4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	daf3      	bge.n	8004d74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2210      	movs	r2, #16
 8004d94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <USB_FlushRxFifo+0x58>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e006      	b.n	8004db4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d0f1      	beq.n	8004d96 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	00030d40 	.word	0x00030d40

08004dc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0301 	and.w	r3, r3, #1
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <USB_CoreReset+0x60>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e01a      	b.n	8004ea6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	daf3      	bge.n	8004e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <USB_CoreReset+0x60>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e006      	b.n	8004ea6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d0f1      	beq.n	8004e88 <USB_CoreReset+0x34>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	00030d40 	.word	0x00030d40

08004eb8 <__errno>:
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <__errno+0x8>)
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000010 	.word	0x20000010

08004ec4 <__libc_init_array>:
 8004ec4:	b570      	push	{r4, r5, r6, lr}
 8004ec6:	4d0d      	ldr	r5, [pc, #52]	; (8004efc <__libc_init_array+0x38>)
 8004ec8:	4c0d      	ldr	r4, [pc, #52]	; (8004f00 <__libc_init_array+0x3c>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	2600      	movs	r6, #0
 8004ed0:	42a6      	cmp	r6, r4
 8004ed2:	d109      	bne.n	8004ee8 <__libc_init_array+0x24>
 8004ed4:	4d0b      	ldr	r5, [pc, #44]	; (8004f04 <__libc_init_array+0x40>)
 8004ed6:	4c0c      	ldr	r4, [pc, #48]	; (8004f08 <__libc_init_array+0x44>)
 8004ed8:	f000 fc4e 	bl	8005778 <_init>
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	42a6      	cmp	r6, r4
 8004ee4:	d105      	bne.n	8004ef2 <__libc_init_array+0x2e>
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eec:	4798      	blx	r3
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7ee      	b.n	8004ed0 <__libc_init_array+0xc>
 8004ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef6:	4798      	blx	r3
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7f2      	b.n	8004ee2 <__libc_init_array+0x1e>
 8004efc:	080058dc 	.word	0x080058dc
 8004f00:	080058dc 	.word	0x080058dc
 8004f04:	080058dc 	.word	0x080058dc
 8004f08:	080058e0 	.word	0x080058e0

08004f0c <memset>:
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <siprintf>:
 8004f1c:	b40e      	push	{r1, r2, r3}
 8004f1e:	b500      	push	{lr}
 8004f20:	b09c      	sub	sp, #112	; 0x70
 8004f22:	ab1d      	add	r3, sp, #116	; 0x74
 8004f24:	9002      	str	r0, [sp, #8]
 8004f26:	9006      	str	r0, [sp, #24]
 8004f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f2c:	4809      	ldr	r0, [pc, #36]	; (8004f54 <siprintf+0x38>)
 8004f2e:	9107      	str	r1, [sp, #28]
 8004f30:	9104      	str	r1, [sp, #16]
 8004f32:	4909      	ldr	r1, [pc, #36]	; (8004f58 <siprintf+0x3c>)
 8004f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f38:	9105      	str	r1, [sp, #20]
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	a902      	add	r1, sp, #8
 8004f40:	f000 f868 	bl	8005014 <_svfiprintf_r>
 8004f44:	9b02      	ldr	r3, [sp, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	b01c      	add	sp, #112	; 0x70
 8004f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f50:	b003      	add	sp, #12
 8004f52:	4770      	bx	lr
 8004f54:	20000010 	.word	0x20000010
 8004f58:	ffff0208 	.word	0xffff0208

08004f5c <__ssputs_r>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	688e      	ldr	r6, [r1, #8]
 8004f62:	429e      	cmp	r6, r3
 8004f64:	4682      	mov	sl, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4690      	mov	r8, r2
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	d838      	bhi.n	8004fe0 <__ssputs_r+0x84>
 8004f6e:	898a      	ldrh	r2, [r1, #12]
 8004f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f74:	d032      	beq.n	8004fdc <__ssputs_r+0x80>
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	6909      	ldr	r1, [r1, #16]
 8004f7a:	eba5 0901 	sub.w	r9, r5, r1
 8004f7e:	6965      	ldr	r5, [r4, #20]
 8004f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f88:	3301      	adds	r3, #1
 8004f8a:	444b      	add	r3, r9
 8004f8c:	106d      	asrs	r5, r5, #1
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	bf38      	it	cc
 8004f92:	461d      	movcc	r5, r3
 8004f94:	0553      	lsls	r3, r2, #21
 8004f96:	d531      	bpl.n	8004ffc <__ssputs_r+0xa0>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f000 fb47 	bl	800562c <_malloc_r>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	b950      	cbnz	r0, 8004fb8 <__ssputs_r+0x5c>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	f8ca 3000 	str.w	r3, [sl]
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	6921      	ldr	r1, [r4, #16]
 8004fba:	464a      	mov	r2, r9
 8004fbc:	f000 fabe 	bl	800553c <memcpy>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	6126      	str	r6, [r4, #16]
 8004fce:	6165      	str	r5, [r4, #20]
 8004fd0:	444e      	add	r6, r9
 8004fd2:	eba5 0509 	sub.w	r5, r5, r9
 8004fd6:	6026      	str	r6, [r4, #0]
 8004fd8:	60a5      	str	r5, [r4, #8]
 8004fda:	463e      	mov	r6, r7
 8004fdc:	42be      	cmp	r6, r7
 8004fde:	d900      	bls.n	8004fe2 <__ssputs_r+0x86>
 8004fe0:	463e      	mov	r6, r7
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	f000 fab6 	bl	8005558 <memmove>
 8004fec:	68a3      	ldr	r3, [r4, #8]
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	1b9b      	subs	r3, r3, r6
 8004ff2:	4432      	add	r2, r6
 8004ff4:	60a3      	str	r3, [r4, #8]
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	e7db      	b.n	8004fb4 <__ssputs_r+0x58>
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	f000 fb6f 	bl	80056e0 <_realloc_r>
 8005002:	4606      	mov	r6, r0
 8005004:	2800      	cmp	r0, #0
 8005006:	d1e1      	bne.n	8004fcc <__ssputs_r+0x70>
 8005008:	6921      	ldr	r1, [r4, #16]
 800500a:	4650      	mov	r0, sl
 800500c:	f000 fabe 	bl	800558c <_free_r>
 8005010:	e7c7      	b.n	8004fa2 <__ssputs_r+0x46>
	...

08005014 <_svfiprintf_r>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	4698      	mov	r8, r3
 800501a:	898b      	ldrh	r3, [r1, #12]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	b09d      	sub	sp, #116	; 0x74
 8005020:	4607      	mov	r7, r0
 8005022:	460d      	mov	r5, r1
 8005024:	4614      	mov	r4, r2
 8005026:	d50e      	bpl.n	8005046 <_svfiprintf_r+0x32>
 8005028:	690b      	ldr	r3, [r1, #16]
 800502a:	b963      	cbnz	r3, 8005046 <_svfiprintf_r+0x32>
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	f000 fafd 	bl	800562c <_malloc_r>
 8005032:	6028      	str	r0, [r5, #0]
 8005034:	6128      	str	r0, [r5, #16]
 8005036:	b920      	cbnz	r0, 8005042 <_svfiprintf_r+0x2e>
 8005038:	230c      	movs	r3, #12
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e0d1      	b.n	80051e6 <_svfiprintf_r+0x1d2>
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	616b      	str	r3, [r5, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	9309      	str	r3, [sp, #36]	; 0x24
 800504a:	2320      	movs	r3, #32
 800504c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005050:	f8cd 800c 	str.w	r8, [sp, #12]
 8005054:	2330      	movs	r3, #48	; 0x30
 8005056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005200 <_svfiprintf_r+0x1ec>
 800505a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800505e:	f04f 0901 	mov.w	r9, #1
 8005062:	4623      	mov	r3, r4
 8005064:	469a      	mov	sl, r3
 8005066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506a:	b10a      	cbz	r2, 8005070 <_svfiprintf_r+0x5c>
 800506c:	2a25      	cmp	r2, #37	; 0x25
 800506e:	d1f9      	bne.n	8005064 <_svfiprintf_r+0x50>
 8005070:	ebba 0b04 	subs.w	fp, sl, r4
 8005074:	d00b      	beq.n	800508e <_svfiprintf_r+0x7a>
 8005076:	465b      	mov	r3, fp
 8005078:	4622      	mov	r2, r4
 800507a:	4629      	mov	r1, r5
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff ff6d 	bl	8004f5c <__ssputs_r>
 8005082:	3001      	adds	r0, #1
 8005084:	f000 80aa 	beq.w	80051dc <_svfiprintf_r+0x1c8>
 8005088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800508a:	445a      	add	r2, fp
 800508c:	9209      	str	r2, [sp, #36]	; 0x24
 800508e:	f89a 3000 	ldrb.w	r3, [sl]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80a2 	beq.w	80051dc <_svfiprintf_r+0x1c8>
 8005098:	2300      	movs	r3, #0
 800509a:	f04f 32ff 	mov.w	r2, #4294967295
 800509e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a2:	f10a 0a01 	add.w	sl, sl, #1
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	9307      	str	r3, [sp, #28]
 80050aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ae:	931a      	str	r3, [sp, #104]	; 0x68
 80050b0:	4654      	mov	r4, sl
 80050b2:	2205      	movs	r2, #5
 80050b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b8:	4851      	ldr	r0, [pc, #324]	; (8005200 <_svfiprintf_r+0x1ec>)
 80050ba:	f7fb f8c1 	bl	8000240 <memchr>
 80050be:	9a04      	ldr	r2, [sp, #16]
 80050c0:	b9d8      	cbnz	r0, 80050fa <_svfiprintf_r+0xe6>
 80050c2:	06d0      	lsls	r0, r2, #27
 80050c4:	bf44      	itt	mi
 80050c6:	2320      	movmi	r3, #32
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050cc:	0711      	lsls	r1, r2, #28
 80050ce:	bf44      	itt	mi
 80050d0:	232b      	movmi	r3, #43	; 0x2b
 80050d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b2a      	cmp	r3, #42	; 0x2a
 80050dc:	d015      	beq.n	800510a <_svfiprintf_r+0xf6>
 80050de:	9a07      	ldr	r2, [sp, #28]
 80050e0:	4654      	mov	r4, sl
 80050e2:	2000      	movs	r0, #0
 80050e4:	f04f 0c0a 	mov.w	ip, #10
 80050e8:	4621      	mov	r1, r4
 80050ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ee:	3b30      	subs	r3, #48	; 0x30
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d94e      	bls.n	8005192 <_svfiprintf_r+0x17e>
 80050f4:	b1b0      	cbz	r0, 8005124 <_svfiprintf_r+0x110>
 80050f6:	9207      	str	r2, [sp, #28]
 80050f8:	e014      	b.n	8005124 <_svfiprintf_r+0x110>
 80050fa:	eba0 0308 	sub.w	r3, r0, r8
 80050fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005102:	4313      	orrs	r3, r2
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	46a2      	mov	sl, r4
 8005108:	e7d2      	b.n	80050b0 <_svfiprintf_r+0x9c>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	1d19      	adds	r1, r3, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	9103      	str	r1, [sp, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfbb      	ittet	lt
 8005116:	425b      	neglt	r3, r3
 8005118:	f042 0202 	orrlt.w	r2, r2, #2
 800511c:	9307      	strge	r3, [sp, #28]
 800511e:	9307      	strlt	r3, [sp, #28]
 8005120:	bfb8      	it	lt
 8005122:	9204      	strlt	r2, [sp, #16]
 8005124:	7823      	ldrb	r3, [r4, #0]
 8005126:	2b2e      	cmp	r3, #46	; 0x2e
 8005128:	d10c      	bne.n	8005144 <_svfiprintf_r+0x130>
 800512a:	7863      	ldrb	r3, [r4, #1]
 800512c:	2b2a      	cmp	r3, #42	; 0x2a
 800512e:	d135      	bne.n	800519c <_svfiprintf_r+0x188>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9203      	str	r2, [sp, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfb8      	it	lt
 800513c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005140:	3402      	adds	r4, #2
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005210 <_svfiprintf_r+0x1fc>
 8005148:	7821      	ldrb	r1, [r4, #0]
 800514a:	2203      	movs	r2, #3
 800514c:	4650      	mov	r0, sl
 800514e:	f7fb f877 	bl	8000240 <memchr>
 8005152:	b140      	cbz	r0, 8005166 <_svfiprintf_r+0x152>
 8005154:	2340      	movs	r3, #64	; 0x40
 8005156:	eba0 000a 	sub.w	r0, r0, sl
 800515a:	fa03 f000 	lsl.w	r0, r3, r0
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	4303      	orrs	r3, r0
 8005162:	3401      	adds	r4, #1
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516a:	4826      	ldr	r0, [pc, #152]	; (8005204 <_svfiprintf_r+0x1f0>)
 800516c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005170:	2206      	movs	r2, #6
 8005172:	f7fb f865 	bl	8000240 <memchr>
 8005176:	2800      	cmp	r0, #0
 8005178:	d038      	beq.n	80051ec <_svfiprintf_r+0x1d8>
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <_svfiprintf_r+0x1f4>)
 800517c:	bb1b      	cbnz	r3, 80051c6 <_svfiprintf_r+0x1b2>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	f023 0307 	bic.w	r3, r3, #7
 8005186:	3308      	adds	r3, #8
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800518c:	4433      	add	r3, r6
 800518e:	9309      	str	r3, [sp, #36]	; 0x24
 8005190:	e767      	b.n	8005062 <_svfiprintf_r+0x4e>
 8005192:	fb0c 3202 	mla	r2, ip, r2, r3
 8005196:	460c      	mov	r4, r1
 8005198:	2001      	movs	r0, #1
 800519a:	e7a5      	b.n	80050e8 <_svfiprintf_r+0xd4>
 800519c:	2300      	movs	r3, #0
 800519e:	3401      	adds	r4, #1
 80051a0:	9305      	str	r3, [sp, #20]
 80051a2:	4619      	mov	r1, r3
 80051a4:	f04f 0c0a 	mov.w	ip, #10
 80051a8:	4620      	mov	r0, r4
 80051aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ae:	3a30      	subs	r2, #48	; 0x30
 80051b0:	2a09      	cmp	r2, #9
 80051b2:	d903      	bls.n	80051bc <_svfiprintf_r+0x1a8>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0c5      	beq.n	8005144 <_svfiprintf_r+0x130>
 80051b8:	9105      	str	r1, [sp, #20]
 80051ba:	e7c3      	b.n	8005144 <_svfiprintf_r+0x130>
 80051bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c0:	4604      	mov	r4, r0
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7f0      	b.n	80051a8 <_svfiprintf_r+0x194>
 80051c6:	ab03      	add	r3, sp, #12
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	462a      	mov	r2, r5
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <_svfiprintf_r+0x1f8>)
 80051ce:	a904      	add	r1, sp, #16
 80051d0:	4638      	mov	r0, r7
 80051d2:	f3af 8000 	nop.w
 80051d6:	1c42      	adds	r2, r0, #1
 80051d8:	4606      	mov	r6, r0
 80051da:	d1d6      	bne.n	800518a <_svfiprintf_r+0x176>
 80051dc:	89ab      	ldrh	r3, [r5, #12]
 80051de:	065b      	lsls	r3, r3, #25
 80051e0:	f53f af2c 	bmi.w	800503c <_svfiprintf_r+0x28>
 80051e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051e6:	b01d      	add	sp, #116	; 0x74
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <_svfiprintf_r+0x1f8>)
 80051f4:	a904      	add	r1, sp, #16
 80051f6:	4638      	mov	r0, r7
 80051f8:	f000 f87a 	bl	80052f0 <_printf_i>
 80051fc:	e7eb      	b.n	80051d6 <_svfiprintf_r+0x1c2>
 80051fe:	bf00      	nop
 8005200:	080058a0 	.word	0x080058a0
 8005204:	080058aa 	.word	0x080058aa
 8005208:	00000000 	.word	0x00000000
 800520c:	08004f5d 	.word	0x08004f5d
 8005210:	080058a6 	.word	0x080058a6

08005214 <_printf_common>:
 8005214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	4616      	mov	r6, r2
 800521a:	4699      	mov	r9, r3
 800521c:	688a      	ldr	r2, [r1, #8]
 800521e:	690b      	ldr	r3, [r1, #16]
 8005220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005224:	4293      	cmp	r3, r2
 8005226:	bfb8      	it	lt
 8005228:	4613      	movlt	r3, r2
 800522a:	6033      	str	r3, [r6, #0]
 800522c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005230:	4607      	mov	r7, r0
 8005232:	460c      	mov	r4, r1
 8005234:	b10a      	cbz	r2, 800523a <_printf_common+0x26>
 8005236:	3301      	adds	r3, #1
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	0699      	lsls	r1, r3, #26
 800523e:	bf42      	ittt	mi
 8005240:	6833      	ldrmi	r3, [r6, #0]
 8005242:	3302      	addmi	r3, #2
 8005244:	6033      	strmi	r3, [r6, #0]
 8005246:	6825      	ldr	r5, [r4, #0]
 8005248:	f015 0506 	ands.w	r5, r5, #6
 800524c:	d106      	bne.n	800525c <_printf_common+0x48>
 800524e:	f104 0a19 	add.w	sl, r4, #25
 8005252:	68e3      	ldr	r3, [r4, #12]
 8005254:	6832      	ldr	r2, [r6, #0]
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	42ab      	cmp	r3, r5
 800525a:	dc26      	bgt.n	80052aa <_printf_common+0x96>
 800525c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005260:	1e13      	subs	r3, r2, #0
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	bf18      	it	ne
 8005266:	2301      	movne	r3, #1
 8005268:	0692      	lsls	r2, r2, #26
 800526a:	d42b      	bmi.n	80052c4 <_printf_common+0xb0>
 800526c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005270:	4649      	mov	r1, r9
 8005272:	4638      	mov	r0, r7
 8005274:	47c0      	blx	r8
 8005276:	3001      	adds	r0, #1
 8005278:	d01e      	beq.n	80052b8 <_printf_common+0xa4>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	68e5      	ldr	r5, [r4, #12]
 800527e:	6832      	ldr	r2, [r6, #0]
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	2b04      	cmp	r3, #4
 8005286:	bf08      	it	eq
 8005288:	1aad      	subeq	r5, r5, r2
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	bf0c      	ite	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	2500      	movne	r5, #0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfc4      	itt	gt
 800529a:	1a9b      	subgt	r3, r3, r2
 800529c:	18ed      	addgt	r5, r5, r3
 800529e:	2600      	movs	r6, #0
 80052a0:	341a      	adds	r4, #26
 80052a2:	42b5      	cmp	r5, r6
 80052a4:	d11a      	bne.n	80052dc <_printf_common+0xc8>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e008      	b.n	80052bc <_printf_common+0xa8>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4652      	mov	r2, sl
 80052ae:	4649      	mov	r1, r9
 80052b0:	4638      	mov	r0, r7
 80052b2:	47c0      	blx	r8
 80052b4:	3001      	adds	r0, #1
 80052b6:	d103      	bne.n	80052c0 <_printf_common+0xac>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c0:	3501      	adds	r5, #1
 80052c2:	e7c6      	b.n	8005252 <_printf_common+0x3e>
 80052c4:	18e1      	adds	r1, r4, r3
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	2030      	movs	r0, #48	; 0x30
 80052ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ce:	4422      	add	r2, r4
 80052d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d8:	3302      	adds	r3, #2
 80052da:	e7c7      	b.n	800526c <_printf_common+0x58>
 80052dc:	2301      	movs	r3, #1
 80052de:	4622      	mov	r2, r4
 80052e0:	4649      	mov	r1, r9
 80052e2:	4638      	mov	r0, r7
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d0e6      	beq.n	80052b8 <_printf_common+0xa4>
 80052ea:	3601      	adds	r6, #1
 80052ec:	e7d9      	b.n	80052a2 <_printf_common+0x8e>
	...

080052f0 <_printf_i>:
 80052f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	460c      	mov	r4, r1
 80052f6:	4691      	mov	r9, r2
 80052f8:	7e27      	ldrb	r7, [r4, #24]
 80052fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052fc:	2f78      	cmp	r7, #120	; 0x78
 80052fe:	4680      	mov	r8, r0
 8005300:	469a      	mov	sl, r3
 8005302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005306:	d807      	bhi.n	8005318 <_printf_i+0x28>
 8005308:	2f62      	cmp	r7, #98	; 0x62
 800530a:	d80a      	bhi.n	8005322 <_printf_i+0x32>
 800530c:	2f00      	cmp	r7, #0
 800530e:	f000 80d8 	beq.w	80054c2 <_printf_i+0x1d2>
 8005312:	2f58      	cmp	r7, #88	; 0x58
 8005314:	f000 80a3 	beq.w	800545e <_printf_i+0x16e>
 8005318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800531c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005320:	e03a      	b.n	8005398 <_printf_i+0xa8>
 8005322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005326:	2b15      	cmp	r3, #21
 8005328:	d8f6      	bhi.n	8005318 <_printf_i+0x28>
 800532a:	a001      	add	r0, pc, #4	; (adr r0, 8005330 <_printf_i+0x40>)
 800532c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005330:	08005389 	.word	0x08005389
 8005334:	0800539d 	.word	0x0800539d
 8005338:	08005319 	.word	0x08005319
 800533c:	08005319 	.word	0x08005319
 8005340:	08005319 	.word	0x08005319
 8005344:	08005319 	.word	0x08005319
 8005348:	0800539d 	.word	0x0800539d
 800534c:	08005319 	.word	0x08005319
 8005350:	08005319 	.word	0x08005319
 8005354:	08005319 	.word	0x08005319
 8005358:	08005319 	.word	0x08005319
 800535c:	080054a9 	.word	0x080054a9
 8005360:	080053cd 	.word	0x080053cd
 8005364:	0800548b 	.word	0x0800548b
 8005368:	08005319 	.word	0x08005319
 800536c:	08005319 	.word	0x08005319
 8005370:	080054cb 	.word	0x080054cb
 8005374:	08005319 	.word	0x08005319
 8005378:	080053cd 	.word	0x080053cd
 800537c:	08005319 	.word	0x08005319
 8005380:	08005319 	.word	0x08005319
 8005384:	08005493 	.word	0x08005493
 8005388:	680b      	ldr	r3, [r1, #0]
 800538a:	1d1a      	adds	r2, r3, #4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	600a      	str	r2, [r1, #0]
 8005390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005398:	2301      	movs	r3, #1
 800539a:	e0a3      	b.n	80054e4 <_printf_i+0x1f4>
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	6808      	ldr	r0, [r1, #0]
 80053a0:	062e      	lsls	r6, r5, #24
 80053a2:	f100 0304 	add.w	r3, r0, #4
 80053a6:	d50a      	bpl.n	80053be <_printf_i+0xce>
 80053a8:	6805      	ldr	r5, [r0, #0]
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	da03      	bge.n	80053b8 <_printf_i+0xc8>
 80053b0:	232d      	movs	r3, #45	; 0x2d
 80053b2:	426d      	negs	r5, r5
 80053b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b8:	485e      	ldr	r0, [pc, #376]	; (8005534 <_printf_i+0x244>)
 80053ba:	230a      	movs	r3, #10
 80053bc:	e019      	b.n	80053f2 <_printf_i+0x102>
 80053be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053c2:	6805      	ldr	r5, [r0, #0]
 80053c4:	600b      	str	r3, [r1, #0]
 80053c6:	bf18      	it	ne
 80053c8:	b22d      	sxthne	r5, r5
 80053ca:	e7ef      	b.n	80053ac <_printf_i+0xbc>
 80053cc:	680b      	ldr	r3, [r1, #0]
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	1d18      	adds	r0, r3, #4
 80053d2:	6008      	str	r0, [r1, #0]
 80053d4:	0628      	lsls	r0, r5, #24
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0xec>
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0xf2>
 80053dc:	0669      	lsls	r1, r5, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0xe8>
 80053e0:	881d      	ldrh	r5, [r3, #0]
 80053e2:	4854      	ldr	r0, [pc, #336]	; (8005534 <_printf_i+0x244>)
 80053e4:	2f6f      	cmp	r7, #111	; 0x6f
 80053e6:	bf0c      	ite	eq
 80053e8:	2308      	moveq	r3, #8
 80053ea:	230a      	movne	r3, #10
 80053ec:	2100      	movs	r1, #0
 80053ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053f2:	6866      	ldr	r6, [r4, #4]
 80053f4:	60a6      	str	r6, [r4, #8]
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	bfa2      	ittt	ge
 80053fa:	6821      	ldrge	r1, [r4, #0]
 80053fc:	f021 0104 	bicge.w	r1, r1, #4
 8005400:	6021      	strge	r1, [r4, #0]
 8005402:	b90d      	cbnz	r5, 8005408 <_printf_i+0x118>
 8005404:	2e00      	cmp	r6, #0
 8005406:	d04d      	beq.n	80054a4 <_printf_i+0x1b4>
 8005408:	4616      	mov	r6, r2
 800540a:	fbb5 f1f3 	udiv	r1, r5, r3
 800540e:	fb03 5711 	mls	r7, r3, r1, r5
 8005412:	5dc7      	ldrb	r7, [r0, r7]
 8005414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005418:	462f      	mov	r7, r5
 800541a:	42bb      	cmp	r3, r7
 800541c:	460d      	mov	r5, r1
 800541e:	d9f4      	bls.n	800540a <_printf_i+0x11a>
 8005420:	2b08      	cmp	r3, #8
 8005422:	d10b      	bne.n	800543c <_printf_i+0x14c>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	07df      	lsls	r7, r3, #31
 8005428:	d508      	bpl.n	800543c <_printf_i+0x14c>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6861      	ldr	r1, [r4, #4]
 800542e:	4299      	cmp	r1, r3
 8005430:	bfde      	ittt	le
 8005432:	2330      	movle	r3, #48	; 0x30
 8005434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800543c:	1b92      	subs	r2, r2, r6
 800543e:	6122      	str	r2, [r4, #16]
 8005440:	f8cd a000 	str.w	sl, [sp]
 8005444:	464b      	mov	r3, r9
 8005446:	aa03      	add	r2, sp, #12
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff fee2 	bl	8005214 <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	d14c      	bne.n	80054ee <_printf_i+0x1fe>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b004      	add	sp, #16
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	4835      	ldr	r0, [pc, #212]	; (8005534 <_printf_i+0x244>)
 8005460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	680e      	ldr	r6, [r1, #0]
 8005468:	061f      	lsls	r7, r3, #24
 800546a:	f856 5b04 	ldr.w	r5, [r6], #4
 800546e:	600e      	str	r6, [r1, #0]
 8005470:	d514      	bpl.n	800549c <_printf_i+0x1ac>
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	bf44      	itt	mi
 8005476:	f043 0320 	orrmi.w	r3, r3, #32
 800547a:	6023      	strmi	r3, [r4, #0]
 800547c:	b91d      	cbnz	r5, 8005486 <_printf_i+0x196>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f023 0320 	bic.w	r3, r3, #32
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	2310      	movs	r3, #16
 8005488:	e7b0      	b.n	80053ec <_printf_i+0xfc>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	f043 0320 	orr.w	r3, r3, #32
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	2378      	movs	r3, #120	; 0x78
 8005494:	4828      	ldr	r0, [pc, #160]	; (8005538 <_printf_i+0x248>)
 8005496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800549a:	e7e3      	b.n	8005464 <_printf_i+0x174>
 800549c:	065e      	lsls	r6, r3, #25
 800549e:	bf48      	it	mi
 80054a0:	b2ad      	uxthmi	r5, r5
 80054a2:	e7e6      	b.n	8005472 <_printf_i+0x182>
 80054a4:	4616      	mov	r6, r2
 80054a6:	e7bb      	b.n	8005420 <_printf_i+0x130>
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	6826      	ldr	r6, [r4, #0]
 80054ac:	6960      	ldr	r0, [r4, #20]
 80054ae:	1d1d      	adds	r5, r3, #4
 80054b0:	600d      	str	r5, [r1, #0]
 80054b2:	0635      	lsls	r5, r6, #24
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	d501      	bpl.n	80054bc <_printf_i+0x1cc>
 80054b8:	6018      	str	r0, [r3, #0]
 80054ba:	e002      	b.n	80054c2 <_printf_i+0x1d2>
 80054bc:	0671      	lsls	r1, r6, #25
 80054be:	d5fb      	bpl.n	80054b8 <_printf_i+0x1c8>
 80054c0:	8018      	strh	r0, [r3, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	4616      	mov	r6, r2
 80054c8:	e7ba      	b.n	8005440 <_printf_i+0x150>
 80054ca:	680b      	ldr	r3, [r1, #0]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	600a      	str	r2, [r1, #0]
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	6862      	ldr	r2, [r4, #4]
 80054d4:	2100      	movs	r1, #0
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7fa feb2 	bl	8000240 <memchr>
 80054dc:	b108      	cbz	r0, 80054e2 <_printf_i+0x1f2>
 80054de:	1b80      	subs	r0, r0, r6
 80054e0:	6060      	str	r0, [r4, #4]
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	6123      	str	r3, [r4, #16]
 80054e6:	2300      	movs	r3, #0
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	e7a8      	b.n	8005440 <_printf_i+0x150>
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d0ab      	beq.n	8005454 <_printf_i+0x164>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	079b      	lsls	r3, r3, #30
 8005500:	d413      	bmi.n	800552a <_printf_i+0x23a>
 8005502:	68e0      	ldr	r0, [r4, #12]
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	4298      	cmp	r0, r3
 8005508:	bfb8      	it	lt
 800550a:	4618      	movlt	r0, r3
 800550c:	e7a4      	b.n	8005458 <_printf_i+0x168>
 800550e:	2301      	movs	r3, #1
 8005510:	4632      	mov	r2, r6
 8005512:	4649      	mov	r1, r9
 8005514:	4640      	mov	r0, r8
 8005516:	47d0      	blx	sl
 8005518:	3001      	adds	r0, #1
 800551a:	d09b      	beq.n	8005454 <_printf_i+0x164>
 800551c:	3501      	adds	r5, #1
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	9903      	ldr	r1, [sp, #12]
 8005522:	1a5b      	subs	r3, r3, r1
 8005524:	42ab      	cmp	r3, r5
 8005526:	dcf2      	bgt.n	800550e <_printf_i+0x21e>
 8005528:	e7eb      	b.n	8005502 <_printf_i+0x212>
 800552a:	2500      	movs	r5, #0
 800552c:	f104 0619 	add.w	r6, r4, #25
 8005530:	e7f5      	b.n	800551e <_printf_i+0x22e>
 8005532:	bf00      	nop
 8005534:	080058b1 	.word	0x080058b1
 8005538:	080058c2 	.word	0x080058c2

0800553c <memcpy>:
 800553c:	440a      	add	r2, r1
 800553e:	4291      	cmp	r1, r2
 8005540:	f100 33ff 	add.w	r3, r0, #4294967295
 8005544:	d100      	bne.n	8005548 <memcpy+0xc>
 8005546:	4770      	bx	lr
 8005548:	b510      	push	{r4, lr}
 800554a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005552:	4291      	cmp	r1, r2
 8005554:	d1f9      	bne.n	800554a <memcpy+0xe>
 8005556:	bd10      	pop	{r4, pc}

08005558 <memmove>:
 8005558:	4288      	cmp	r0, r1
 800555a:	b510      	push	{r4, lr}
 800555c:	eb01 0402 	add.w	r4, r1, r2
 8005560:	d902      	bls.n	8005568 <memmove+0x10>
 8005562:	4284      	cmp	r4, r0
 8005564:	4623      	mov	r3, r4
 8005566:	d807      	bhi.n	8005578 <memmove+0x20>
 8005568:	1e43      	subs	r3, r0, #1
 800556a:	42a1      	cmp	r1, r4
 800556c:	d008      	beq.n	8005580 <memmove+0x28>
 800556e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005576:	e7f8      	b.n	800556a <memmove+0x12>
 8005578:	4402      	add	r2, r0
 800557a:	4601      	mov	r1, r0
 800557c:	428a      	cmp	r2, r1
 800557e:	d100      	bne.n	8005582 <memmove+0x2a>
 8005580:	bd10      	pop	{r4, pc}
 8005582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800558a:	e7f7      	b.n	800557c <memmove+0x24>

0800558c <_free_r>:
 800558c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558e:	2900      	cmp	r1, #0
 8005590:	d048      	beq.n	8005624 <_free_r+0x98>
 8005592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005596:	9001      	str	r0, [sp, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f1a1 0404 	sub.w	r4, r1, #4
 800559e:	bfb8      	it	lt
 80055a0:	18e4      	addlt	r4, r4, r3
 80055a2:	f000 f8d3 	bl	800574c <__malloc_lock>
 80055a6:	4a20      	ldr	r2, [pc, #128]	; (8005628 <_free_r+0x9c>)
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	4615      	mov	r5, r2
 80055ae:	b933      	cbnz	r3, 80055be <_free_r+0x32>
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	6014      	str	r4, [r2, #0]
 80055b4:	b003      	add	sp, #12
 80055b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055ba:	f000 b8cd 	b.w	8005758 <__malloc_unlock>
 80055be:	42a3      	cmp	r3, r4
 80055c0:	d90b      	bls.n	80055da <_free_r+0x4e>
 80055c2:	6821      	ldr	r1, [r4, #0]
 80055c4:	1862      	adds	r2, r4, r1
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bf04      	itt	eq
 80055ca:	681a      	ldreq	r2, [r3, #0]
 80055cc:	685b      	ldreq	r3, [r3, #4]
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	bf04      	itt	eq
 80055d2:	1852      	addeq	r2, r2, r1
 80055d4:	6022      	streq	r2, [r4, #0]
 80055d6:	602c      	str	r4, [r5, #0]
 80055d8:	e7ec      	b.n	80055b4 <_free_r+0x28>
 80055da:	461a      	mov	r2, r3
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	b10b      	cbz	r3, 80055e4 <_free_r+0x58>
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d9fa      	bls.n	80055da <_free_r+0x4e>
 80055e4:	6811      	ldr	r1, [r2, #0]
 80055e6:	1855      	adds	r5, r2, r1
 80055e8:	42a5      	cmp	r5, r4
 80055ea:	d10b      	bne.n	8005604 <_free_r+0x78>
 80055ec:	6824      	ldr	r4, [r4, #0]
 80055ee:	4421      	add	r1, r4
 80055f0:	1854      	adds	r4, r2, r1
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	d1dd      	bne.n	80055b4 <_free_r+0x28>
 80055f8:	681c      	ldr	r4, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	6053      	str	r3, [r2, #4]
 80055fe:	4421      	add	r1, r4
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	e7d7      	b.n	80055b4 <_free_r+0x28>
 8005604:	d902      	bls.n	800560c <_free_r+0x80>
 8005606:	230c      	movs	r3, #12
 8005608:	6003      	str	r3, [r0, #0]
 800560a:	e7d3      	b.n	80055b4 <_free_r+0x28>
 800560c:	6825      	ldr	r5, [r4, #0]
 800560e:	1961      	adds	r1, r4, r5
 8005610:	428b      	cmp	r3, r1
 8005612:	bf04      	itt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	6063      	str	r3, [r4, #4]
 800561a:	bf04      	itt	eq
 800561c:	1949      	addeq	r1, r1, r5
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	6054      	str	r4, [r2, #4]
 8005622:	e7c7      	b.n	80055b4 <_free_r+0x28>
 8005624:	b003      	add	sp, #12
 8005626:	bd30      	pop	{r4, r5, pc}
 8005628:	20000098 	.word	0x20000098

0800562c <_malloc_r>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	1ccd      	adds	r5, r1, #3
 8005630:	f025 0503 	bic.w	r5, r5, #3
 8005634:	3508      	adds	r5, #8
 8005636:	2d0c      	cmp	r5, #12
 8005638:	bf38      	it	cc
 800563a:	250c      	movcc	r5, #12
 800563c:	2d00      	cmp	r5, #0
 800563e:	4606      	mov	r6, r0
 8005640:	db01      	blt.n	8005646 <_malloc_r+0x1a>
 8005642:	42a9      	cmp	r1, r5
 8005644:	d903      	bls.n	800564e <_malloc_r+0x22>
 8005646:	230c      	movs	r3, #12
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	2000      	movs	r0, #0
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564e:	f000 f87d 	bl	800574c <__malloc_lock>
 8005652:	4921      	ldr	r1, [pc, #132]	; (80056d8 <_malloc_r+0xac>)
 8005654:	680a      	ldr	r2, [r1, #0]
 8005656:	4614      	mov	r4, r2
 8005658:	b99c      	cbnz	r4, 8005682 <_malloc_r+0x56>
 800565a:	4f20      	ldr	r7, [pc, #128]	; (80056dc <_malloc_r+0xb0>)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b923      	cbnz	r3, 800566a <_malloc_r+0x3e>
 8005660:	4621      	mov	r1, r4
 8005662:	4630      	mov	r0, r6
 8005664:	f000 f862 	bl	800572c <_sbrk_r>
 8005668:	6038      	str	r0, [r7, #0]
 800566a:	4629      	mov	r1, r5
 800566c:	4630      	mov	r0, r6
 800566e:	f000 f85d 	bl	800572c <_sbrk_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	d123      	bne.n	80056be <_malloc_r+0x92>
 8005676:	230c      	movs	r3, #12
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	4630      	mov	r0, r6
 800567c:	f000 f86c 	bl	8005758 <__malloc_unlock>
 8005680:	e7e3      	b.n	800564a <_malloc_r+0x1e>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	1b5b      	subs	r3, r3, r5
 8005686:	d417      	bmi.n	80056b8 <_malloc_r+0x8c>
 8005688:	2b0b      	cmp	r3, #11
 800568a:	d903      	bls.n	8005694 <_malloc_r+0x68>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	441c      	add	r4, r3
 8005690:	6025      	str	r5, [r4, #0]
 8005692:	e004      	b.n	800569e <_malloc_r+0x72>
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	42a2      	cmp	r2, r4
 8005698:	bf0c      	ite	eq
 800569a:	600b      	streq	r3, [r1, #0]
 800569c:	6053      	strne	r3, [r2, #4]
 800569e:	4630      	mov	r0, r6
 80056a0:	f000 f85a 	bl	8005758 <__malloc_unlock>
 80056a4:	f104 000b 	add.w	r0, r4, #11
 80056a8:	1d23      	adds	r3, r4, #4
 80056aa:	f020 0007 	bic.w	r0, r0, #7
 80056ae:	1ac2      	subs	r2, r0, r3
 80056b0:	d0cc      	beq.n	800564c <_malloc_r+0x20>
 80056b2:	1a1b      	subs	r3, r3, r0
 80056b4:	50a3      	str	r3, [r4, r2]
 80056b6:	e7c9      	b.n	800564c <_malloc_r+0x20>
 80056b8:	4622      	mov	r2, r4
 80056ba:	6864      	ldr	r4, [r4, #4]
 80056bc:	e7cc      	b.n	8005658 <_malloc_r+0x2c>
 80056be:	1cc4      	adds	r4, r0, #3
 80056c0:	f024 0403 	bic.w	r4, r4, #3
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d0e3      	beq.n	8005690 <_malloc_r+0x64>
 80056c8:	1a21      	subs	r1, r4, r0
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 f82e 	bl	800572c <_sbrk_r>
 80056d0:	3001      	adds	r0, #1
 80056d2:	d1dd      	bne.n	8005690 <_malloc_r+0x64>
 80056d4:	e7cf      	b.n	8005676 <_malloc_r+0x4a>
 80056d6:	bf00      	nop
 80056d8:	20000098 	.word	0x20000098
 80056dc:	2000009c 	.word	0x2000009c

080056e0 <_realloc_r>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	4607      	mov	r7, r0
 80056e4:	4614      	mov	r4, r2
 80056e6:	460e      	mov	r6, r1
 80056e8:	b921      	cbnz	r1, 80056f4 <_realloc_r+0x14>
 80056ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ee:	4611      	mov	r1, r2
 80056f0:	f7ff bf9c 	b.w	800562c <_malloc_r>
 80056f4:	b922      	cbnz	r2, 8005700 <_realloc_r+0x20>
 80056f6:	f7ff ff49 	bl	800558c <_free_r>
 80056fa:	4625      	mov	r5, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005700:	f000 f830 	bl	8005764 <_malloc_usable_size_r>
 8005704:	42a0      	cmp	r0, r4
 8005706:	d20f      	bcs.n	8005728 <_realloc_r+0x48>
 8005708:	4621      	mov	r1, r4
 800570a:	4638      	mov	r0, r7
 800570c:	f7ff ff8e 	bl	800562c <_malloc_r>
 8005710:	4605      	mov	r5, r0
 8005712:	2800      	cmp	r0, #0
 8005714:	d0f2      	beq.n	80056fc <_realloc_r+0x1c>
 8005716:	4631      	mov	r1, r6
 8005718:	4622      	mov	r2, r4
 800571a:	f7ff ff0f 	bl	800553c <memcpy>
 800571e:	4631      	mov	r1, r6
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ff33 	bl	800558c <_free_r>
 8005726:	e7e9      	b.n	80056fc <_realloc_r+0x1c>
 8005728:	4635      	mov	r5, r6
 800572a:	e7e7      	b.n	80056fc <_realloc_r+0x1c>

0800572c <_sbrk_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d06      	ldr	r5, [pc, #24]	; (8005748 <_sbrk_r+0x1c>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fcd6 	bl	80010e8 <_sbrk>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_sbrk_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_sbrk_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	2000065c 	.word	0x2000065c

0800574c <__malloc_lock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_lock+0x8>)
 800574e:	f000 b811 	b.w	8005774 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	20000664 	.word	0x20000664

08005758 <__malloc_unlock>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__malloc_unlock+0x8>)
 800575a:	f000 b80c 	b.w	8005776 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	20000664 	.word	0x20000664

08005764 <_malloc_usable_size_r>:
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f18      	subs	r0, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfbc      	itt	lt
 800576e:	580b      	ldrlt	r3, [r1, r0]
 8005770:	18c0      	addlt	r0, r0, r3
 8005772:	4770      	bx	lr

08005774 <__retarget_lock_acquire_recursive>:
 8005774:	4770      	bx	lr

08005776 <__retarget_lock_release_recursive>:
 8005776:	4770      	bx	lr

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr
