
Module_Screen_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c6f0  08006f08  08006f08  00016f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135f8  080135f8  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080135f8  080135f8  000235f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013600  08013600  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013600  08013600  00023600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013604  08013604  00023604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08013608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002574  20000070  08013678  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025e4  08013678  000325e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b57f  00000000  00000000  0003009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354b  00000000  00000000  0004b61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0004eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000056ba  00000000  00000000  0004fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000169cd  00000000  00000000  00055292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100a6e  00000000  00000000  0006bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0016c6cd  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ef8  00000000  00000000  0016c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c80  00000000  00000000  0016d618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006eec 	.word	0x08006eec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006eec 	.word	0x08006eec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fcbc 	bl	8001f5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8e5 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f9f5 	bl	80009d4 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80005ea:	f000 f995 	bl	8000918 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 f9c3 	bl	8000978 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005f2:	f000 f94f 	bl	8000894 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_1in5_test();
 80005f6:	f000 fd3f 	bl	8001078 <OLED_1in5_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t counter = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
	UBYTE *BlackImage;
	UWORD Imagesize = ((OLED_1in5_WIDTH%2==0)? (OLED_1in5_WIDTH/2): (OLED_1in5_WIDTH/2+1)) * OLED_1in5_HEIGHT;
 80005fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000602:	81bb      	strh	r3, [r7, #12]
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000604:	89bb      	ldrh	r3, [r7, #12]
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fe6e 	bl	80052e8 <malloc>
 800060c:	4603      	mov	r3, r0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <main+0x4a>
			printf("Failed to apply for black memory...\r\n");
 8000616:	485c      	ldr	r0, [pc, #368]	; (8000788 <main+0x1b0>)
 8000618:	f004 ffa6 	bl	8005568 <puts>
			return -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e0a0      	b.n	8000764 <main+0x18c>
	}
	printf("Paint_NewImage\r\n");
 8000622:	485a      	ldr	r0, [pc, #360]	; (800078c <main+0x1b4>)
 8000624:	f004 ffa0 	bl	8005568 <puts>
	Paint_NewImage(BlackImage, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 8000628:	2300      	movs	r3, #0
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f000 fd85 	bl	8001144 <Paint_NewImage>
	Paint_SetScale(16);
 800063a:	2010      	movs	r0, #16
 800063c:	f000 fde8 	bl	8001210 <Paint_SetScale>
	printf("Drawing\r\n");
 8000640:	4853      	ldr	r0, [pc, #332]	; (8000790 <main+0x1b8>)
 8000642:	f004 ff91 	bl	8005568 <puts>
	//1.Select Image
	Paint_SelectImage(BlackImage);
 8000646:	68b8      	ldr	r0, [r7, #8]
 8000648:	f000 fdd2 	bl	80011f0 <Paint_SelectImage>
	Driver_Delay_ms(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000650:	f001 fc78 	bl	8001f44 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 ffc5 	bl	80015e4 <Paint_Clear>
	float X = 0.0f;
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
	float Y = 0.0f;
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
	int dec = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  if (toggle == 0)
 800066a:	4b4a      	ldr	r3, [pc, #296]	; (8000794 <main+0x1bc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d15d      	bne.n	800072e <main+0x156>
		{
		Paint_DrawCircle(30*cos(X*3.14/180)+64, 30*sin(Y*3.14/180)+64, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000672:	edd7 7a05 	vldr	s15, [r7, #20]
 8000676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800067a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000770 <main+0x198>
 800067e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000682:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8000778 <main+0x1a0>
 8000686:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800068a:	eeb0 0b46 	vmov.f64	d0, d6
 800068e:	f005 fe07 	bl	80062a0 <cos>
 8000692:	eeb0 7b40 	vmov.f64	d7, d0
 8000696:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800069a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800069e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000780 <main+0x1a8>
 80006a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006aa:	ee17 3a90 	vmov	r3, s15
 80006ae:	b29c      	uxth	r4, r3
 80006b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80006b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006b8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8000770 <main+0x198>
 80006bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c0:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8000778 <main+0x1a0>
 80006c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006c8:	eeb0 0b46 	vmov.f64	d0, d6
 80006cc:	f005 fe30 	bl	8006330 <sin>
 80006d0:	eeb0 7b40 	vmov.f64	d7, d0
 80006d4:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80006d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006dc:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8000780 <main+0x1a8>
 80006e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee17 3a90 	vmov	r3, s15
 80006ec:	b299      	uxth	r1, r3
 80006ee:	2301      	movs	r3, #1
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fa:	2214      	movs	r2, #20
 80006fc:	4620      	mov	r0, r4
 80006fe:	f001 f8c7 	bl	8001890 <Paint_DrawCircle>
		OLED_1in5_Display(BlackImage);
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f001 fb78 	bl	8001df8 <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 ff6b 	bl	80015e4 <Paint_Clear>


		X = X+4;
 800070e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000712:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800071a:	edc7 7a05 	vstr	s15, [r7, #20]
		Y = Y+4;
 800071e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000722:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800072a:	edc7 7a04 	vstr	s15, [r7, #16]
		}
	  if (toggle == 1)
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <main+0x1bc>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10e      	bne.n	8000754 <main+0x17c>
	  {
		  OLED_1in5_Display(gImage_nyan1);
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <main+0x1c0>)
 8000738:	f001 fb5e 	bl	8001df8 <OLED_1in5_Display>
		  OLED_1in5_Display(gImage_nyan2);
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <main+0x1c4>)
 800073e:	f001 fb5b 	bl	8001df8 <OLED_1in5_Display>
		  OLED_1in5_Display(gImage_nyan3);
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <main+0x1c8>)
 8000744:	f001 fb58 	bl	8001df8 <OLED_1in5_Display>
		  OLED_1in5_Display(gImage_nyan4);
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <main+0x1cc>)
 800074a:	f001 fb55 	bl	8001df8 <OLED_1in5_Display>
		  OLED_1in5_Display(gImage_nyan5);
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <main+0x1d0>)
 8000750:	f001 fb52 	bl	8001df8 <OLED_1in5_Display>

	  }

	  if (toggle == 2)
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <main+0x1bc>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d186      	bne.n	800066a <main+0x92>
	  {
		  OLED_1in5_Display(gImage_1in5);
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <main+0x1d4>)
 800075e:	f001 fb4b 	bl	8001df8 <OLED_1in5_Display>
	  if (toggle == 0)
 8000762:	e782      	b.n	800066a <main+0x92>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000764:	4618      	mov	r0, r3
 8000766:	371c      	adds	r7, #28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	f3af 8000 	nop.w
 8000770:	51eb851f 	.word	0x51eb851f
 8000774:	40091eb8 	.word	0x40091eb8
 8000778:	00000000 	.word	0x00000000
 800077c:	40668000 	.word	0x40668000
 8000780:	00000000 	.word	0x00000000
 8000784:	40500000 	.word	0x40500000
 8000788:	08006f08 	.word	0x08006f08
 800078c:	08006f30 	.word	0x08006f30
 8000790:	08006f40 	.word	0x08006f40
 8000794:	2000256c 	.word	0x2000256c
 8000798:	0801137c 	.word	0x0801137c
 800079c:	0800f374 	.word	0x0800f374
 80007a0:	0800d36c 	.word	0x0800d36c
 80007a4:	0800b364 	.word	0x0800b364
 80007a8:	0800935c 	.word	0x0800935c
 80007ac:	08007354 	.word	0x08007354

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fd9a 	bl	80052f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d4:	f002 fcd8 	bl	8003188 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <SystemClock_Config+0xdc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a2b      	ldr	r2, [pc, #172]	; (800088c <SystemClock_Config+0xdc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemClock_Config+0xdc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <SystemClock_Config+0xe0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f8:	4a25      	ldr	r2, [pc, #148]	; (8000890 <SystemClock_Config+0xe0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemClock_Config+0xe0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000810:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000824:	2360      	movs	r3, #96	; 0x60
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fd05 	bl	8003248 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 f970 	bl	8000b28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000848:	f002 fcae 	bl	80031a8 <HAL_PWREx_EnableOverDrive>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000852:	f000 f969 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2103      	movs	r1, #3
 8000872:	4618      	mov	r0, r3
 8000874:	f002 ff96 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800087e:	f000 f953 	bl	8000b28 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <MX_I2C1_Init+0x7c>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_I2C1_Init+0x78>)
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C1_Init+0x80>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_I2C1_Init+0x78>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_I2C1_Init+0x78>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_I2C1_Init+0x78>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_I2C1_Init+0x78>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_I2C1_Init+0x78>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C1_Init+0x78>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_I2C1_Init+0x78>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <MX_I2C1_Init+0x78>)
 80008d0:	f001 fed8 	bl	8002684 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 f925 	bl	8000b28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <MX_I2C1_Init+0x78>)
 80008e2:	f002 fa51 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 f91c 	bl	8000b28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_I2C1_Init+0x78>)
 80008f4:	f002 fa93 	bl	8002e1e <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f913 	bl	8000b28 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000902:	2001      	movs	r0, #1
 8000904:	f002 fad8 	bl	8002eb8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20002098 	.word	0x20002098
 8000910:	40005400 	.word	0x40005400
 8000914:	20000209 	.word	0x20000209

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f003 fd4c 	bl	80043f8 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f8df 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200020e4 	.word	0x200020e4
 8000974:	40004800 	.word	0x40004800

08000978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2206      	movs	r2, #6
 8000988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2202      	movs	r2, #2
 800098e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2201      	movs	r2, #1
 80009a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	f002 fa9c 	bl	8002ef8 <HAL_PCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f8af 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20002168 	.word	0x20002168

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x144>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x144>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <MX_GPIO_Init+0x144>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a3e      	ldr	r2, [pc, #248]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a38      	ldr	r2, [pc, #224]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a80:	4826      	ldr	r0, [pc, #152]	; (8000b1c <MX_GPIO_Init+0x148>)
 8000a82:	f001 fdc1 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4825      	ldr	r0, [pc, #148]	; (8000b20 <MX_GPIO_Init+0x14c>)
 8000a8c:	f001 fdbc 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <MX_GPIO_Init+0x150>)
 8000aa8:	f001 fbea 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aac:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4815      	ldr	r0, [pc, #84]	; (8000b1c <MX_GPIO_Init+0x148>)
 8000ac6:	f001 fbdb 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480f      	ldr	r0, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x14c>)
 8000ae2:	f001 fbcd 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_GPIO_Init+0x14c>)
 8000afa:	f001 fbc1 	bl	8002280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2028      	movs	r0, #40	; 0x28
 8000b04:	f001 fb85 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b08:	2028      	movs	r0, #40	; 0x28
 8000b0a:	f001 fb9e 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40020800 	.word	0x40020800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ae      	sub	sp, #184	; 0xb8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2290      	movs	r2, #144	; 0x90
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 fbab 	bl	80052f8 <memset>
  if(hi2c->Instance==I2C1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_I2C_MspInit+0xb4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d13c      	bne.n	8000c26 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fff4 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff ffaf 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <HAL_I2C_MspInit+0xbc>)
 8000c0a:	f001 fb39 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_I2C_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	37b8      	adds	r7, #184	; 0xb8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ae      	sub	sp, #184	; 0xb8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2290      	movs	r2, #144	; 0x90
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fb4b 	bl	80052f8 <memset>
  if(huart->Instance==USART3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_UART_MspInit+0xb4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13c      	bne.n	8000ce6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 ff94 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c86:	f7ff ff4f 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_UART_MspInit+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_UART_MspInit+0xbc>)
 8000ce2:	f001 facd 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004800 	.word	0x40004800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ae      	sub	sp, #184	; 0xb8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2290      	movs	r2, #144	; 0x90
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 faeb 	bl	80052f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2a:	d159      	bne.n	8000de0 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 ff33 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d48:	f7ff feee 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d7e:	230a      	movs	r3, #10
 8000d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <HAL_PCD_MspInit+0xf0>)
 8000d8c:	f001 fa78 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <HAL_PCD_MspInit+0xf0>)
 8000dac:	f001 fa68 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dba:	6353      	str	r3, [r2, #52]	; 0x34
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_PCD_MspInit+0xec>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	37b8      	adds	r7, #184	; 0xb8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f001 f8ca 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	for(int i=0; i<65535; ++i);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e002      	b.n	8000e56 <EXTI15_10_IRQHandler+0x12>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	ddf7      	ble.n	8000e50 <EXTI15_10_IRQHandler+0xc>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <EXTI15_10_IRQHandler+0x6c>)
 8000e66:	f001 fbb7 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d016      	beq.n	8000e9e <EXTI15_10_IRQHandler+0x5a>
	{
		if (toggle == 0)
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <EXTI15_10_IRQHandler+0x3c>
			toggle = 1;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e00e      	b.n	8000e9e <EXTI15_10_IRQHandler+0x5a>
		else if (toggle == 1)
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d103      	bne.n	8000e90 <EXTI15_10_IRQHandler+0x4c>
			toggle = 2;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e006      	b.n	8000e9e <EXTI15_10_IRQHandler+0x5a>
		else if (toggle == 2)
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d102      	bne.n	8000e9e <EXTI15_10_IRQHandler+0x5a>
			toggle = 0;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <EXTI15_10_IRQHandler+0x70>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000e9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea2:	f001 fbcb 	bl	800263c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	2000256c 	.word	0x2000256c

08000eb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e00a      	b.n	8000ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eca:	f3af 8000 	nop.w
 8000ece:	4601      	mov	r1, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	b2ca      	uxtb	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf0      	blt.n	8000eca <_read+0x12>
	}

return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e009      	b.n	8000f18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf1      	blt.n	8000f04 <_write+0x12>
	}
	return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f004 f966 	bl	8005294 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20080000 	.word	0x20080000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	200025e8 	.word	0x200025e8

08001000 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 f925 	bl	80052a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fabf 	bl	80005d8 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001068:	08013608 	.word	0x08013608
  ldr r2, =_sbss
 800106c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001070:	200025e4 	.word	0x200025e4

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <OLED_1in5_test>:
#include "../OLED/OLED_1in5.h"
#include "../Example/test.h"


int OLED_1in5_test(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af02      	add	r7, sp, #8
	printf("1.5inch OLED test demo\n");
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <OLED_1in5_test+0xb0>)
 8001080:	f004 fa72 	bl	8005568 <puts>
	if(System_Init() != 0) {
 8001084:	f000 fef0 	bl	8001e68 <System_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <OLED_1in5_test+0x1c>
		return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e045      	b.n	8001120 <OLED_1in5_test+0xa8>
	}
	  
	printf("OLED Init...\r\n");
 8001094:	4825      	ldr	r0, [pc, #148]	; (800112c <OLED_1in5_test+0xb4>)
 8001096:	f004 fa67 	bl	8005568 <puts>
	OLED_1in5_Init();
 800109a:	f000 fe45 	bl	8001d28 <OLED_1in5_Init>
	Driver_Delay_ms(500);
 800109e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a2:	f000 ff4f 	bl	8001f44 <Driver_Delay_ms>
	printf("Drawing:page 5\r\n");
 80010a6:	4822      	ldr	r0, [pc, #136]	; (8001130 <OLED_1in5_test+0xb8>)
 80010a8:	f004 fa5e 	bl	8005568 <puts>
	OLED_1in5_Display(gImage_1in5);
 80010ac:	4821      	ldr	r0, [pc, #132]	; (8001134 <OLED_1in5_test+0xbc>)
 80010ae:	f000 fea3 	bl	8001df8 <OLED_1in5_Display>
	Driver_Delay_ms(2000);
 80010b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b6:	f000 ff45 	bl	8001f44 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 fa92 	bl	80015e4 <Paint_Clear>
	OLED_1in5_Clear();
 80010c0:	f000 fe7e 	bl	8001dc0 <OLED_1in5_Clear>
	
	// 0.Create a new image cache
	UBYTE *BlackImage;
	UWORD Imagesize = ((OLED_1in5_WIDTH%2==0)? (OLED_1in5_WIDTH/2): (OLED_1in5_WIDTH/2+1)) * OLED_1in5_HEIGHT;
 80010c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c8:	80fb      	strh	r3, [r7, #6]
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 f90b 	bl	80052e8 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <OLED_1in5_test+0x70>
			printf("Failed to apply for black memory...\r\n");
 80010dc:	4816      	ldr	r0, [pc, #88]	; (8001138 <OLED_1in5_test+0xc0>)
 80010de:	f004 fa43 	bl	8005568 <puts>
			return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e01b      	b.n	8001120 <OLED_1in5_test+0xa8>
	}
	printf("Paint_NewImage\r\n");
 80010e8:	4814      	ldr	r0, [pc, #80]	; (800113c <OLED_1in5_test+0xc4>)
 80010ea:	f004 fa3d 	bl	8005568 <puts>
	Paint_NewImage(BlackImage, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);	
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	6838      	ldr	r0, [r7, #0]
 80010fc:	f000 f822 	bl	8001144 <Paint_NewImage>
	Paint_SetScale(16);
 8001100:	2010      	movs	r0, #16
 8001102:	f000 f885 	bl	8001210 <Paint_SetScale>
	printf("Drawing\r\n");
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <OLED_1in5_test+0xc8>)
 8001108:	f004 fa2e 	bl	8005568 <puts>
	//1.Select Image
	Paint_SelectImage(BlackImage);
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f000 f86f 	bl	80011f0 <Paint_SelectImage>
	Driver_Delay_ms(500);
 8001112:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001116:	f000 ff15 	bl	8001f44 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 fa62 	bl	80015e4 <Paint_Clear>
////		OLED_1in5_Display(gImage_1in5);
////		Driver_Delay_ms(2000);
////		Paint_Clear(BLACK);
//
//	}
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08006f4c 	.word	0x08006f4c
 800112c:	08006f64 	.word	0x08006f64
 8001130:	08006f74 	.word	0x08006f74
 8001134:	08007354 	.word	0x08007354
 8001138:	08006f84 	.word	0x08006f84
 800113c:	08006fac 	.word	0x08006fac
 8001140:	08006fbc 	.word	0x08006fbc

08001144 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	817b      	strh	r3, [r7, #10]
 8001156:	460b      	mov	r3, r1
 8001158:	813b      	strh	r3, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <Paint_NewImage+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <Paint_NewImage+0xa8>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <Paint_NewImage+0xa8>)
 800116c:	897b      	ldrh	r3, [r7, #10]
 800116e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <Paint_NewImage+0xa8>)
 8001172:	893b      	ldrh	r3, [r7, #8]
 8001174:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <Paint_NewImage+0xa8>)
 8001178:	8b3b      	ldrh	r3, [r7, #24]
 800117a:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <Paint_NewImage+0xa8>)
 800117e:	2202      	movs	r2, #2
 8001180:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8001182:	897b      	ldrh	r3, [r7, #10]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <Paint_NewImage+0x52>
 800118e:	897b      	ldrh	r3, [r7, #10]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	b29b      	uxth	r3, r3
 8001194:	e004      	b.n	80011a0 <Paint_NewImage+0x5c>
 8001196:	897b      	ldrh	r3, [r7, #10]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <Paint_NewImage+0xa8>)
 80011a2:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <Paint_NewImage+0xa8>)
 80011a6:	893b      	ldrh	r3, [r7, #8]
 80011a8:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <Paint_NewImage+0xa8>)
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <Paint_NewImage+0xa8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <Paint_NewImage+0x7e>
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	2bb4      	cmp	r3, #180	; 0xb4
 80011c0:	d106      	bne.n	80011d0 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <Paint_NewImage+0xa8>)
 80011c4:	897b      	ldrh	r3, [r7, #10]
 80011c6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <Paint_NewImage+0xa8>)
 80011ca:	893b      	ldrh	r3, [r7, #8]
 80011cc:	80d3      	strh	r3, [r2, #6]
 80011ce:	e006      	b.n	80011de <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <Paint_NewImage+0xa8>)
 80011d2:	893b      	ldrh	r3, [r7, #8]
 80011d4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <Paint_NewImage+0xa8>)
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	80d3      	strh	r3, [r2, #6]
    }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200025b8 	.word	0x200025b8

080011f0 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <Paint_SelectImage+0x1c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200025b8 	.word	0x200025b8

08001210 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d118      	bne.n	8001252 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <Paint_SetScale+0xe4>)
 8001226:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <Paint_SetScale+0xe4>)
 800122a:	891b      	ldrh	r3, [r3, #8]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	b29b      	uxth	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d104      	bne.n	8001240 <Paint_SetScale+0x30>
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <Paint_SetScale+0xe4>)
 8001238:	891b      	ldrh	r3, [r3, #8]
 800123a:	08db      	lsrs	r3, r3, #3
 800123c:	b29b      	uxth	r3, r3
 800123e:	e005      	b.n	800124c <Paint_SetScale+0x3c>
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <Paint_SetScale+0xe4>)
 8001242:	891b      	ldrh	r3, [r3, #8]
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	b29b      	uxth	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <Paint_SetScale+0xe4>)
 800124e:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 8001250:	e04b      	b.n	80012ea <Paint_SetScale+0xda>
    }else if(scale == 4){
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d118      	bne.n	800128a <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <Paint_SetScale+0xe4>)
 800125e:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <Paint_SetScale+0xe4>)
 8001262:	891b      	ldrh	r3, [r3, #8]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	b29b      	uxth	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <Paint_SetScale+0x68>
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <Paint_SetScale+0xe4>)
 8001270:	891b      	ldrh	r3, [r3, #8]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	b29b      	uxth	r3, r3
 8001276:	e005      	b.n	8001284 <Paint_SetScale+0x74>
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <Paint_SetScale+0xe4>)
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	b29b      	uxth	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <Paint_SetScale+0xe4>)
 8001286:	8253      	strh	r3, [r2, #18]
}
 8001288:	e02f      	b.n	80012ea <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b10      	cmp	r3, #16
 800128e:	d118      	bne.n	80012c2 <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <Paint_SetScale+0xe4>)
 8001296:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <Paint_SetScale+0xe4>)
 800129a:	891b      	ldrh	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <Paint_SetScale+0xa0>
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <Paint_SetScale+0xe4>)
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	e005      	b.n	80012bc <Paint_SetScale+0xac>
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <Paint_SetScale+0xe4>)
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	085b      	lsrs	r3, r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <Paint_SetScale+0xe4>)
 80012be:	8253      	strh	r3, [r2, #18]
}
 80012c0:	e013      	b.n	80012ea <Paint_SetScale+0xda>
    }else if(scale ==65) {
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b41      	cmp	r3, #65	; 0x41
 80012c6:	d10a      	bne.n	80012de <Paint_SetScale+0xce>
        Paint.Scale = scale;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <Paint_SetScale+0xe4>)
 80012ce:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Paint_SetScale+0xe4>)
 80012d2:	891b      	ldrh	r3, [r3, #8]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <Paint_SetScale+0xe4>)
 80012da:	825a      	strh	r2, [r3, #18]
}
 80012dc:	e005      	b.n	80012ea <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <Paint_SetScale+0xe8>)
 80012e0:	f004 f942 	bl	8005568 <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <Paint_SetScale+0xec>)
 80012e6:	f004 f93f 	bl	8005568 <puts>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200025b8 	.word	0x200025b8
 80012f8:	0800700c 	.word	0x0800700c
 80012fc:	08007034 	.word	0x08007034

08001300 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	460b      	mov	r3, r1
 800130c:	80bb      	strh	r3, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001312:	4b9e      	ldr	r3, [pc, #632]	; (800158c <Paint_SetPixel+0x28c>)
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	429a      	cmp	r2, r3
 800131a:	d804      	bhi.n	8001326 <Paint_SetPixel+0x26>
 800131c:	4b9b      	ldr	r3, [pc, #620]	; (800158c <Paint_SetPixel+0x28c>)
 800131e:	88db      	ldrh	r3, [r3, #6]
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d903      	bls.n	800132e <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8001326:	489a      	ldr	r0, [pc, #616]	; (8001590 <Paint_SetPixel+0x290>)
 8001328:	f004 f91e 	bl	8005568 <puts>
        return;
 800132c:	e154      	b.n	80015d8 <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800132e:	4b97      	ldr	r3, [pc, #604]	; (800158c <Paint_SetPixel+0x28c>)
 8001330:	89db      	ldrh	r3, [r3, #14]
 8001332:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001336:	d02b      	beq.n	8001390 <Paint_SetPixel+0x90>
 8001338:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800133c:	f300 8149 	bgt.w	80015d2 <Paint_SetPixel+0x2d2>
 8001340:	2bb4      	cmp	r3, #180	; 0xb4
 8001342:	d016      	beq.n	8001372 <Paint_SetPixel+0x72>
 8001344:	2bb4      	cmp	r3, #180	; 0xb4
 8001346:	f300 8144 	bgt.w	80015d2 <Paint_SetPixel+0x2d2>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <Paint_SetPixel+0x54>
 800134e:	2b5a      	cmp	r3, #90	; 0x5a
 8001350:	d005      	beq.n	800135e <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8001352:	e13e      	b.n	80015d2 <Paint_SetPixel+0x2d2>
        X = Xpoint;
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800135c:	e022      	b.n	80013a4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <Paint_SetPixel+0x28c>)
 8001360:	891a      	ldrh	r2, [r3, #8]
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001370:	e018      	b.n	80013a4 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8001372:	4b86      	ldr	r3, [pc, #536]	; (800158c <Paint_SetPixel+0x28c>)
 8001374:	891a      	ldrh	r2, [r3, #8]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001380:	4b82      	ldr	r3, [pc, #520]	; (800158c <Paint_SetPixel+0x28c>)
 8001382:	895a      	ldrh	r2, [r3, #10]
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800138e:	e009      	b.n	80013a4 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <Paint_SetPixel+0x28c>)
 8001396:	895a      	ldrh	r2, [r3, #10]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80013a2:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80013a4:	4b79      	ldr	r3, [pc, #484]	; (800158c <Paint_SetPixel+0x28c>)
 80013a6:	8a1b      	ldrh	r3, [r3, #16]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	f200 8114 	bhi.w	80015d6 <Paint_SetPixel+0x2d6>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <Paint_SetPixel+0xb4>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	08001403 	.word	0x08001403
 80013b8:	080013c5 	.word	0x080013c5
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013e5 	.word	0x080013e5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80013c4:	4b71      	ldr	r3, [pc, #452]	; (800158c <Paint_SetPixel+0x28c>)
 80013c6:	891a      	ldrh	r2, [r3, #8]
 80013c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3b01      	subs	r3, #1
 80013d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 80013d2:	e017      	b.n	8001404 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <Paint_SetPixel+0x28c>)
 80013d6:	895a      	ldrh	r2, [r3, #10]
 80013d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80013e2:	e00f      	b.n	8001404 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80013e4:	4b69      	ldr	r3, [pc, #420]	; (800158c <Paint_SetPixel+0x28c>)
 80013e6:	891a      	ldrh	r2, [r3, #8]
 80013e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <Paint_SetPixel+0x28c>)
 80013f4:	895a      	ldrh	r2, [r3, #10]
 80013f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001400:	e000      	b.n	8001404 <Paint_SetPixel+0x104>
        break;
 8001402:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <Paint_SetPixel+0x28c>)
 8001406:	891b      	ldrh	r3, [r3, #8]
 8001408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140a:	429a      	cmp	r2, r3
 800140c:	d804      	bhi.n	8001418 <Paint_SetPixel+0x118>
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <Paint_SetPixel+0x28c>)
 8001410:	895b      	ldrh	r3, [r3, #10]
 8001412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001414:	429a      	cmp	r2, r3
 8001416:	d903      	bls.n	8001420 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8001418:	485d      	ldr	r0, [pc, #372]	; (8001590 <Paint_SetPixel+0x290>)
 800141a:	f004 f8a5 	bl	8005568 <puts>
        return;
 800141e:	e0db      	b.n	80015d8 <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 8001420:	4b5a      	ldr	r3, [pc, #360]	; (800158c <Paint_SetPixel+0x28c>)
 8001422:	8adb      	ldrh	r3, [r3, #22]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d139      	bne.n	800149c <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8001428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b29b      	uxth	r3, r3
 800142e:	4619      	mov	r1, r3
 8001430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <Paint_SetPixel+0x28c>)
 8001434:	8a52      	ldrh	r2, [r2, #18]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	440b      	add	r3, r1
 800143c:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <Paint_SetPixel+0x28c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d113      	bne.n	8001478 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8001450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	fa42 f303 	asr.w	r3, r2, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	b25a      	sxtb	r2, r3
 8001462:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001466:	4013      	ands	r3, r2
 8001468:	b259      	sxtb	r1, r3
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <Paint_SetPixel+0x28c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e0af      	b.n	80015d8 <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	fa42 f303 	asr.w	r3, r2, r3
 8001484:	b25a      	sxtb	r2, r3
 8001486:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800148a:	4313      	orrs	r3, r2
 800148c:	b259      	sxtb	r1, r3
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <Paint_SetPixel+0x28c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e09d      	b.n	80015d8 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800149c:	4b3b      	ldr	r3, [pc, #236]	; (800158c <Paint_SetPixel+0x28c>)
 800149e:	8adb      	ldrh	r3, [r3, #22]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d137      	bne.n	8001514 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80014a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ae:	4a37      	ldr	r2, [pc, #220]	; (800158c <Paint_SetPixel+0x28c>)
 80014b0:	8a52      	ldrh	r2, [r2, #18]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	440b      	add	r3, r1
 80014b8:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <Paint_SetPixel+0x28c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 80014ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	22c0      	movs	r2, #192	; 0xc0
 80014d8:	fa42 f303 	asr.w	r3, r2, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014e6:	4013      	ands	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	019a      	lsls	r2, r3, #6
 80014f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa42 f303 	asr.w	r3, r2, r3
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001502:	4313      	orrs	r3, r2
 8001504:	b259      	sxtb	r1, r3
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <Paint_SetPixel+0x28c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4413      	add	r3, r2
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e061      	b.n	80015d8 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <Paint_SetPixel+0x28c>)
 8001516:	8adb      	ldrh	r3, [r3, #22]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d13b      	bne.n	8001594 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800151c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001526:	4a19      	ldr	r2, [pc, #100]	; (800158c <Paint_SetPixel+0x28c>)
 8001528:	8a52      	ldrh	r2, [r2, #18]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	440b      	add	r3, r1
 8001530:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <Paint_SetPixel+0x28c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 8001546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	22f0      	movs	r2, #240	; 0xf0
 8001550:	fa42 f303 	asr.w	r3, r2, r3
 8001554:	b25b      	sxtb	r3, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	b25a      	sxtb	r2, r3
 800155a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800155e:	4013      	ands	r3, r2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	011a      	lsls	r2, r3, #4
 8001568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa42 f303 	asr.w	r3, r2, r3
 8001574:	b25a      	sxtb	r2, r3
 8001576:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800157a:	4313      	orrs	r3, r2
 800157c:	b259      	sxtb	r1, r3
 800157e:	4b03      	ldr	r3, [pc, #12]	; (800158c <Paint_SetPixel+0x28c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e025      	b.n	80015d8 <Paint_SetPixel+0x2d8>
 800158c:	200025b8 	.word	0x200025b8
 8001590:	080070f4 	.word	0x080070f4
    }else if(Paint.Scale == 65) {
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <Paint_SetPixel+0x2e0>)
 8001596:	8adb      	ldrh	r3, [r3, #22]
 8001598:	2b41      	cmp	r3, #65	; 0x41
 800159a:	d11d      	bne.n	80015d8 <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800159c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159e:	005a      	lsls	r2, r3, #1
 80015a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015a2:	490f      	ldr	r1, [pc, #60]	; (80015e0 <Paint_SetPixel+0x2e0>)
 80015a4:	8a49      	ldrh	r1, [r1, #18]
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b299      	uxth	r1, r3
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <Paint_SetPixel+0x2e0>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	4413      	add	r3, r2
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <Paint_SetPixel+0x2e0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e002      	b.n	80015d8 <Paint_SetPixel+0x2d8>
        return;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <Paint_SetPixel+0x2d8>
        return;
 80015d6:	bf00      	nop
    }
}
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200025b8 	.word	0x200025b8

080015e4 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 80015ee:	4b51      	ldr	r3, [pc, #324]	; (8001734 <Paint_Clear+0x150>)
 80015f0:	8adb      	ldrh	r3, [r3, #22]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d003      	beq.n	80015fe <Paint_Clear+0x1a>
 80015f6:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <Paint_Clear+0x150>)
 80015f8:	8adb      	ldrh	r3, [r3, #22]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d125      	bne.n	800164a <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	83fb      	strh	r3, [r7, #30]
 8001602:	e01c      	b.n	800163e <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]
 8001608:	e011      	b.n	800162e <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800160a:	8bba      	ldrh	r2, [r7, #28]
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	4949      	ldr	r1, [pc, #292]	; (8001734 <Paint_Clear+0x150>)
 8001610:	8a49      	ldrh	r1, [r1, #18]
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <Paint_Clear+0x150>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	88fa      	ldrh	r2, [r7, #6]
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001628:	8bbb      	ldrh	r3, [r7, #28]
 800162a:	3301      	adds	r3, #1
 800162c:	83bb      	strh	r3, [r7, #28]
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <Paint_Clear+0x150>)
 8001630:	8a5b      	ldrh	r3, [r3, #18]
 8001632:	8bba      	ldrh	r2, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3e8      	bcc.n	800160a <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001638:	8bfb      	ldrh	r3, [r7, #30]
 800163a:	3301      	adds	r3, #1
 800163c:	83fb      	strh	r3, [r7, #30]
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <Paint_Clear+0x150>)
 8001640:	8a9b      	ldrh	r3, [r3, #20]
 8001642:	8bfa      	ldrh	r2, [r7, #30]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3dd      	bcc.n	8001604 <Paint_Clear+0x20>
 8001648:	e06e      	b.n	8001728 <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <Paint_Clear+0x150>)
 800164c:	8adb      	ldrh	r3, [r3, #22]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d12f      	bne.n	80016b2 <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001652:	2300      	movs	r3, #0
 8001654:	837b      	strh	r3, [r7, #26]
 8001656:	e026      	b.n	80016a6 <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001658:	2300      	movs	r3, #0
 800165a:	833b      	strh	r3, [r7, #24]
 800165c:	e01b      	b.n	8001696 <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800165e:	8b3a      	ldrh	r2, [r7, #24]
 8001660:	8b7b      	ldrh	r3, [r7, #26]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <Paint_Clear+0x150>)
 8001664:	8a49      	ldrh	r1, [r1, #18]
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	b25a      	sxtb	r2, r3
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b259      	sxtb	r1, r3
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <Paint_Clear+0x150>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001690:	8b3b      	ldrh	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	833b      	strh	r3, [r7, #24]
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <Paint_Clear+0x150>)
 8001698:	8a5b      	ldrh	r3, [r3, #18]
 800169a:	8b3a      	ldrh	r2, [r7, #24]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3de      	bcc.n	800165e <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80016a0:	8b7b      	ldrh	r3, [r7, #26]
 80016a2:	3301      	adds	r3, #1
 80016a4:	837b      	strh	r3, [r7, #26]
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <Paint_Clear+0x150>)
 80016a8:	8a9b      	ldrh	r3, [r3, #20]
 80016aa:	8b7a      	ldrh	r2, [r7, #26]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3d3      	bcc.n	8001658 <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 80016b0:	e03a      	b.n	8001728 <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <Paint_Clear+0x150>)
 80016b4:	8adb      	ldrh	r3, [r3, #22]
 80016b6:	2b41      	cmp	r3, #65	; 0x41
 80016b8:	d136      	bne.n	8001728 <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	82fb      	strh	r3, [r7, #22]
 80016be:	e02d      	b.n	800171c <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e022      	b.n	800170c <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 80016c6:	8abb      	ldrh	r3, [r7, #20]
 80016c8:	005a      	lsls	r2, r3, #1
 80016ca:	8afb      	ldrh	r3, [r7, #22]
 80016cc:	4919      	ldr	r1, [pc, #100]	; (8001734 <Paint_Clear+0x150>)
 80016ce:	8a49      	ldrh	r1, [r1, #18]
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <Paint_Clear+0x150>)
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	440b      	add	r3, r1
 80016e8:	f002 020f 	and.w	r2, r2, #15
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <Paint_Clear+0x150>)
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	440b      	add	r3, r1
 80016fe:	f002 020f 	and.w	r2, r2, #15
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001706:	8abb      	ldrh	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	82bb      	strh	r3, [r7, #20]
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <Paint_Clear+0x150>)
 800170e:	8a5b      	ldrh	r3, [r3, #18]
 8001710:	8aba      	ldrh	r2, [r7, #20]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3d7      	bcc.n	80016c6 <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	3301      	adds	r3, #1
 800171a:	82fb      	strh	r3, [r7, #22]
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <Paint_Clear+0x150>)
 800171e:	8a9b      	ldrh	r3, [r3, #20]
 8001720:	8afa      	ldrh	r2, [r7, #22]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3cc      	bcc.n	80016c0 <Paint_Clear+0xdc>
}
 8001726:	e7ff      	b.n	8001728 <Paint_Clear+0x144>
 8001728:	bf00      	nop
 800172a:	3724      	adds	r7, #36	; 0x24
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200025b8 	.word	0x200025b8

08001738 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <Paint_DrawPoint+0x148>)
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	429a      	cmp	r2, r3
 800175e:	d804      	bhi.n	800176a <Paint_DrawPoint+0x32>
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <Paint_DrawPoint+0x148>)
 8001762:	88db      	ldrh	r3, [r3, #6]
 8001764:	88ba      	ldrh	r2, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d911      	bls.n	800178e <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800176a:	4846      	ldr	r0, [pc, #280]	; (8001884 <Paint_DrawPoint+0x14c>)
 800176c:	f003 fefc 	bl	8005568 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4a43      	ldr	r2, [pc, #268]	; (8001880 <Paint_DrawPoint+0x148>)
 8001774:	8892      	ldrh	r2, [r2, #4]
 8001776:	4619      	mov	r1, r3
 8001778:	4843      	ldr	r0, [pc, #268]	; (8001888 <Paint_DrawPoint+0x150>)
 800177a:	f003 fe6f 	bl	800545c <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <Paint_DrawPoint+0x148>)
 8001782:	88d2      	ldrh	r2, [r2, #6]
 8001784:	4619      	mov	r1, r3
 8001786:	4841      	ldr	r0, [pc, #260]	; (800188c <Paint_DrawPoint+0x154>)
 8001788:	f003 fe68 	bl	800545c <iprintf>
        return;
 800178c:	e074      	b.n	8001878 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800178e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d144      	bne.n	8001820 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001796:	2300      	movs	r3, #0
 8001798:	81fb      	strh	r3, [r7, #14]
 800179a:	e039      	b.n	8001810 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800179c:	2300      	movs	r3, #0
 800179e:	81bb      	strh	r3, [r7, #12]
 80017a0:	e029      	b.n	80017f6 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a8:	441a      	add	r2, r3
 80017aa:	787b      	ldrb	r3, [r7, #1]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db28      	blt.n	8001804 <Paint_DrawPoint+0xcc>
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b8:	441a      	add	r2, r3
 80017ba:	787b      	ldrb	r3, [r7, #1]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db20      	blt.n	8001804 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80017c2:	89fa      	ldrh	r2, [r7, #14]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4413      	add	r3, r2
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b298      	uxth	r0, r3
 80017d2:	89ba      	ldrh	r2, [r7, #12]
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	b29a      	uxth	r2, r3
 80017da:	787b      	ldrb	r3, [r7, #1]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fd8b 	bl	8001300 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80017ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	81bb      	strh	r3, [r7, #12]
 80017f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017fa:	787b      	ldrb	r3, [r7, #1]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	429a      	cmp	r2, r3
 8001802:	dbce      	blt.n	80017a2 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	81fb      	strh	r3, [r7, #14]
 8001810:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	429a      	cmp	r2, r3
 800181c:	dbbe      	blt.n	800179c <Paint_DrawPoint+0x64>
 800181e:	e02b      	b.n	8001878 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001820:	2300      	movs	r3, #0
 8001822:	81fb      	strh	r3, [r7, #14]
 8001824:	e023      	b.n	800186e <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001826:	2300      	movs	r3, #0
 8001828:	81bb      	strh	r3, [r7, #12]
 800182a:	e015      	b.n	8001858 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800182c:	89fa      	ldrh	r2, [r7, #14]
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4413      	add	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b298      	uxth	r0, r3
 8001838:	89ba      	ldrh	r2, [r7, #12]
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff fd5a 	bl	8001300 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800184c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001850:	b29b      	uxth	r3, r3
 8001852:	3301      	adds	r3, #1
 8001854:	b29b      	uxth	r3, r3
 8001856:	81bb      	strh	r3, [r7, #12]
 8001858:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbe4      	blt.n	800182c <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001866:	b29b      	uxth	r3, r3
 8001868:	3301      	adds	r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	81fb      	strh	r3, [r7, #14]
 800186e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001872:	787b      	ldrb	r3, [r7, #1]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbd6      	blt.n	8001826 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	bf00      	nop
 8001880:	200025b8 	.word	0x200025b8
 8001884:	0800711c 	.word	0x0800711c
 8001888:	0800715c 	.word	0x0800715c
 800188c:	08007180 	.word	0x08007180

08001890 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af02      	add	r7, sp, #8
 8001896:	4604      	mov	r4, r0
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	4603      	mov	r3, r0
 80018a4:	80bb      	strh	r3, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	807b      	strh	r3, [r7, #2]
 80018aa:	4613      	mov	r3, r2
 80018ac:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <Paint_DrawCircle+0x1bc>)
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d804      	bhi.n	80018c2 <Paint_DrawCircle+0x32>
 80018b8:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <Paint_DrawCircle+0x1bc>)
 80018ba:	88db      	ldrh	r3, [r3, #6]
 80018bc:	88ba      	ldrh	r2, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d303      	bcc.n	80018ca <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 80018c2:	4863      	ldr	r0, [pc, #396]	; (8001a50 <Paint_DrawCircle+0x1c0>)
 80018c4:	f003 fe50 	bl	8005568 <puts>
        return;
 80018c8:	e16b      	b.n	8001ba2 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f1c3 0303 	rsb	r3, r3, #3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80018e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f040 8155 	bne.w	8001b94 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80018ea:	e0a6      	b.n	8001a3a <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	813b      	strh	r3, [r7, #8]
 80018f0:	e075      	b.n	80019de <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 80018f2:	89fa      	ldrh	r2, [r7, #14]
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4413      	add	r3, r2
 80018f8:	b298      	uxth	r0, r3
 80018fa:	893a      	ldrh	r2, [r7, #8]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	b299      	uxth	r1, r3
 8001902:	883a      	ldrh	r2, [r7, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	f7ff ff15 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b298      	uxth	r0, r3
 8001916:	893a      	ldrh	r2, [r7, #8]
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	b299      	uxth	r1, r3
 800191e:	883a      	ldrh	r2, [r7, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	f7ff ff07 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800192a:	893b      	ldrh	r3, [r7, #8]
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b298      	uxth	r0, r3
 8001932:	89fa      	ldrh	r2, [r7, #14]
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	b299      	uxth	r1, r3
 800193a:	883a      	ldrh	r2, [r7, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	f7ff fef9 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8001946:	893b      	ldrh	r3, [r7, #8]
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b298      	uxth	r0, r3
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	88ba      	ldrh	r2, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b299      	uxth	r1, r3
 8001956:	883a      	ldrh	r2, [r7, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	f7ff feeb 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b298      	uxth	r0, r3
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	88ba      	ldrh	r2, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b299      	uxth	r1, r3
 8001972:	883a      	ldrh	r2, [r7, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	f7ff fedd 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800197e:	89fa      	ldrh	r2, [r7, #14]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4413      	add	r3, r2
 8001984:	b298      	uxth	r0, r3
 8001986:	893b      	ldrh	r3, [r7, #8]
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b299      	uxth	r1, r3
 800198e:	883a      	ldrh	r2, [r7, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	f7ff fecf 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800199a:	893a      	ldrh	r2, [r7, #8]
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4413      	add	r3, r2
 80019a0:	b298      	uxth	r0, r3
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	88ba      	ldrh	r2, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b299      	uxth	r1, r3
 80019aa:	883a      	ldrh	r2, [r7, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	f7ff fec1 	bl	8001738 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80019b6:	893a      	ldrh	r2, [r7, #8]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4413      	add	r3, r2
 80019bc:	b298      	uxth	r0, r3
 80019be:	89fa      	ldrh	r2, [r7, #14]
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	b299      	uxth	r1, r3
 80019c6:	883a      	ldrh	r2, [r7, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	f7ff feb3 	bl	8001738 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80019d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dd83      	ble.n	80018f2 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 80019ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da09      	bge.n	8001a06 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	897b      	ldrh	r3, [r7, #10]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3306      	adds	r3, #6
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	817b      	strh	r3, [r7, #10]
 8001a04:	e013      	b.n	8001a2e <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001a06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	330a      	adds	r3, #10
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001a22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001a3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	f77f af52 	ble.w	80018ec <Paint_DrawCircle+0x5c>
 8001a48:	e0ab      	b.n	8001ba2 <Paint_DrawCircle+0x312>
 8001a4a:	bf00      	nop
 8001a4c:	200025b8 	.word	0x200025b8
 8001a50:	08007218 	.word	0x08007218
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001a54:	89fa      	ldrh	r2, [r7, #14]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4413      	add	r3, r2
 8001a5a:	b298      	uxth	r0, r3
 8001a5c:	89ba      	ldrh	r2, [r7, #12]
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	b299      	uxth	r1, r3
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	883a      	ldrh	r2, [r7, #0]
 8001a6a:	2401      	movs	r4, #1
 8001a6c:	9400      	str	r4, [sp, #0]
 8001a6e:	f7ff fe63 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b299      	uxth	r1, r3
 8001a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a86:	883a      	ldrh	r2, [r7, #0]
 8001a88:	2401      	movs	r4, #1
 8001a8a:	9400      	str	r4, [sp, #0]
 8001a8c:	f7ff fe54 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001a90:	89bb      	ldrh	r3, [r7, #12]
 8001a92:	88fa      	ldrh	r2, [r7, #6]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b298      	uxth	r0, r3
 8001a98:	89fa      	ldrh	r2, [r7, #14]
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b299      	uxth	r1, r3
 8001aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa4:	883a      	ldrh	r2, [r7, #0]
 8001aa6:	2401      	movs	r4, #1
 8001aa8:	9400      	str	r4, [sp, #0]
 8001aaa:	f7ff fe45 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	88ba      	ldrh	r2, [r7, #4]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b299      	uxth	r1, r3
 8001abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ac2:	883a      	ldrh	r2, [r7, #0]
 8001ac4:	2401      	movs	r4, #1
 8001ac6:	9400      	str	r4, [sp, #0]
 8001ac8:	f7ff fe36 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b298      	uxth	r0, r3
 8001ad4:	89bb      	ldrh	r3, [r7, #12]
 8001ad6:	88ba      	ldrh	r2, [r7, #4]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b299      	uxth	r1, r3
 8001adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae0:	883a      	ldrh	r2, [r7, #0]
 8001ae2:	2401      	movs	r4, #1
 8001ae4:	9400      	str	r4, [sp, #0]
 8001ae6:	f7ff fe27 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001aea:	89fa      	ldrh	r2, [r7, #14]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4413      	add	r3, r2
 8001af0:	b298      	uxth	r0, r3
 8001af2:	89bb      	ldrh	r3, [r7, #12]
 8001af4:	88ba      	ldrh	r2, [r7, #4]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b299      	uxth	r1, r3
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	883a      	ldrh	r2, [r7, #0]
 8001b00:	2401      	movs	r4, #1
 8001b02:	9400      	str	r4, [sp, #0]
 8001b04:	f7ff fe18 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001b08:	89ba      	ldrh	r2, [r7, #12]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b298      	uxth	r0, r3
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b299      	uxth	r1, r3
 8001b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b1c:	883a      	ldrh	r2, [r7, #0]
 8001b1e:	2401      	movs	r4, #1
 8001b20:	9400      	str	r4, [sp, #0]
 8001b22:	f7ff fe09 	bl	8001738 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8001b26:	89ba      	ldrh	r2, [r7, #12]
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b298      	uxth	r0, r3
 8001b2e:	89fa      	ldrh	r2, [r7, #14]
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	b299      	uxth	r1, r3
 8001b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3a:	883a      	ldrh	r2, [r7, #0]
 8001b3c:	2401      	movs	r4, #1
 8001b3e:	9400      	str	r4, [sp, #0]
 8001b40:	f7ff fdfa 	bl	8001738 <Paint_DrawPoint>

            if (Esp < 0 )
 8001b44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da09      	bge.n	8001b60 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3306      	adds	r3, #6
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	e013      	b.n	8001b88 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001b60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	330a      	adds	r3, #10
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001b7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001b88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001b94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f77f af59 	ble.w	8001a54 <Paint_DrawCircle+0x1c4>
        }
    }
}
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    OLED_RST_1;
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <OLED_Reset+0x40>)
 8001bb4:	f000 fd28 	bl	8002608 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001bb8:	2064      	movs	r0, #100	; 0x64
 8001bba:	f000 f9c3 	bl	8001f44 <Driver_Delay_ms>
    OLED_RST_0;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <OLED_Reset+0x40>)
 8001bc6:	f000 fd1f 	bl	8002608 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001bca:	2064      	movs	r0, #100	; 0x64
 8001bcc:	f000 f9ba 	bl	8001f44 <Driver_Delay_ms>
    OLED_RST_1;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd6:	4804      	ldr	r0, [pc, #16]	; (8001be8 <OLED_Reset+0x40>)
 8001bd8:	f000 fd16 	bl	8002608 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001bdc:	2064      	movs	r0, #100	; 0x64
 8001bde:	f000 f9b1 	bl	8001f44 <Driver_Delay_ms>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020000 	.word	0x40020000

08001bec <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
void OLED_WriteReg(uint8_t Reg)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	OLED_DC_0;
    OLED_CS_0;
    SPI4W_Write_Byte(Reg);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte_reg(Reg,IIC_CMD);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f94e 	bl	8001e9c <I2C_Write_Byte_reg>
#endif
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
    OLED_DC_1;
    OLED_CS_0;
    SPI4W_Write_Byte(Data);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f96a 	bl	8001ef0 <I2C_Write_Byte>
#endif
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <OLED_WriteData_buf>:


static void OLED_WriteData_buf()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af02      	add	r7, sp, #8
    OLED_DC_1;
    OLED_CS_0;
    SPI4W_Write_Byte(Data);
    OLED_CS_1;
#elif USE_IIC
    buffer[0] = 0x40;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <OLED_WriteData_buf+0x28>)
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, 0x7A, (uint8_t*)&buffer, 128*128/2, 0xFFFFFF);
 8001c30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <OLED_WriteData_buf+0x28>)
 8001c3c:	217a      	movs	r1, #122	; 0x7a
 8001c3e:	4804      	ldr	r0, [pc, #16]	; (8001c50 <OLED_WriteData_buf+0x2c>)
 8001c40:	f000 fdb0 	bl	80027a4 <HAL_I2C_Master_Transmit>
#endif
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000090 	.word	0x20000090
 8001c50:	20002098 	.word	0x20002098

08001c54 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 8001c58:	20ae      	movs	r0, #174	; 0xae
 8001c5a:	f7ff ffc7 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 8001c5e:	2015      	movs	r0, #21
 8001c60:	f7ff ffc4 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ffc1 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 8001c6a:	207f      	movs	r0, #127	; 0x7f
 8001c6c:	f7ff ffbe 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 8001c70:	2075      	movs	r0, #117	; 0x75
 8001c72:	f7ff ffbb 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ffb8 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 8001c7c:	207f      	movs	r0, #127	; 0x7f
 8001c7e:	f7ff ffb5 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 8001c82:	2081      	movs	r0, #129	; 0x81
 8001c84:	f7ff ffb2 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x80);
 8001c88:	2080      	movs	r0, #128	; 0x80
 8001c8a:	f7ff ffaf 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 8001c8e:	20a0      	movs	r0, #160	; 0xa0
 8001c90:	f7ff ffac 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 8001c94:	2051      	movs	r0, #81	; 0x51
 8001c96:	f7ff ffa9 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 8001c9a:	20a1      	movs	r0, #161	; 0xa1
 8001c9c:	f7ff ffa6 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ffa3 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 8001ca6:	20a2      	movs	r0, #162	; 0xa2
 8001ca8:	f7ff ffa0 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ff9d 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 8001cb2:	20a4      	movs	r0, #164	; 0xa4
 8001cb4:	f7ff ff9a 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 8001cb8:	20a8      	movs	r0, #168	; 0xa8
 8001cba:	f7ff ff97 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 8001cbe:	207f      	movs	r0, #127	; 0x7f
 8001cc0:	f7ff ff94 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 8001cc4:	20b1      	movs	r0, #177	; 0xb1
 8001cc6:	f7ff ff91 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 8001cca:	20f1      	movs	r0, #241	; 0xf1
 8001ccc:	f7ff ff8e 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 8001cd0:	20b3      	movs	r0, #179	; 0xb3
 8001cd2:	f7ff ff8b 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff ff88 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 8001cdc:	20ab      	movs	r0, #171	; 0xab
 8001cde:	f7ff ff85 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff ff82 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 8001ce8:	20b6      	movs	r0, #182	; 0xb6
 8001cea:	f7ff ff7f 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f7ff ff7c 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 8001cf4:	20be      	movs	r0, #190	; 0xbe
 8001cf6:	f7ff ff79 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 8001cfa:	200f      	movs	r0, #15
 8001cfc:	f7ff ff76 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 8001d00:	20bc      	movs	r0, #188	; 0xbc
 8001d02:	f7ff ff73 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x08);
 8001d06:	2008      	movs	r0, #8
 8001d08:	f7ff ff70 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 8001d0c:	20d5      	movs	r0, #213	; 0xd5
 8001d0e:	f7ff ff6d 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x62);
 8001d12:	2062      	movs	r0, #98	; 0x62
 8001d14:	f7ff ff6a 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 8001d18:	20fd      	movs	r0, #253	; 0xfd
 8001d1a:	f7ff ff67 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(0x12);
 8001d1e:	2012      	movs	r0, #18
 8001d20:	f7ff ff64 	bl	8001bec <OLED_WriteReg>

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 8001d2c:	f7ff ff3c 	bl	8001ba8 <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 8001d30:	f7ff ff90 	bl	8001c54 <OLED_InitReg>
    Driver_Delay_ms(200);
 8001d34:	20c8      	movs	r0, #200	; 0xc8
 8001d36:	f000 f905 	bl	8001f44 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 8001d3a:	20af      	movs	r0, #175	; 0xaf
 8001d3c:	f7ff ff56 	bl	8001bec <OLED_WriteReg>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	4623      	mov	r3, r4
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4603      	mov	r3, r0
 8001d58:	71bb      	strb	r3, [r7, #6]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	717b      	strb	r3, [r7, #5]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d827      	bhi.n	8001db8 <OLED_SetWindow+0x74>
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d824      	bhi.n	8001db8 <OLED_SetWindow+0x74>
 8001d6e:	797b      	ldrb	r3, [r7, #5]
 8001d70:	2b80      	cmp	r3, #128	; 0x80
 8001d72:	d821      	bhi.n	8001db8 <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 8001d74:	793b      	ldrb	r3, [r7, #4]
 8001d76:	2b80      	cmp	r3, #128	; 0x80
 8001d78:	d81e      	bhi.n	8001db8 <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 8001d7a:	2015      	movs	r0, #21
 8001d7c:	f7ff ff36 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff30 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 8001d8c:	797b      	ldrb	r3, [r7, #5]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff28 	bl	8001bec <OLED_WriteReg>

    OLED_WriteReg(0x75);
 8001d9c:	2075      	movs	r0, #117	; 0x75
 8001d9e:	f7ff ff25 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff21 	bl	8001bec <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 8001daa:	793b      	ldrb	r3, [r7, #4]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff1b 	bl	8001bec <OLED_WriteReg>
 8001db6:	e000      	b.n	8001dba <OLED_SetWindow+0x76>
        return;
 8001db8:	bf00      	nop
}
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}

08001dc0 <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff ffb9 	bl	8001d44 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	80fb      	strh	r3, [r7, #6]
 8001dd6:	e005      	b.n	8001de4 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff ff15 	bl	8001c08 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	3301      	adds	r3, #1
 8001de2:	80fb      	strh	r3, [r7, #6]
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dea:	d3f5      	bcc.n	8001dd8 <OLED_1in5_Clear+0x18>
    }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff ff9c 	bl	8001d44 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	e01f      	b.n	8001e52 <OLED_1in5_Display+0x5a>
        for(j=0; j<OLED_1in5_WIDTH; j++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	81bb      	strh	r3, [r7, #12]
 8001e16:	e016      	b.n	8001e46 <OLED_1in5_Display+0x4e>
        {
        	buffer[i/2 + j*(OLED_1in5_WIDTH/2)] = Image[i/2 + j*(OLED_1in5_WIDTH/2)];
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	4413      	add	r3, r2
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	441a      	add	r2, r3
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4619      	mov	r1, r3
 8001e34:	89bb      	ldrh	r3, [r7, #12]
 8001e36:	019b      	lsls	r3, r3, #6
 8001e38:	440b      	add	r3, r1
 8001e3a:	7811      	ldrb	r1, [r2, #0]
 8001e3c:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <OLED_1in5_Display+0x6c>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
        for(j=0; j<OLED_1in5_WIDTH; j++)
 8001e40:	89bb      	ldrh	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	81bb      	strh	r3, [r7, #12]
 8001e46:	89bb      	ldrh	r3, [r7, #12]
 8001e48:	2b7f      	cmp	r3, #127	; 0x7f
 8001e4a:	d9e5      	bls.n	8001e18 <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	81fb      	strh	r3, [r7, #14]
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	2b7f      	cmp	r3, #127	; 0x7f
 8001e56:	d9dc      	bls.n	8001e12 <OLED_1in5_Display+0x1a>

        }
    OLED_WriteData_buf();
 8001e58:	f7ff fee4 	bl	8001c24 <OLED_WriteData_buf>
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000090 	.word	0x20000090

08001e68 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
#if USE_SPI_4W
	printf("USE_SPI_4W\r\n");
#elif USE_IIC
	printf("USE_IIC\r\n");
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <System_Init+0x28>)
 8001e6e:	f003 fb7b 	bl	8005568 <puts>
	OLED_CS_0;
 8001e72:	2200      	movs	r2, #0
 8001e74:	2140      	movs	r1, #64	; 0x40
 8001e76:	4807      	ldr	r0, [pc, #28]	; (8001e94 <System_Init+0x2c>)
 8001e78:	f000 fbc6 	bl	8002608 <HAL_GPIO_WritePin>
	OLED_DC_0;//DC = 0,1 >> Address = 0x3c,0x3d 
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <System_Init+0x30>)
 8001e84:	f000 fbc0 	bl	8002608 <HAL_GPIO_WritePin>
#elif USE_IIC_SOFT
	printf("USEI_IIC_SOFT\r\n");
	OLED_CS_0;
	OLED_DC_0;
#endif
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08007324 	.word	0x08007324
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020000 	.word	0x40020000

08001e9c <I2C_Write_Byte_reg>:
//#endif
//}


void I2C_Write_Byte_reg(uint8_t value, uint8_t Cmd)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
    int Err;
    uint8_t W_Buf[2] ;
    W_Buf[0] = Cmd;
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	723b      	strb	r3, [r7, #8]
    W_Buf[1] = value;
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	727b      	strb	r3, [r7, #9]
    if(HAL_I2C_Master_Transmit(&hi2c1, 0x7A, W_Buf, 2, 0x10) != HAL_OK) {
 8001eb4:	f107 0208 	add.w	r2, r7, #8
 8001eb8:	2310      	movs	r3, #16
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	217a      	movs	r1, #122	; 0x7a
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <I2C_Write_Byte_reg+0x4c>)
 8001ec2:	f000 fc6f 	bl	80027a4 <HAL_I2C_Master_Transmit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <I2C_Write_Byte_reg+0x44>
        Err++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
        if(Err == 1000) {
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed8:	d102      	bne.n	8001ee0 <I2C_Write_Byte_reg+0x44>
            printf("send error\r\n");
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <I2C_Write_Byte_reg+0x50>)
 8001edc:	f003 fb44 	bl	8005568 <puts>
            return ;
        }
    }
//	HAL_I2C_Master_Transmit(&hi2c1, 0x7A, W_Buf, 2, 10);
}
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20002098 	.word	0x20002098
 8001eec:	08007330 	.word	0x08007330

08001ef0 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71bb      	strb	r3, [r7, #6]
    int Err;
    uint8_t W_Buf[2] ;
    W_Buf[0] = Cmd;
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	723b      	strb	r3, [r7, #8]
    W_Buf[1] = value;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	727b      	strb	r3, [r7, #9]
    if(HAL_I2C_Master_Transmit(&hi2c1, 0x7A, W_Buf, 2, 0x10) != HAL_OK) {
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2302      	movs	r3, #2
 8001f12:	217a      	movs	r1, #122	; 0x7a
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <I2C_Write_Byte+0x4c>)
 8001f16:	f000 fc45 	bl	80027a4 <HAL_I2C_Master_Transmit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <I2C_Write_Byte+0x44>
        Err++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3301      	adds	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
        if(Err == 1000) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2c:	d102      	bne.n	8001f34 <I2C_Write_Byte+0x44>
            printf("send error\r\n");
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <I2C_Write_Byte+0x50>)
 8001f30:	f003 fb1a 	bl	8005568 <puts>
            return ;
        }
    }
//	HAL_I2C_Master_Transmit(&hi2c1, 0x7A, W_Buf, 2, 10);
}
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20002098 	.word	0x20002098
 8001f40:	08007330 	.word	0x08007330

08001f44 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f861 	bl	8002014 <HAL_Delay>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5e:	2003      	movs	r0, #3
 8001f60:	f000 f94c 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 f805 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6a:	f7fe fde3 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f967 	bl	8002266 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f000 f92f 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	200025d0 	.word	0x200025d0

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200025d0 	.word	0x200025d0

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff ffee 	bl	8001ffc <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffde 	bl	8001ffc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <__NVIC_SetPriorityGrouping+0x40>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	4313      	orrs	r3, r2
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x40>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	05fa0000 	.word	0x05fa0000

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	e175      	b.n	800258c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 8164 	bne.w	8002586 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d005      	beq.n	80022d6 <HAL_GPIO_Init+0x56>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d130      	bne.n	8002338 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	69b9      	ldr	r1, [r7, #24]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80be 	beq.w	8002586 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_GPIO_Init+0x324>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_GPIO_Init+0x324>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_GPIO_Init+0x324>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002422:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_GPIO_Init+0x328>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_GPIO_Init+0x32c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d037      	beq.n	80024be <HAL_GPIO_Init+0x23e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_GPIO_Init+0x23a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x236>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_GPIO_Init+0x338>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x232>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a54      	ldr	r2, [pc, #336]	; (80025bc <HAL_GPIO_Init+0x33c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x22e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a53      	ldr	r2, [pc, #332]	; (80025c0 <HAL_GPIO_Init+0x340>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x22a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_GPIO_Init+0x344>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x348>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x34c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x21e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x21a>
 8002496:	2309      	movs	r3, #9
 8002498:	e012      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 800249a:	230a      	movs	r3, #10
 800249c:	e010      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 800249e:	2308      	movs	r3, #8
 80024a0:	e00e      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e00c      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024a6:	2306      	movs	r3, #6
 80024a8:	e00a      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024aa:	2305      	movs	r3, #5
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024ae:	2304      	movs	r3, #4
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x240>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_GPIO_Init+0x328>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_GPIO_Init+0x354>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <HAL_GPIO_Init+0x354>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <HAL_GPIO_Init+0x354>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <HAL_GPIO_Init+0x354>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_GPIO_Init+0x354>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_GPIO_Init+0x354>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_GPIO_Init+0x354>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <HAL_GPIO_Init+0x354>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f ae86 	bls.w	80022a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40021400 	.word	0x40021400
 80025c4:	40021800 	.word	0x40021800
 80025c8:	40021c00 	.word	0x40021c00
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40022400 	.word	0x40022400
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f806 	bl	800266c <HAL_GPIO_EXTI_Callback>
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe fa66 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e006      	b.n	800270c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800270a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d104      	bne.n	800271e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_I2C_Init+0x11c>)
 800272a:	430b      	orrs	r3, r1
 800272c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	02008000 	.word	0x02008000

080027a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
 80027b4:	4613      	mov	r3, r2
 80027b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	f040 80da 	bne.w	800297a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x30>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0d3      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027dc:	f7ff fc0e 	bl	8001ffc <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	2201      	movs	r2, #1
 80027ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f8f0 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0be      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	; 0x21
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2210      	movs	r2, #16
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	893a      	ldrh	r2, [r7, #8]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	; 0xff
 800282e:	d90e      	bls.n	800284e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	4b51      	ldr	r3, [pc, #324]	; (8002984 <HAL_I2C_Master_Transmit+0x1e0>)
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa6c 	bl	8002d24 <I2C_TransferConfig>
 800284c:	e06c      	b.n	8002928 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_I2C_Master_Transmit+0x1e0>)
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fa5b 	bl	8002d24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800286e:	e05b      	b.n	8002928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6a39      	ldr	r1, [r7, #32]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f8ed 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e07b      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d034      	beq.n	8002928 <HAL_I2C_Master_Transmit+0x184>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d130      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f87f 	bl	80029d4 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04d      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d90e      	bls.n	8002908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fa0f 	bl	8002d24 <I2C_TransferConfig>
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9fe 	bl	8002d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d19e      	bne.n	8002870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	6a39      	ldr	r1, [r7, #32]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8cc 	bl	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e01a      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2220      	movs	r2, #32
 800294c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_I2C_Master_Transmit+0x1e4>)
 800295a:	400b      	ands	r3, r1
 800295c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	80002000 	.word	0x80002000
 8002988:	fe00e800 	.word	0xfe00e800

0800298c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d103      	bne.n	80029aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d007      	beq.n	80029c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	619a      	str	r2, [r3, #24]
  }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	e022      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d01e      	beq.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff fb05 	bl	8001ffc <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00f      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d0cd      	beq.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a60:	e02c      	b.n	8002abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f870 	bl	8002b4c <I2C_IsErrorOccurred>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02a      	b.n	8002acc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d01e      	beq.n	8002abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff fabd 	bl	8001ffc <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d113      	bne.n	8002abc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d1cb      	bne.n	8002a62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae0:	e028      	b.n	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f830 	bl	8002b4c <I2C_IsErrorOccurred>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e026      	b.n	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7ff fa81 	bl	8001ffc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d113      	bne.n	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d1cf      	bne.n	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d075      	beq.n	8002c64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b80:	e056      	b.n	8002c30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d052      	beq.n	8002c30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff fa37 	bl	8001ffc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_IsErrorOccurred+0x54>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d147      	bne.n	8002c30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc2:	d12e      	bne.n	8002c22 <I2C_IsErrorOccurred+0xd6>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bca:	d02a      	beq.n	8002c22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d027      	beq.n	8002c22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002be2:	f7ff fa0b 	bl	8001ffc <HAL_GetTick>
 8002be6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be8:	e01b      	b.n	8002c22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bea:	f7ff fa07 	bl	8001ffc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b19      	cmp	r3, #25
 8002bf6:	d914      	bls.n	8002c22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d1dc      	bne.n	8002bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d003      	beq.n	8002c46 <I2C_IsErrorOccurred+0xfa>
 8002c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d09d      	beq.n	8002b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2220      	movs	r2, #32
 8002c54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01c      	beq.n	8002d14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fe56 	bl	800298c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <I2C_IsErrorOccurred+0x1d4>)
 8002cec:	400b      	ands	r3, r1
 8002cee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fe00e800 	.word	0xfe00e800

08002d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	4613      	mov	r3, r2
 8002d34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d3c:	7a7b      	ldrb	r3, [r7, #9]
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d44:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	0d5b      	lsrs	r3, r3, #21
 8002d5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <I2C_TransferConfig+0x60>)
 8002d64:	430b      	orrs	r3, r1
 8002d66:	43db      	mvns	r3, r3
 8002d68:	ea02 0103 	and.w	r1, r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	03ff63ff 	.word	0x03ff63ff

08002d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d138      	bne.n	8002e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e032      	b.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d139      	bne.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e033      	b.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2224      	movs	r2, #36	; 0x24
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eca:	6453      	str	r3, [r2, #68]	; 0x44
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40013800 	.word	0x40013800

08002ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b08f      	sub	sp, #60	; 0x3c
 8002efc:	af0a      	add	r7, sp, #40	; 0x28
 8002efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e116      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fd fee9 	bl	8000cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 ff0d 	bl	8004d68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	687e      	ldr	r6, [r7, #4]
 8002f56:	466d      	mov	r5, sp
 8002f58:	f106 0410 	add.w	r4, r6, #16
 8002f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f6c:	1d33      	adds	r3, r6, #4
 8002f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f001 fea1 	bl	8004cb8 <USB_CoreInit>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d7      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fefb 	bl	8004d8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e04a      	b.n	8003030 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333d      	adds	r3, #61	; 0x3d
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	333c      	adds	r3, #60	; 0x3c
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	b298      	uxth	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3342      	adds	r3, #66	; 0x42
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333f      	adds	r3, #63	; 0x3f
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3344      	adds	r3, #68	; 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3348      	adds	r3, #72	; 0x48
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3350      	adds	r3, #80	; 0x50
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3af      	bcc.n	8002f9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e044      	b.n	80030ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3b5      	bcc.n	8003040 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	687e      	ldr	r6, [r7, #4]
 80030dc:	466d      	mov	r5, sp
 80030de:	f106 0410 	add.w	r4, r6, #16
 80030e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f2:	1d33      	adds	r3, r6, #4
 80030f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f6:	6838      	ldr	r0, [r7, #0]
 80030f8:	f001 fe94 	bl	8004e24 <USB_DevInit>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e014      	b.n	8003138 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f80a 	bl	8003140 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f002 f84e 	bl	80051d2 <USB_DevDisconnect>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003140 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PCDEx_ActivateLPM+0x44>)
 8003170:	4313      	orrs	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	10000003 	.word	0x10000003

08003188 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40007000 	.word	0x40007000

080031a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a22      	ldr	r2, [pc, #136]	; (8003240 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_PWREx_EnableOverDrive+0x98>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d6:	f7fe ff11 	bl	8001ffc <HAL_GetTick>
 80031da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031dc:	e009      	b.n	80031f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031de:	f7fe ff0d 	bl	8001ffc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ec:	d901      	bls.n	80031f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e022      	b.n	8003238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d1ee      	bne.n	80031de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800320c:	f7fe fef6 	bl	8001ffc <HAL_GetTick>
 8003210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003212:	e009      	b.n	8003228 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003214:	f7fe fef2 	bl	8001ffc <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003222:	d901      	bls.n	8003228 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e007      	b.n	8003238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_PWREx_EnableOverDrive+0x9c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003234:	d1ee      	bne.n	8003214 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000

08003248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e29b      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8087 	beq.w	800337a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800326c:	4b96      	ldr	r3, [pc, #600]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b04      	cmp	r3, #4
 8003276:	d00c      	beq.n	8003292 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003278:	4b93      	ldr	r3, [pc, #588]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d112      	bne.n	80032aa <HAL_RCC_OscConfig+0x62>
 8003284:	4b90      	ldr	r3, [pc, #576]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d10b      	bne.n	80032aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003292:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d06c      	beq.n	8003378 <HAL_RCC_OscConfig+0x130>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d168      	bne.n	8003378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e275      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x7a>
 80032b4:	4b84      	ldr	r3, [pc, #528]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a83      	ldr	r2, [pc, #524]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e02e      	b.n	8003320 <HAL_RCC_OscConfig+0xd8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x9c>
 80032ca:	4b7f      	ldr	r3, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7e      	ldr	r2, [pc, #504]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xd8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0xc0>
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xd8>
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6b      	ldr	r2, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fe68 	bl	8001ffc <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fe64 	bl	8001ffc <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e229      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xe8>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fe54 	bl	8001ffc <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe fe50 	bl	8001ffc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e215      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x110>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d069      	beq.n	800345a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d11c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x190>
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d116      	bne.n	80033d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x17a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1e9      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	493d      	ldr	r1, [pc, #244]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	e040      	b.n	800345a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fe06 	bl	8001ffc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe fe02 	bl	8001ffc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1c7      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4929      	ldr	r1, [pc, #164]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
 8003426:	e018      	b.n	800345a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fde2 	bl	8001ffc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343c:	f7fe fdde 	bl	8001ffc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1a3      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d038      	beq.n	80034d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d019      	beq.n	80034a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fdbf 	bl	8001ffc <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003482:	f7fe fdbb 	bl	8001ffc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e180      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x23a>
 80034a0:	e01a      	b.n	80034d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_RCC_OscConfig+0x280>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fda5 	bl	8001ffc <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fda1 	bl	8001ffc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d903      	bls.n	80034cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e166      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
 80034c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	4b92      	ldr	r3, [pc, #584]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a4 	beq.w	800362e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b89      	ldr	r3, [pc, #548]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a88      	ldr	r2, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b86      	ldr	r3, [pc, #536]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350e:	4b83      	ldr	r3, [pc, #524]	; (800371c <HAL_RCC_OscConfig+0x4d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800351a:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x4d4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7f      	ldr	r2, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x4d4>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fe fd69 	bl	8001ffc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352e:	f7fe fd65 	bl	8001ffc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b64      	cmp	r3, #100	; 0x64
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e12a      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003540:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x4d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x31a>
 8003554:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a6f      	ldr	r2, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	e02d      	b.n	80035be <HAL_RCC_OscConfig+0x376>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x33c>
 800356a:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a6a      	ldr	r2, [pc, #424]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	4b68      	ldr	r3, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a67      	ldr	r2, [pc, #412]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	e01c      	b.n	80035be <HAL_RCC_OscConfig+0x376>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x35e>
 800358c:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a61      	ldr	r2, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x376>
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
 80035b2:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe fd19 	bl	8001ffc <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fd15 	bl	8001ffc <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0d8      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x386>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe fd03 	bl	8001ffc <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe fcff 	bl	8001ffc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0c2      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80ae 	beq.w	8003794 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003638:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d06d      	beq.n	8003720 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d14b      	bne.n	80036e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b32      	ldr	r3, [pc, #200]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a31      	ldr	r2, [pc, #196]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fcd0 	bl	8001ffc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fccc 	bl	8001ffc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e091      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	491b      	ldr	r1, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fc9e 	bl	8001ffc <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fc9a 	bl	8001ffc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e05f      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x47c>
 80036e2:	e057      	b.n	8003794 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fc84 	bl	8001ffc <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fc80 	bl	8001ffc <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e045      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_OscConfig+0x4d0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4b0>
 8003716:	e03d      	b.n	8003794 <HAL_RCC_OscConfig+0x54c>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x558>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d030      	beq.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d129      	bne.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d122      	bne.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003756:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d119      	bne.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d10f      	bne.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0d0      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d910      	bls.n	80037ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b67      	ldr	r3, [pc, #412]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	4965      	ldr	r1, [pc, #404]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b8      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d040      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d115      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e073      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e06b      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4936      	ldr	r1, [pc, #216]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe fbb0 	bl	8001ffc <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe fbac 	bl	8001ffc <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e053      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d210      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	4922      	ldr	r1, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e032      	b.n	800395e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f821 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490a      	ldr	r1, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1cc>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1d0>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1d4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fb0c 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00
 800396c:	40023800 	.word	0x40023800
 8003970:	0800733c 	.word	0x0800733c
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	2300      	movs	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003994:	4b67      	ldr	r3, [pc, #412]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d00d      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x40>
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	f200 80bd 	bhi.w	8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ae:	e0b7      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039b2:	60bb      	str	r3, [r7, #8]
      break;
 80039b4:	e0b7      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039b8:	60bb      	str	r3, [r7, #8]
      break;
 80039ba:	e0b4      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04d      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	461a      	mov	r2, r3
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	ea02 0800 	and.w	r8, r2, r0
 80039ea:	ea03 0901 	and.w	r9, r3, r1
 80039ee:	4640      	mov	r0, r8
 80039f0:	4649      	mov	r1, r9
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	014b      	lsls	r3, r1, #5
 80039fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a00:	0142      	lsls	r2, r0, #5
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	ebb0 0008 	subs.w	r0, r0, r8
 8003a0a:	eb61 0109 	sbc.w	r1, r1, r9
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	018b      	lsls	r3, r1, #6
 8003a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a1c:	0182      	lsls	r2, r0, #6
 8003a1e:	1a12      	subs	r2, r2, r0
 8003a20:	eb63 0301 	sbc.w	r3, r3, r1
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f04f 0100 	mov.w	r1, #0
 8003a2c:	00d9      	lsls	r1, r3, #3
 8003a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a32:	00d0      	lsls	r0, r2, #3
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	eb12 0208 	adds.w	r2, r2, r8
 8003a3c:	eb43 0309 	adc.w	r3, r3, r9
 8003a40:	f04f 0000 	mov.w	r0, #0
 8003a44:	f04f 0100 	mov.w	r1, #0
 8003a48:	0259      	lsls	r1, r3, #9
 8003a4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a4e:	0250      	lsls	r0, r2, #9
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	f7fc fc3e 	bl	80002e0 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e04a      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6e:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	461a      	mov	r2, r3
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	ea02 0400 	and.w	r4, r2, r0
 8003a86:	ea03 0501 	and.w	r5, r3, r1
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	014b      	lsls	r3, r1, #5
 8003a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a9c:	0142      	lsls	r2, r0, #5
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	1b00      	subs	r0, r0, r4
 8003aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	018b      	lsls	r3, r1, #6
 8003ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ab6:	0182      	lsls	r2, r0, #6
 8003ab8:	1a12      	subs	r2, r2, r0
 8003aba:	eb63 0301 	sbc.w	r3, r3, r1
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	00d9      	lsls	r1, r3, #3
 8003ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003acc:	00d0      	lsls	r0, r2, #3
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	1912      	adds	r2, r2, r4
 8003ad4:	eb45 0303 	adc.w	r3, r5, r3
 8003ad8:	f04f 0000 	mov.w	r0, #0
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	0299      	lsls	r1, r3, #10
 8003ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ae6:	0290      	lsls	r0, r2, #10
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4610      	mov	r0, r2
 8003aee:	4619      	mov	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	f7fc fbf2 	bl	80002e0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
      break;
 8003b1e:	e002      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b22:	60bb      	str	r3, [r7, #8]
      break;
 8003b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b26:	68bb      	ldr	r3, [r7, #8]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	007a1200 	.word	0x007a1200

08003b40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800734c 	.word	0x0800734c

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffdc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800734c 	.word	0x0800734c

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d012      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bd0:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	4964      	ldr	r1, [pc, #400]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d017      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c02:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	4959      	ldr	r1, [pc, #356]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	494a      	ldr	r1, [pc, #296]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 808b 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	4a39      	ldr	r2, [pc, #228]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	6413      	str	r3, [r2, #64]	; 0x40
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ca4:	4b35      	ldr	r3, [pc, #212]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a34      	ldr	r2, [pc, #208]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fe f9a4 	bl	8001ffc <HAL_GetTick>
 8003cb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fe f9a0 	bl	8001ffc <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e38f      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cca:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d035      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d02e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d114      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe f968 	bl	8001ffc <HAL_GetTick>
 8003d2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fe f964 	bl	8001ffc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e351      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ee      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5e:	d111      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	4901      	ldr	r1, [pc, #4]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	0ffffcff 	.word	0x0ffffcff
 8003d84:	4bb3      	ldr	r3, [pc, #716]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4ab2      	ldr	r2, [pc, #712]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d8e:	6093      	str	r3, [r2, #8]
 8003d90:	4bb0      	ldr	r3, [pc, #704]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	49ad      	ldr	r1, [pc, #692]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dae:	4ba9      	ldr	r3, [pc, #676]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db4:	4aa7      	ldr	r2, [pc, #668]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dbe:	4ba5      	ldr	r3, [pc, #660]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	49a2      	ldr	r1, [pc, #648]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ddc:	4b9d      	ldr	r3, [pc, #628]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dea:	499a      	ldr	r1, [pc, #616]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dfe:	4b95      	ldr	r3, [pc, #596]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e0c:	4991      	ldr	r1, [pc, #580]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e20:	4b8c      	ldr	r3, [pc, #560]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	4989      	ldr	r1, [pc, #548]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e42:	4b84      	ldr	r3, [pc, #528]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4980      	ldr	r1, [pc, #512]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e64:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4978      	ldr	r1, [pc, #480]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f023 020c 	bic.w	r2, r3, #12
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	496f      	ldr	r1, [pc, #444]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	4967      	ldr	r1, [pc, #412]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eca:	4b62      	ldr	r3, [pc, #392]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	495e      	ldr	r1, [pc, #376]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	4956      	ldr	r1, [pc, #344]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	494d      	ldr	r1, [pc, #308]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f30:	4b48      	ldr	r3, [pc, #288]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	4945      	ldr	r1, [pc, #276]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	493c      	ldr	r1, [pc, #240]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f82:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d011      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f96:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa4:	492b      	ldr	r1, [pc, #172]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe4:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004008:	4912      	ldr	r1, [pc, #72]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	4909      	ldr	r1, [pc, #36]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00f      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004046:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	4986      	ldr	r1, [pc, #536]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800406c:	4b81      	ldr	r3, [pc, #516]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004072:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407c:	497d      	ldr	r1, [pc, #500]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d006      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80d6 	beq.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004098:	4b76      	ldr	r3, [pc, #472]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a75      	ldr	r2, [pc, #468]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd ffaa 	bl	8001ffc <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040ac:	f7fd ffa6 	bl	8001ffc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e195      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d021      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11d      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040de:	4b65      	ldr	r3, [pc, #404]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f2:	0e1b      	lsrs	r3, r3, #24
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	071b      	lsls	r3, r3, #28
 8004112:	4958      	ldr	r1, [pc, #352]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004144:	d129      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004146:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004154:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	0f1b      	lsrs	r3, r3, #28
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	019a      	lsls	r2, r3, #6
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	493e      	ldr	r1, [pc, #248]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004188:	f023 021f 	bic.w	r2, r3, #31
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	3b01      	subs	r3, #1
 8004192:	4938      	ldr	r1, [pc, #224]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ac:	0e1b      	lsrs	r3, r3, #24
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b4:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	0f1b      	lsrs	r3, r3, #28
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	019a      	lsls	r2, r3, #6
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	431a      	orrs	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	4926      	ldr	r1, [pc, #152]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d011      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	019a      	lsls	r2, r3, #6
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	071b      	lsls	r3, r3, #28
 800420a:	491a      	ldr	r1, [pc, #104]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800421c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421e:	f7fd feed 	bl	8001ffc <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004226:	f7fd fee9 	bl	8001ffc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	; 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0d8      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	f040 80ce 	bne.w	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd fed0 	bl	8001ffc <HAL_GetTick>
 800425c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800425e:	e00b      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004260:	f7fd fecc 	bl	8001ffc <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d904      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0bb      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004278:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004284:	d0ec      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02e      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d12a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042ae:	4b51      	ldr	r3, [pc, #324]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042bc:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	0f1b      	lsrs	r3, r3, #28
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	019a      	lsls	r2, r3, #6
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	4944      	ldr	r1, [pc, #272]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042ea:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	3b01      	subs	r3, #1
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	493d      	ldr	r1, [pc, #244]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d022      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004318:	d11d      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4929      	ldr	r1, [pc, #164]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004370:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	019a      	lsls	r2, r3, #6
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	4917      	ldr	r1, [pc, #92]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4911      	ldr	r1, [pc, #68]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fe1c 	bl	8001ffc <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043c8:	f7fd fe18 	bl	8001ffc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e007      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e6:	d1ef      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e040      	b.n	800448c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fc0e 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f82c 	bl	8004494 <UART_SetConfig>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e022      	b.n	800448c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa82 	bl	8004958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb09 	bl	8004a9c <UART_CheckIdleState>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4ba7      	ldr	r3, [pc, #668]	; (800475c <UART_SetConfig+0x2c8>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a95      	ldr	r2, [pc, #596]	; (8004760 <UART_SetConfig+0x2cc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d120      	bne.n	8004552 <UART_SetConfig+0xbe>
 8004510:	4b94      	ldr	r3, [pc, #592]	; (8004764 <UART_SetConfig+0x2d0>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d816      	bhi.n	800454c <UART_SetConfig+0xb8>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x90>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004535 	.word	0x08004535
 8004528:	08004541 	.word	0x08004541
 800452c:	0800453b 	.word	0x0800453b
 8004530:	08004547 	.word	0x08004547
 8004534:	2301      	movs	r3, #1
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e14f      	b.n	80047da <UART_SetConfig+0x346>
 800453a:	2302      	movs	r3, #2
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e14c      	b.n	80047da <UART_SetConfig+0x346>
 8004540:	2304      	movs	r3, #4
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e149      	b.n	80047da <UART_SetConfig+0x346>
 8004546:	2308      	movs	r3, #8
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e146      	b.n	80047da <UART_SetConfig+0x346>
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e143      	b.n	80047da <UART_SetConfig+0x346>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a84      	ldr	r2, [pc, #528]	; (8004768 <UART_SetConfig+0x2d4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d132      	bne.n	80045c2 <UART_SetConfig+0x12e>
 800455c:	4b81      	ldr	r3, [pc, #516]	; (8004764 <UART_SetConfig+0x2d0>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d828      	bhi.n	80045bc <UART_SetConfig+0x128>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0xdc>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045bd 	.word	0x080045bd
 8004578:	080045bd 	.word	0x080045bd
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045b1 	.word	0x080045b1
 8004584:	080045bd 	.word	0x080045bd
 8004588:	080045bd 	.word	0x080045bd
 800458c:	080045bd 	.word	0x080045bd
 8004590:	080045ab 	.word	0x080045ab
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045bd 	.word	0x080045bd
 80045a0:	080045b7 	.word	0x080045b7
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e117      	b.n	80047da <UART_SetConfig+0x346>
 80045aa:	2302      	movs	r3, #2
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e114      	b.n	80047da <UART_SetConfig+0x346>
 80045b0:	2304      	movs	r3, #4
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e111      	b.n	80047da <UART_SetConfig+0x346>
 80045b6:	2308      	movs	r3, #8
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e10e      	b.n	80047da <UART_SetConfig+0x346>
 80045bc:	2310      	movs	r3, #16
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e10b      	b.n	80047da <UART_SetConfig+0x346>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a69      	ldr	r2, [pc, #420]	; (800476c <UART_SetConfig+0x2d8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d120      	bne.n	800460e <UART_SetConfig+0x17a>
 80045cc:	4b65      	ldr	r3, [pc, #404]	; (8004764 <UART_SetConfig+0x2d0>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045d6:	2b30      	cmp	r3, #48	; 0x30
 80045d8:	d013      	beq.n	8004602 <UART_SetConfig+0x16e>
 80045da:	2b30      	cmp	r3, #48	; 0x30
 80045dc:	d814      	bhi.n	8004608 <UART_SetConfig+0x174>
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d009      	beq.n	80045f6 <UART_SetConfig+0x162>
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d810      	bhi.n	8004608 <UART_SetConfig+0x174>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <UART_SetConfig+0x15c>
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d006      	beq.n	80045fc <UART_SetConfig+0x168>
 80045ee:	e00b      	b.n	8004608 <UART_SetConfig+0x174>
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0f1      	b.n	80047da <UART_SetConfig+0x346>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e0ee      	b.n	80047da <UART_SetConfig+0x346>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0eb      	b.n	80047da <UART_SetConfig+0x346>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e0e8      	b.n	80047da <UART_SetConfig+0x346>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e0e5      	b.n	80047da <UART_SetConfig+0x346>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a57      	ldr	r2, [pc, #348]	; (8004770 <UART_SetConfig+0x2dc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d120      	bne.n	800465a <UART_SetConfig+0x1c6>
 8004618:	4b52      	ldr	r3, [pc, #328]	; (8004764 <UART_SetConfig+0x2d0>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004622:	2bc0      	cmp	r3, #192	; 0xc0
 8004624:	d013      	beq.n	800464e <UART_SetConfig+0x1ba>
 8004626:	2bc0      	cmp	r3, #192	; 0xc0
 8004628:	d814      	bhi.n	8004654 <UART_SetConfig+0x1c0>
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d009      	beq.n	8004642 <UART_SetConfig+0x1ae>
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d810      	bhi.n	8004654 <UART_SetConfig+0x1c0>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <UART_SetConfig+0x1a8>
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d006      	beq.n	8004648 <UART_SetConfig+0x1b4>
 800463a:	e00b      	b.n	8004654 <UART_SetConfig+0x1c0>
 800463c:	2300      	movs	r3, #0
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0cb      	b.n	80047da <UART_SetConfig+0x346>
 8004642:	2302      	movs	r3, #2
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e0c8      	b.n	80047da <UART_SetConfig+0x346>
 8004648:	2304      	movs	r3, #4
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e0c5      	b.n	80047da <UART_SetConfig+0x346>
 800464e:	2308      	movs	r3, #8
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e0c2      	b.n	80047da <UART_SetConfig+0x346>
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e0bf      	b.n	80047da <UART_SetConfig+0x346>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a45      	ldr	r2, [pc, #276]	; (8004774 <UART_SetConfig+0x2e0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d125      	bne.n	80046b0 <UART_SetConfig+0x21c>
 8004664:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <UART_SetConfig+0x2d0>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004672:	d017      	beq.n	80046a4 <UART_SetConfig+0x210>
 8004674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004678:	d817      	bhi.n	80046aa <UART_SetConfig+0x216>
 800467a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467e:	d00b      	beq.n	8004698 <UART_SetConfig+0x204>
 8004680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004684:	d811      	bhi.n	80046aa <UART_SetConfig+0x216>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <UART_SetConfig+0x1fe>
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d006      	beq.n	800469e <UART_SetConfig+0x20a>
 8004690:	e00b      	b.n	80046aa <UART_SetConfig+0x216>
 8004692:	2300      	movs	r3, #0
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0a0      	b.n	80047da <UART_SetConfig+0x346>
 8004698:	2302      	movs	r3, #2
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e09d      	b.n	80047da <UART_SetConfig+0x346>
 800469e:	2304      	movs	r3, #4
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e09a      	b.n	80047da <UART_SetConfig+0x346>
 80046a4:	2308      	movs	r3, #8
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e097      	b.n	80047da <UART_SetConfig+0x346>
 80046aa:	2310      	movs	r3, #16
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e094      	b.n	80047da <UART_SetConfig+0x346>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a30      	ldr	r2, [pc, #192]	; (8004778 <UART_SetConfig+0x2e4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d125      	bne.n	8004706 <UART_SetConfig+0x272>
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <UART_SetConfig+0x2d0>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c8:	d017      	beq.n	80046fa <UART_SetConfig+0x266>
 80046ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ce:	d817      	bhi.n	8004700 <UART_SetConfig+0x26c>
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d4:	d00b      	beq.n	80046ee <UART_SetConfig+0x25a>
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d811      	bhi.n	8004700 <UART_SetConfig+0x26c>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <UART_SetConfig+0x254>
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d006      	beq.n	80046f4 <UART_SetConfig+0x260>
 80046e6:	e00b      	b.n	8004700 <UART_SetConfig+0x26c>
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e075      	b.n	80047da <UART_SetConfig+0x346>
 80046ee:	2302      	movs	r3, #2
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e072      	b.n	80047da <UART_SetConfig+0x346>
 80046f4:	2304      	movs	r3, #4
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e06f      	b.n	80047da <UART_SetConfig+0x346>
 80046fa:	2308      	movs	r3, #8
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e06c      	b.n	80047da <UART_SetConfig+0x346>
 8004700:	2310      	movs	r3, #16
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e069      	b.n	80047da <UART_SetConfig+0x346>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <UART_SetConfig+0x2e8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d137      	bne.n	8004780 <UART_SetConfig+0x2ec>
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <UART_SetConfig+0x2d0>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800471a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800471e:	d017      	beq.n	8004750 <UART_SetConfig+0x2bc>
 8004720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004724:	d817      	bhi.n	8004756 <UART_SetConfig+0x2c2>
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	d00b      	beq.n	8004744 <UART_SetConfig+0x2b0>
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004730:	d811      	bhi.n	8004756 <UART_SetConfig+0x2c2>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <UART_SetConfig+0x2aa>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d006      	beq.n	800474a <UART_SetConfig+0x2b6>
 800473c:	e00b      	b.n	8004756 <UART_SetConfig+0x2c2>
 800473e:	2300      	movs	r3, #0
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e04a      	b.n	80047da <UART_SetConfig+0x346>
 8004744:	2302      	movs	r3, #2
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e047      	b.n	80047da <UART_SetConfig+0x346>
 800474a:	2304      	movs	r3, #4
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e044      	b.n	80047da <UART_SetConfig+0x346>
 8004750:	2308      	movs	r3, #8
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e041      	b.n	80047da <UART_SetConfig+0x346>
 8004756:	2310      	movs	r3, #16
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e03e      	b.n	80047da <UART_SetConfig+0x346>
 800475c:	efff69f3 	.word	0xefff69f3
 8004760:	40011000 	.word	0x40011000
 8004764:	40023800 	.word	0x40023800
 8004768:	40004400 	.word	0x40004400
 800476c:	40004800 	.word	0x40004800
 8004770:	40004c00 	.word	0x40004c00
 8004774:	40005000 	.word	0x40005000
 8004778:	40011400 	.word	0x40011400
 800477c:	40007800 	.word	0x40007800
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a71      	ldr	r2, [pc, #452]	; (800494c <UART_SetConfig+0x4b8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d125      	bne.n	80047d6 <UART_SetConfig+0x342>
 800478a:	4b71      	ldr	r3, [pc, #452]	; (8004950 <UART_SetConfig+0x4bc>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004794:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004798:	d017      	beq.n	80047ca <UART_SetConfig+0x336>
 800479a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800479e:	d817      	bhi.n	80047d0 <UART_SetConfig+0x33c>
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d00b      	beq.n	80047be <UART_SetConfig+0x32a>
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d811      	bhi.n	80047d0 <UART_SetConfig+0x33c>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x324>
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d006      	beq.n	80047c4 <UART_SetConfig+0x330>
 80047b6:	e00b      	b.n	80047d0 <UART_SetConfig+0x33c>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x346>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e00a      	b.n	80047da <UART_SetConfig+0x346>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e007      	b.n	80047da <UART_SetConfig+0x346>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e004      	b.n	80047da <UART_SetConfig+0x346>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e001      	b.n	80047da <UART_SetConfig+0x346>
 80047d6:	2310      	movs	r3, #16
 80047d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e2:	d15a      	bne.n	800489a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d827      	bhi.n	800483a <UART_SetConfig+0x3a6>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0x35c>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004815 	.word	0x08004815
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004825 	.word	0x08004825
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	0800482b 	.word	0x0800482b
 8004804:	0800483b 	.word	0x0800483b
 8004808:	0800483b 	.word	0x0800483b
 800480c:	0800483b 	.word	0x0800483b
 8004810:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004814:	f7ff f9a0 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8004818:	61b8      	str	r0, [r7, #24]
        break;
 800481a:	e013      	b.n	8004844 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800481c:	f7ff f9b0 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8004820:	61b8      	str	r0, [r7, #24]
        break;
 8004822:	e00f      	b.n	8004844 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <UART_SetConfig+0x4c0>)
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e00c      	b.n	8004844 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7ff f8a7 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800482e:	61b8      	str	r0, [r7, #24]
        break;
 8004830:	e008      	b.n	8004844 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e004      	b.n	8004844 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	77bb      	strb	r3, [r7, #30]
        break;
 8004842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d074      	beq.n	8004934 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	005a      	lsls	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d916      	bls.n	8004894 <UART_SetConfig+0x400>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d212      	bcs.n	8004894 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	b29a      	uxth	r2, r3
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	4313      	orrs	r3, r2
 8004888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	89fa      	ldrh	r2, [r7, #14]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e04f      	b.n	8004934 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	77bb      	strb	r3, [r7, #30]
 8004898:	e04c      	b.n	8004934 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489a:	7ffb      	ldrb	r3, [r7, #31]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d828      	bhi.n	80048f2 <UART_SetConfig+0x45e>
 80048a0:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x414>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048f3 	.word	0x080048f3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7ff f944 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80048d0:	61b8      	str	r0, [r7, #24]
        break;
 80048d2:	e013      	b.n	80048fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7ff f954 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e00f      	b.n	80048fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <UART_SetConfig+0x4c0>)
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7ff f84b 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80048e6:	61b8      	str	r0, [r7, #24]
        break;
 80048e8:	e008      	b.n	80048fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	77bb      	strb	r3, [r7, #30]
        break;
 80048fa:	bf00      	nop
    }

    if (pclk != 0U)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085a      	lsrs	r2, r3, #1
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d909      	bls.n	8004930 <UART_SetConfig+0x49c>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d205      	bcs.n	8004930 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e001      	b.n	8004934 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004940:	7fbb      	ldrb	r3, [r7, #30]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40007c00 	.word	0x40007c00
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400

08004958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01a      	beq.n	8004a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a56:	d10a      	bne.n	8004a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  }
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aac:	f7fd faa6 	bl	8001ffc <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10e      	bne.n	8004ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f82d 	bl	8004b2e <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e023      	b.n	8004b26 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d10e      	bne.n	8004b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f817 	bl	8004b2e <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e00d      	b.n	8004b26 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b09c      	sub	sp, #112	; 0x70
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3e:	e0a5      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	f000 80a1 	beq.w	8004c8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fd fa57 	bl	8001ffc <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d13e      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b74:	667b      	str	r3, [r7, #100]	; 0x64
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e6      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e5      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e067      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d04f      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfa:	d147      	bne.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	613b      	str	r3, [r7, #16]
   return(result);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c58:	623a      	str	r2, [r7, #32]
 8004c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	6a3a      	ldr	r2, [r7, #32]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e010      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f43f af4a 	beq.w	8004b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3770      	adds	r7, #112	; 0x70
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb8:	b084      	sub	sp, #16
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	f107 001c 	add.w	r0, r7, #28
 8004cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d120      	bne.n	8004d12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <USB_CoreInit+0xac>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa92 	bl	8005230 <USB_CoreReset>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e010      	b.n	8004d34 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa86 	bl	8005230 <USB_CoreReset>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10b      	bne.n	8004d52 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f043 0206 	orr.w	r2, r3, #6
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d5e:	b004      	add	sp, #16
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	ffbdffbf 	.word	0xffbdffbf

08004d68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 0201 	bic.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d115      	bne.n	8004dd8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004db8:	2001      	movs	r0, #1
 8004dba:	f7fd f92b 	bl	8002014 <HAL_Delay>
      ms++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fa25 	bl	8005214 <USB_GetMode>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d01e      	beq.n	8004e0e <USB_SetCurrentMode+0x84>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b31      	cmp	r3, #49	; 0x31
 8004dd4:	d9f0      	bls.n	8004db8 <USB_SetCurrentMode+0x2e>
 8004dd6:	e01a      	b.n	8004e0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d115      	bne.n	8004e0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dea:	2001      	movs	r0, #1
 8004dec:	f7fd f912 	bl	8002014 <HAL_Delay>
      ms++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa0c 	bl	8005214 <USB_GetMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <USB_SetCurrentMode+0x84>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b31      	cmp	r3, #49	; 0x31
 8004e06:	d9f0      	bls.n	8004dea <USB_SetCurrentMode+0x60>
 8004e08:	e001      	b.n	8004e0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e005      	b.n	8004e1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b32      	cmp	r3, #50	; 0x32
 8004e12:	d101      	bne.n	8004e18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e24:	b084      	sub	sp, #16
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b086      	sub	sp, #24
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e009      	b.n	8004e58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	3340      	adds	r3, #64	; 0x40
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3301      	adds	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b0e      	cmp	r3, #14
 8004e5c:	d9f2      	bls.n	8004e44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11c      	bne.n	8004e9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e72:	f043 0302 	orr.w	r3, r3, #2
 8004e76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e005      	b.n	8004eaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	680b      	ldr	r3, [r1, #0]
 8004ec8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10c      	bne.n	8004eea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f961 	bl	80051a0 <USB_SetDevSpeed>
 8004ede:	e008      	b.n	8004ef2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f95c 	bl	80051a0 <USB_SetDevSpeed>
 8004ee8:	e003      	b.n	8004ef2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eea:	2103      	movs	r1, #3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f957 	bl	80051a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8f3 	bl	80050e0 <USB_FlushTxFifo>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f91d 	bl	8005144 <USB_FlushRxFifo>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	461a      	mov	r2, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e043      	b.n	8004fc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f54:	d118      	bne.n	8004f88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e013      	b.n	8004f9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e008      	b.n	8004f9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3b7      	bcc.n	8004f3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e043      	b.n	800505c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fea:	d118      	bne.n	800501e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e013      	b.n	8005030 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e008      	b.n	8005030 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	2300      	movs	r3, #0
 800502e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	461a      	mov	r2, r3
 8005050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3301      	adds	r3, #1
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d3b7      	bcc.n	8004fd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f043 0210 	orr.w	r2, r3, #16
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <USB_DevInit+0x2b4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f043 0208 	orr.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <USB_DevInit+0x2b8>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050d4:	b004      	add	sp, #16
 80050d6:	4770      	bx	lr
 80050d8:	803c3800 	.word	0x803c3800
 80050dc:	40000004 	.word	0x40000004

080050e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	4a12      	ldr	r2, [pc, #72]	; (8005140 <USB_FlushTxFifo+0x60>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e01a      	b.n	8005134 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	daf3      	bge.n	80050ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <USB_FlushTxFifo+0x60>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d0f1      	beq.n	8005116 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	00030d40 	.word	0x00030d40

08005144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3301      	adds	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4a11      	ldr	r2, [pc, #68]	; (800519c <USB_FlushRxFifo+0x58>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e017      	b.n	8005190 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	daf3      	bge.n	8005150 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2210      	movs	r2, #16
 8005170:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <USB_FlushRxFifo+0x58>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e006      	b.n	8005190 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b10      	cmp	r3, #16
 800518c:	d0f1      	beq.n	8005172 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	00030d40 	.word	0x00030d40

080051a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0301 	and.w	r3, r3, #1
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <USB_CoreReset+0x60>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e01a      	b.n	8005282 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	daf3      	bge.n	800523c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	4a09      	ldr	r2, [pc, #36]	; (8005290 <USB_CoreReset+0x60>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d0f1      	beq.n	8005264 <USB_CoreReset+0x34>

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	00030d40 	.word	0x00030d40

08005294 <__errno>:
 8005294:	4b01      	ldr	r3, [pc, #4]	; (800529c <__errno+0x8>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4d0d      	ldr	r5, [pc, #52]	; (80052d8 <__libc_init_array+0x38>)
 80052a4:	4c0d      	ldr	r4, [pc, #52]	; (80052dc <__libc_init_array+0x3c>)
 80052a6:	1b64      	subs	r4, r4, r5
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	2600      	movs	r6, #0
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	4d0b      	ldr	r5, [pc, #44]	; (80052e0 <__libc_init_array+0x40>)
 80052b2:	4c0c      	ldr	r4, [pc, #48]	; (80052e4 <__libc_init_array+0x44>)
 80052b4:	f001 fe1a 	bl	8006eec <_init>
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	2600      	movs	r6, #0
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	08013600 	.word	0x08013600
 80052dc:	08013600 	.word	0x08013600
 80052e0:	08013600 	.word	0x08013600
 80052e4:	08013604 	.word	0x08013604

080052e8 <malloc>:
 80052e8:	4b02      	ldr	r3, [pc, #8]	; (80052f4 <malloc+0xc>)
 80052ea:	4601      	mov	r1, r0
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f000 b85b 	b.w	80053a8 <_malloc_r>
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c

080052f8 <memset>:
 80052f8:	4402      	add	r2, r0
 80052fa:	4603      	mov	r3, r0
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d100      	bne.n	8005302 <memset+0xa>
 8005300:	4770      	bx	lr
 8005302:	f803 1b01 	strb.w	r1, [r3], #1
 8005306:	e7f9      	b.n	80052fc <memset+0x4>

08005308 <_free_r>:
 8005308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800530a:	2900      	cmp	r1, #0
 800530c:	d048      	beq.n	80053a0 <_free_r+0x98>
 800530e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005312:	9001      	str	r0, [sp, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f1a1 0404 	sub.w	r4, r1, #4
 800531a:	bfb8      	it	lt
 800531c:	18e4      	addlt	r4, r4, r3
 800531e:	f000 fc19 	bl	8005b54 <__malloc_lock>
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <_free_r+0x9c>)
 8005324:	9801      	ldr	r0, [sp, #4]
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	4615      	mov	r5, r2
 800532a:	b933      	cbnz	r3, 800533a <_free_r+0x32>
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	6014      	str	r4, [r2, #0]
 8005330:	b003      	add	sp, #12
 8005332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005336:	f000 bc13 	b.w	8005b60 <__malloc_unlock>
 800533a:	42a3      	cmp	r3, r4
 800533c:	d90b      	bls.n	8005356 <_free_r+0x4e>
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	1862      	adds	r2, r4, r1
 8005342:	4293      	cmp	r3, r2
 8005344:	bf04      	itt	eq
 8005346:	681a      	ldreq	r2, [r3, #0]
 8005348:	685b      	ldreq	r3, [r3, #4]
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	bf04      	itt	eq
 800534e:	1852      	addeq	r2, r2, r1
 8005350:	6022      	streq	r2, [r4, #0]
 8005352:	602c      	str	r4, [r5, #0]
 8005354:	e7ec      	b.n	8005330 <_free_r+0x28>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x58>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x4e>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1855      	adds	r5, r2, r1
 8005364:	42a5      	cmp	r5, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x78>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	4421      	add	r1, r4
 800536c:	1854      	adds	r4, r2, r1
 800536e:	42a3      	cmp	r3, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1dd      	bne.n	8005330 <_free_r+0x28>
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4421      	add	r1, r4
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	e7d7      	b.n	8005330 <_free_r+0x28>
 8005380:	d902      	bls.n	8005388 <_free_r+0x80>
 8005382:	230c      	movs	r3, #12
 8005384:	6003      	str	r3, [r0, #0]
 8005386:	e7d3      	b.n	8005330 <_free_r+0x28>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7c7      	b.n	8005330 <_free_r+0x28>
 80053a0:	b003      	add	sp, #12
 80053a2:	bd30      	pop	{r4, r5, pc}
 80053a4:	20002090 	.word	0x20002090

080053a8 <_malloc_r>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	1ccd      	adds	r5, r1, #3
 80053ac:	f025 0503 	bic.w	r5, r5, #3
 80053b0:	3508      	adds	r5, #8
 80053b2:	2d0c      	cmp	r5, #12
 80053b4:	bf38      	it	cc
 80053b6:	250c      	movcc	r5, #12
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	4606      	mov	r6, r0
 80053bc:	db01      	blt.n	80053c2 <_malloc_r+0x1a>
 80053be:	42a9      	cmp	r1, r5
 80053c0:	d903      	bls.n	80053ca <_malloc_r+0x22>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	2000      	movs	r0, #0
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ca:	f000 fbc3 	bl	8005b54 <__malloc_lock>
 80053ce:	4921      	ldr	r1, [pc, #132]	; (8005454 <_malloc_r+0xac>)
 80053d0:	680a      	ldr	r2, [r1, #0]
 80053d2:	4614      	mov	r4, r2
 80053d4:	b99c      	cbnz	r4, 80053fe <_malloc_r+0x56>
 80053d6:	4f20      	ldr	r7, [pc, #128]	; (8005458 <_malloc_r+0xb0>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	b923      	cbnz	r3, 80053e6 <_malloc_r+0x3e>
 80053dc:	4621      	mov	r1, r4
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f8ca 	bl	8005578 <_sbrk_r>
 80053e4:	6038      	str	r0, [r7, #0]
 80053e6:	4629      	mov	r1, r5
 80053e8:	4630      	mov	r0, r6
 80053ea:	f000 f8c5 	bl	8005578 <_sbrk_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d123      	bne.n	800543a <_malloc_r+0x92>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 fbb2 	bl	8005b60 <__malloc_unlock>
 80053fc:	e7e3      	b.n	80053c6 <_malloc_r+0x1e>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	1b5b      	subs	r3, r3, r5
 8005402:	d417      	bmi.n	8005434 <_malloc_r+0x8c>
 8005404:	2b0b      	cmp	r3, #11
 8005406:	d903      	bls.n	8005410 <_malloc_r+0x68>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	441c      	add	r4, r3
 800540c:	6025      	str	r5, [r4, #0]
 800540e:	e004      	b.n	800541a <_malloc_r+0x72>
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	42a2      	cmp	r2, r4
 8005414:	bf0c      	ite	eq
 8005416:	600b      	streq	r3, [r1, #0]
 8005418:	6053      	strne	r3, [r2, #4]
 800541a:	4630      	mov	r0, r6
 800541c:	f000 fba0 	bl	8005b60 <__malloc_unlock>
 8005420:	f104 000b 	add.w	r0, r4, #11
 8005424:	1d23      	adds	r3, r4, #4
 8005426:	f020 0007 	bic.w	r0, r0, #7
 800542a:	1ac2      	subs	r2, r0, r3
 800542c:	d0cc      	beq.n	80053c8 <_malloc_r+0x20>
 800542e:	1a1b      	subs	r3, r3, r0
 8005430:	50a3      	str	r3, [r4, r2]
 8005432:	e7c9      	b.n	80053c8 <_malloc_r+0x20>
 8005434:	4622      	mov	r2, r4
 8005436:	6864      	ldr	r4, [r4, #4]
 8005438:	e7cc      	b.n	80053d4 <_malloc_r+0x2c>
 800543a:	1cc4      	adds	r4, r0, #3
 800543c:	f024 0403 	bic.w	r4, r4, #3
 8005440:	42a0      	cmp	r0, r4
 8005442:	d0e3      	beq.n	800540c <_malloc_r+0x64>
 8005444:	1a21      	subs	r1, r4, r0
 8005446:	4630      	mov	r0, r6
 8005448:	f000 f896 	bl	8005578 <_sbrk_r>
 800544c:	3001      	adds	r0, #1
 800544e:	d1dd      	bne.n	800540c <_malloc_r+0x64>
 8005450:	e7cf      	b.n	80053f2 <_malloc_r+0x4a>
 8005452:	bf00      	nop
 8005454:	20002090 	.word	0x20002090
 8005458:	20002094 	.word	0x20002094

0800545c <iprintf>:
 800545c:	b40f      	push	{r0, r1, r2, r3}
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <iprintf+0x2c>)
 8005460:	b513      	push	{r0, r1, r4, lr}
 8005462:	681c      	ldr	r4, [r3, #0]
 8005464:	b124      	cbz	r4, 8005470 <iprintf+0x14>
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	b913      	cbnz	r3, 8005470 <iprintf+0x14>
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fa6e 	bl	800594c <__sinit>
 8005470:	ab05      	add	r3, sp, #20
 8005472:	9a04      	ldr	r2, [sp, #16]
 8005474:	68a1      	ldr	r1, [r4, #8]
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fba1 	bl	8005bc0 <_vfiprintf_r>
 800547e:	b002      	add	sp, #8
 8005480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005484:	b004      	add	sp, #16
 8005486:	4770      	bx	lr
 8005488:	2000000c 	.word	0x2000000c

0800548c <_puts_r>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	460e      	mov	r6, r1
 8005490:	4605      	mov	r5, r0
 8005492:	b118      	cbz	r0, 800549c <_puts_r+0x10>
 8005494:	6983      	ldr	r3, [r0, #24]
 8005496:	b90b      	cbnz	r3, 800549c <_puts_r+0x10>
 8005498:	f000 fa58 	bl	800594c <__sinit>
 800549c:	69ab      	ldr	r3, [r5, #24]
 800549e:	68ac      	ldr	r4, [r5, #8]
 80054a0:	b913      	cbnz	r3, 80054a8 <_puts_r+0x1c>
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fa52 	bl	800594c <__sinit>
 80054a8:	4b2c      	ldr	r3, [pc, #176]	; (800555c <_puts_r+0xd0>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d120      	bne.n	80054f0 <_puts_r+0x64>
 80054ae:	686c      	ldr	r4, [r5, #4]
 80054b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b2:	07db      	lsls	r3, r3, #31
 80054b4:	d405      	bmi.n	80054c2 <_puts_r+0x36>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	0598      	lsls	r0, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_puts_r+0x36>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f000 fae3 	bl	8005a88 <__retarget_lock_acquire_recursive>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	0719      	lsls	r1, r3, #28
 80054c6:	d51d      	bpl.n	8005504 <_puts_r+0x78>
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	b1db      	cbz	r3, 8005504 <_puts_r+0x78>
 80054cc:	3e01      	subs	r6, #1
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60a3      	str	r3, [r4, #8]
 80054d8:	bb39      	cbnz	r1, 800552a <_puts_r+0x9e>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da38      	bge.n	8005550 <_puts_r+0xc4>
 80054de:	4622      	mov	r2, r4
 80054e0:	210a      	movs	r1, #10
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f858 	bl	8005598 <__swbuf_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d011      	beq.n	8005510 <_puts_r+0x84>
 80054ec:	250a      	movs	r5, #10
 80054ee:	e011      	b.n	8005514 <_puts_r+0x88>
 80054f0:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <_puts_r+0xd4>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d101      	bne.n	80054fa <_puts_r+0x6e>
 80054f6:	68ac      	ldr	r4, [r5, #8]
 80054f8:	e7da      	b.n	80054b0 <_puts_r+0x24>
 80054fa:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <_puts_r+0xd8>)
 80054fc:	429c      	cmp	r4, r3
 80054fe:	bf08      	it	eq
 8005500:	68ec      	ldreq	r4, [r5, #12]
 8005502:	e7d5      	b.n	80054b0 <_puts_r+0x24>
 8005504:	4621      	mov	r1, r4
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f898 	bl	800563c <__swsetup_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	d0dd      	beq.n	80054cc <_puts_r+0x40>
 8005510:	f04f 35ff 	mov.w	r5, #4294967295
 8005514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005516:	07da      	lsls	r2, r3, #31
 8005518:	d405      	bmi.n	8005526 <_puts_r+0x9a>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	059b      	lsls	r3, r3, #22
 800551e:	d402      	bmi.n	8005526 <_puts_r+0x9a>
 8005520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005522:	f000 fab2 	bl	8005a8a <__retarget_lock_release_recursive>
 8005526:	4628      	mov	r0, r5
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	2b00      	cmp	r3, #0
 800552c:	da04      	bge.n	8005538 <_puts_r+0xac>
 800552e:	69a2      	ldr	r2, [r4, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	dc06      	bgt.n	8005542 <_puts_r+0xb6>
 8005534:	290a      	cmp	r1, #10
 8005536:	d004      	beq.n	8005542 <_puts_r+0xb6>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	7019      	strb	r1, [r3, #0]
 8005540:	e7c5      	b.n	80054ce <_puts_r+0x42>
 8005542:	4622      	mov	r2, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f827 	bl	8005598 <__swbuf_r>
 800554a:	3001      	adds	r0, #1
 800554c:	d1bf      	bne.n	80054ce <_puts_r+0x42>
 800554e:	e7df      	b.n	8005510 <_puts_r+0x84>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	250a      	movs	r5, #10
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	701d      	strb	r5, [r3, #0]
 800555a:	e7db      	b.n	8005514 <_puts_r+0x88>
 800555c:	080133a8 	.word	0x080133a8
 8005560:	080133c8 	.word	0x080133c8
 8005564:	08013388 	.word	0x08013388

08005568 <puts>:
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <puts+0xc>)
 800556a:	4601      	mov	r1, r0
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	f7ff bf8d 	b.w	800548c <_puts_r>
 8005572:	bf00      	nop
 8005574:	2000000c 	.word	0x2000000c

08005578 <_sbrk_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	; (8005594 <_sbrk_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fb fd06 	bl	8000f94 <_sbrk>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_sbrk_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_sbrk_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200025e0 	.word	0x200025e0

08005598 <__swbuf_r>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	460e      	mov	r6, r1
 800559c:	4614      	mov	r4, r2
 800559e:	4605      	mov	r5, r0
 80055a0:	b118      	cbz	r0, 80055aa <__swbuf_r+0x12>
 80055a2:	6983      	ldr	r3, [r0, #24]
 80055a4:	b90b      	cbnz	r3, 80055aa <__swbuf_r+0x12>
 80055a6:	f000 f9d1 	bl	800594c <__sinit>
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <__swbuf_r+0x98>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	d12b      	bne.n	8005608 <__swbuf_r+0x70>
 80055b0:	686c      	ldr	r4, [r5, #4]
 80055b2:	69a3      	ldr	r3, [r4, #24]
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	071a      	lsls	r2, r3, #28
 80055ba:	d52f      	bpl.n	800561c <__swbuf_r+0x84>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	b36b      	cbz	r3, 800561c <__swbuf_r+0x84>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	1ac0      	subs	r0, r0, r3
 80055c6:	6963      	ldr	r3, [r4, #20]
 80055c8:	b2f6      	uxtb	r6, r6
 80055ca:	4283      	cmp	r3, r0
 80055cc:	4637      	mov	r7, r6
 80055ce:	dc04      	bgt.n	80055da <__swbuf_r+0x42>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f926 	bl	8005824 <_fflush_r>
 80055d8:	bb30      	cbnz	r0, 8005628 <__swbuf_r+0x90>
 80055da:	68a3      	ldr	r3, [r4, #8]
 80055dc:	3b01      	subs	r3, #1
 80055de:	60a3      	str	r3, [r4, #8]
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	6022      	str	r2, [r4, #0]
 80055e6:	701e      	strb	r6, [r3, #0]
 80055e8:	6963      	ldr	r3, [r4, #20]
 80055ea:	3001      	adds	r0, #1
 80055ec:	4283      	cmp	r3, r0
 80055ee:	d004      	beq.n	80055fa <__swbuf_r+0x62>
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	07db      	lsls	r3, r3, #31
 80055f4:	d506      	bpl.n	8005604 <__swbuf_r+0x6c>
 80055f6:	2e0a      	cmp	r6, #10
 80055f8:	d104      	bne.n	8005604 <__swbuf_r+0x6c>
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 f911 	bl	8005824 <_fflush_r>
 8005602:	b988      	cbnz	r0, 8005628 <__swbuf_r+0x90>
 8005604:	4638      	mov	r0, r7
 8005606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <__swbuf_r+0x9c>)
 800560a:	429c      	cmp	r4, r3
 800560c:	d101      	bne.n	8005612 <__swbuf_r+0x7a>
 800560e:	68ac      	ldr	r4, [r5, #8]
 8005610:	e7cf      	b.n	80055b2 <__swbuf_r+0x1a>
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <__swbuf_r+0xa0>)
 8005614:	429c      	cmp	r4, r3
 8005616:	bf08      	it	eq
 8005618:	68ec      	ldreq	r4, [r5, #12]
 800561a:	e7ca      	b.n	80055b2 <__swbuf_r+0x1a>
 800561c:	4621      	mov	r1, r4
 800561e:	4628      	mov	r0, r5
 8005620:	f000 f80c 	bl	800563c <__swsetup_r>
 8005624:	2800      	cmp	r0, #0
 8005626:	d0cb      	beq.n	80055c0 <__swbuf_r+0x28>
 8005628:	f04f 37ff 	mov.w	r7, #4294967295
 800562c:	e7ea      	b.n	8005604 <__swbuf_r+0x6c>
 800562e:	bf00      	nop
 8005630:	080133a8 	.word	0x080133a8
 8005634:	080133c8 	.word	0x080133c8
 8005638:	08013388 	.word	0x08013388

0800563c <__swsetup_r>:
 800563c:	4b32      	ldr	r3, [pc, #200]	; (8005708 <__swsetup_r+0xcc>)
 800563e:	b570      	push	{r4, r5, r6, lr}
 8005640:	681d      	ldr	r5, [r3, #0]
 8005642:	4606      	mov	r6, r0
 8005644:	460c      	mov	r4, r1
 8005646:	b125      	cbz	r5, 8005652 <__swsetup_r+0x16>
 8005648:	69ab      	ldr	r3, [r5, #24]
 800564a:	b913      	cbnz	r3, 8005652 <__swsetup_r+0x16>
 800564c:	4628      	mov	r0, r5
 800564e:	f000 f97d 	bl	800594c <__sinit>
 8005652:	4b2e      	ldr	r3, [pc, #184]	; (800570c <__swsetup_r+0xd0>)
 8005654:	429c      	cmp	r4, r3
 8005656:	d10f      	bne.n	8005678 <__swsetup_r+0x3c>
 8005658:	686c      	ldr	r4, [r5, #4]
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005660:	0719      	lsls	r1, r3, #28
 8005662:	d42c      	bmi.n	80056be <__swsetup_r+0x82>
 8005664:	06dd      	lsls	r5, r3, #27
 8005666:	d411      	bmi.n	800568c <__swsetup_r+0x50>
 8005668:	2309      	movs	r3, #9
 800566a:	6033      	str	r3, [r6, #0]
 800566c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	e03e      	b.n	80056f6 <__swsetup_r+0xba>
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <__swsetup_r+0xd4>)
 800567a:	429c      	cmp	r4, r3
 800567c:	d101      	bne.n	8005682 <__swsetup_r+0x46>
 800567e:	68ac      	ldr	r4, [r5, #8]
 8005680:	e7eb      	b.n	800565a <__swsetup_r+0x1e>
 8005682:	4b24      	ldr	r3, [pc, #144]	; (8005714 <__swsetup_r+0xd8>)
 8005684:	429c      	cmp	r4, r3
 8005686:	bf08      	it	eq
 8005688:	68ec      	ldreq	r4, [r5, #12]
 800568a:	e7e6      	b.n	800565a <__swsetup_r+0x1e>
 800568c:	0758      	lsls	r0, r3, #29
 800568e:	d512      	bpl.n	80056b6 <__swsetup_r+0x7a>
 8005690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005692:	b141      	cbz	r1, 80056a6 <__swsetup_r+0x6a>
 8005694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005698:	4299      	cmp	r1, r3
 800569a:	d002      	beq.n	80056a2 <__swsetup_r+0x66>
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff fe33 	bl	8005308 <_free_r>
 80056a2:	2300      	movs	r3, #0
 80056a4:	6363      	str	r3, [r4, #52]	; 0x34
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	2300      	movs	r3, #0
 80056b0:	6063      	str	r3, [r4, #4]
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f043 0308 	orr.w	r3, r3, #8
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	b94b      	cbnz	r3, 80056d6 <__swsetup_r+0x9a>
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d003      	beq.n	80056d6 <__swsetup_r+0x9a>
 80056ce:	4621      	mov	r1, r4
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 f9ff 	bl	8005ad4 <__smakebuf_r>
 80056d6:	89a0      	ldrh	r0, [r4, #12]
 80056d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056dc:	f010 0301 	ands.w	r3, r0, #1
 80056e0:	d00a      	beq.n	80056f8 <__swsetup_r+0xbc>
 80056e2:	2300      	movs	r3, #0
 80056e4:	60a3      	str	r3, [r4, #8]
 80056e6:	6963      	ldr	r3, [r4, #20]
 80056e8:	425b      	negs	r3, r3
 80056ea:	61a3      	str	r3, [r4, #24]
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	b943      	cbnz	r3, 8005702 <__swsetup_r+0xc6>
 80056f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056f4:	d1ba      	bne.n	800566c <__swsetup_r+0x30>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	0781      	lsls	r1, r0, #30
 80056fa:	bf58      	it	pl
 80056fc:	6963      	ldrpl	r3, [r4, #20]
 80056fe:	60a3      	str	r3, [r4, #8]
 8005700:	e7f4      	b.n	80056ec <__swsetup_r+0xb0>
 8005702:	2000      	movs	r0, #0
 8005704:	e7f7      	b.n	80056f6 <__swsetup_r+0xba>
 8005706:	bf00      	nop
 8005708:	2000000c 	.word	0x2000000c
 800570c:	080133a8 	.word	0x080133a8
 8005710:	080133c8 	.word	0x080133c8
 8005714:	08013388 	.word	0x08013388

08005718 <__sflush_r>:
 8005718:	898a      	ldrh	r2, [r1, #12]
 800571a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571e:	4605      	mov	r5, r0
 8005720:	0710      	lsls	r0, r2, #28
 8005722:	460c      	mov	r4, r1
 8005724:	d458      	bmi.n	80057d8 <__sflush_r+0xc0>
 8005726:	684b      	ldr	r3, [r1, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	dc05      	bgt.n	8005738 <__sflush_r+0x20>
 800572c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	dc02      	bgt.n	8005738 <__sflush_r+0x20>
 8005732:	2000      	movs	r0, #0
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800573a:	2e00      	cmp	r6, #0
 800573c:	d0f9      	beq.n	8005732 <__sflush_r+0x1a>
 800573e:	2300      	movs	r3, #0
 8005740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005744:	682f      	ldr	r7, [r5, #0]
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	d032      	beq.n	80057b0 <__sflush_r+0x98>
 800574a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	075a      	lsls	r2, r3, #29
 8005750:	d505      	bpl.n	800575e <__sflush_r+0x46>
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	1ac0      	subs	r0, r0, r3
 8005756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005758:	b10b      	cbz	r3, 800575e <__sflush_r+0x46>
 800575a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800575c:	1ac0      	subs	r0, r0, r3
 800575e:	2300      	movs	r3, #0
 8005760:	4602      	mov	r2, r0
 8005762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005764:	6a21      	ldr	r1, [r4, #32]
 8005766:	4628      	mov	r0, r5
 8005768:	47b0      	blx	r6
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	d106      	bne.n	800577e <__sflush_r+0x66>
 8005770:	6829      	ldr	r1, [r5, #0]
 8005772:	291d      	cmp	r1, #29
 8005774:	d82c      	bhi.n	80057d0 <__sflush_r+0xb8>
 8005776:	4a2a      	ldr	r2, [pc, #168]	; (8005820 <__sflush_r+0x108>)
 8005778:	40ca      	lsrs	r2, r1
 800577a:	07d6      	lsls	r6, r2, #31
 800577c:	d528      	bpl.n	80057d0 <__sflush_r+0xb8>
 800577e:	2200      	movs	r2, #0
 8005780:	6062      	str	r2, [r4, #4]
 8005782:	04d9      	lsls	r1, r3, #19
 8005784:	6922      	ldr	r2, [r4, #16]
 8005786:	6022      	str	r2, [r4, #0]
 8005788:	d504      	bpl.n	8005794 <__sflush_r+0x7c>
 800578a:	1c42      	adds	r2, r0, #1
 800578c:	d101      	bne.n	8005792 <__sflush_r+0x7a>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	b903      	cbnz	r3, 8005794 <__sflush_r+0x7c>
 8005792:	6560      	str	r0, [r4, #84]	; 0x54
 8005794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005796:	602f      	str	r7, [r5, #0]
 8005798:	2900      	cmp	r1, #0
 800579a:	d0ca      	beq.n	8005732 <__sflush_r+0x1a>
 800579c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <__sflush_r+0x92>
 80057a4:	4628      	mov	r0, r5
 80057a6:	f7ff fdaf 	bl	8005308 <_free_r>
 80057aa:	2000      	movs	r0, #0
 80057ac:	6360      	str	r0, [r4, #52]	; 0x34
 80057ae:	e7c1      	b.n	8005734 <__sflush_r+0x1c>
 80057b0:	6a21      	ldr	r1, [r4, #32]
 80057b2:	2301      	movs	r3, #1
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b0      	blx	r6
 80057b8:	1c41      	adds	r1, r0, #1
 80057ba:	d1c7      	bne.n	800574c <__sflush_r+0x34>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0c4      	beq.n	800574c <__sflush_r+0x34>
 80057c2:	2b1d      	cmp	r3, #29
 80057c4:	d001      	beq.n	80057ca <__sflush_r+0xb2>
 80057c6:	2b16      	cmp	r3, #22
 80057c8:	d101      	bne.n	80057ce <__sflush_r+0xb6>
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	e7b1      	b.n	8005732 <__sflush_r+0x1a>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	e7ad      	b.n	8005734 <__sflush_r+0x1c>
 80057d8:	690f      	ldr	r7, [r1, #16]
 80057da:	2f00      	cmp	r7, #0
 80057dc:	d0a9      	beq.n	8005732 <__sflush_r+0x1a>
 80057de:	0793      	lsls	r3, r2, #30
 80057e0:	680e      	ldr	r6, [r1, #0]
 80057e2:	bf08      	it	eq
 80057e4:	694b      	ldreq	r3, [r1, #20]
 80057e6:	600f      	str	r7, [r1, #0]
 80057e8:	bf18      	it	ne
 80057ea:	2300      	movne	r3, #0
 80057ec:	eba6 0807 	sub.w	r8, r6, r7
 80057f0:	608b      	str	r3, [r1, #8]
 80057f2:	f1b8 0f00 	cmp.w	r8, #0
 80057f6:	dd9c      	ble.n	8005732 <__sflush_r+0x1a>
 80057f8:	6a21      	ldr	r1, [r4, #32]
 80057fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057fc:	4643      	mov	r3, r8
 80057fe:	463a      	mov	r2, r7
 8005800:	4628      	mov	r0, r5
 8005802:	47b0      	blx	r6
 8005804:	2800      	cmp	r0, #0
 8005806:	dc06      	bgt.n	8005816 <__sflush_r+0xfe>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	e78e      	b.n	8005734 <__sflush_r+0x1c>
 8005816:	4407      	add	r7, r0
 8005818:	eba8 0800 	sub.w	r8, r8, r0
 800581c:	e7e9      	b.n	80057f2 <__sflush_r+0xda>
 800581e:	bf00      	nop
 8005820:	20400001 	.word	0x20400001

08005824 <_fflush_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	690b      	ldr	r3, [r1, #16]
 8005828:	4605      	mov	r5, r0
 800582a:	460c      	mov	r4, r1
 800582c:	b913      	cbnz	r3, 8005834 <_fflush_r+0x10>
 800582e:	2500      	movs	r5, #0
 8005830:	4628      	mov	r0, r5
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	b118      	cbz	r0, 800583e <_fflush_r+0x1a>
 8005836:	6983      	ldr	r3, [r0, #24]
 8005838:	b90b      	cbnz	r3, 800583e <_fflush_r+0x1a>
 800583a:	f000 f887 	bl	800594c <__sinit>
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <_fflush_r+0x6c>)
 8005840:	429c      	cmp	r4, r3
 8005842:	d11b      	bne.n	800587c <_fflush_r+0x58>
 8005844:	686c      	ldr	r4, [r5, #4]
 8005846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <_fflush_r+0xa>
 800584e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005850:	07d0      	lsls	r0, r2, #31
 8005852:	d404      	bmi.n	800585e <_fflush_r+0x3a>
 8005854:	0599      	lsls	r1, r3, #22
 8005856:	d402      	bmi.n	800585e <_fflush_r+0x3a>
 8005858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585a:	f000 f915 	bl	8005a88 <__retarget_lock_acquire_recursive>
 800585e:	4628      	mov	r0, r5
 8005860:	4621      	mov	r1, r4
 8005862:	f7ff ff59 	bl	8005718 <__sflush_r>
 8005866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005868:	07da      	lsls	r2, r3, #31
 800586a:	4605      	mov	r5, r0
 800586c:	d4e0      	bmi.n	8005830 <_fflush_r+0xc>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	d4dd      	bmi.n	8005830 <_fflush_r+0xc>
 8005874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005876:	f000 f908 	bl	8005a8a <__retarget_lock_release_recursive>
 800587a:	e7d9      	b.n	8005830 <_fflush_r+0xc>
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <_fflush_r+0x70>)
 800587e:	429c      	cmp	r4, r3
 8005880:	d101      	bne.n	8005886 <_fflush_r+0x62>
 8005882:	68ac      	ldr	r4, [r5, #8]
 8005884:	e7df      	b.n	8005846 <_fflush_r+0x22>
 8005886:	4b04      	ldr	r3, [pc, #16]	; (8005898 <_fflush_r+0x74>)
 8005888:	429c      	cmp	r4, r3
 800588a:	bf08      	it	eq
 800588c:	68ec      	ldreq	r4, [r5, #12]
 800588e:	e7da      	b.n	8005846 <_fflush_r+0x22>
 8005890:	080133a8 	.word	0x080133a8
 8005894:	080133c8 	.word	0x080133c8
 8005898:	08013388 	.word	0x08013388

0800589c <std>:
 800589c:	2300      	movs	r3, #0
 800589e:	b510      	push	{r4, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	e9c0 3300 	strd	r3, r3, [r0]
 80058a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058aa:	6083      	str	r3, [r0, #8]
 80058ac:	8181      	strh	r1, [r0, #12]
 80058ae:	6643      	str	r3, [r0, #100]	; 0x64
 80058b0:	81c2      	strh	r2, [r0, #14]
 80058b2:	6183      	str	r3, [r0, #24]
 80058b4:	4619      	mov	r1, r3
 80058b6:	2208      	movs	r2, #8
 80058b8:	305c      	adds	r0, #92	; 0x5c
 80058ba:	f7ff fd1d 	bl	80052f8 <memset>
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <std+0x38>)
 80058c0:	6263      	str	r3, [r4, #36]	; 0x24
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <std+0x3c>)
 80058c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <std+0x40>)
 80058c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <std+0x44>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	6323      	str	r3, [r4, #48]	; 0x30
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	bf00      	nop
 80058d4:	08006149 	.word	0x08006149
 80058d8:	0800616b 	.word	0x0800616b
 80058dc:	080061a3 	.word	0x080061a3
 80058e0:	080061c7 	.word	0x080061c7

080058e4 <_cleanup_r>:
 80058e4:	4901      	ldr	r1, [pc, #4]	; (80058ec <_cleanup_r+0x8>)
 80058e6:	f000 b8af 	b.w	8005a48 <_fwalk_reent>
 80058ea:	bf00      	nop
 80058ec:	08005825 	.word	0x08005825

080058f0 <__sfmoreglue>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	1e4a      	subs	r2, r1, #1
 80058f4:	2568      	movs	r5, #104	; 0x68
 80058f6:	4355      	muls	r5, r2
 80058f8:	460e      	mov	r6, r1
 80058fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058fe:	f7ff fd53 	bl	80053a8 <_malloc_r>
 8005902:	4604      	mov	r4, r0
 8005904:	b140      	cbz	r0, 8005918 <__sfmoreglue+0x28>
 8005906:	2100      	movs	r1, #0
 8005908:	e9c0 1600 	strd	r1, r6, [r0]
 800590c:	300c      	adds	r0, #12
 800590e:	60a0      	str	r0, [r4, #8]
 8005910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005914:	f7ff fcf0 	bl	80052f8 <memset>
 8005918:	4620      	mov	r0, r4
 800591a:	bd70      	pop	{r4, r5, r6, pc}

0800591c <__sfp_lock_acquire>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__sfp_lock_acquire+0x8>)
 800591e:	f000 b8b3 	b.w	8005a88 <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200025dc 	.word	0x200025dc

08005928 <__sfp_lock_release>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__sfp_lock_release+0x8>)
 800592a:	f000 b8ae 	b.w	8005a8a <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200025dc 	.word	0x200025dc

08005934 <__sinit_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__sinit_lock_acquire+0x8>)
 8005936:	f000 b8a7 	b.w	8005a88 <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	200025d7 	.word	0x200025d7

08005940 <__sinit_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__sinit_lock_release+0x8>)
 8005942:	f000 b8a2 	b.w	8005a8a <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	200025d7 	.word	0x200025d7

0800594c <__sinit>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f7ff fff0 	bl	8005934 <__sinit_lock_acquire>
 8005954:	69a3      	ldr	r3, [r4, #24]
 8005956:	b11b      	cbz	r3, 8005960 <__sinit+0x14>
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f7ff bff0 	b.w	8005940 <__sinit_lock_release>
 8005960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005964:	6523      	str	r3, [r4, #80]	; 0x50
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <__sinit+0x68>)
 8005968:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <__sinit+0x6c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	62a2      	str	r2, [r4, #40]	; 0x28
 800596e:	42a3      	cmp	r3, r4
 8005970:	bf04      	itt	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	61a3      	streq	r3, [r4, #24]
 8005976:	4620      	mov	r0, r4
 8005978:	f000 f820 	bl	80059bc <__sfp>
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f81c 	bl	80059bc <__sfp>
 8005984:	60a0      	str	r0, [r4, #8]
 8005986:	4620      	mov	r0, r4
 8005988:	f000 f818 	bl	80059bc <__sfp>
 800598c:	2200      	movs	r2, #0
 800598e:	60e0      	str	r0, [r4, #12]
 8005990:	2104      	movs	r1, #4
 8005992:	6860      	ldr	r0, [r4, #4]
 8005994:	f7ff ff82 	bl	800589c <std>
 8005998:	68a0      	ldr	r0, [r4, #8]
 800599a:	2201      	movs	r2, #1
 800599c:	2109      	movs	r1, #9
 800599e:	f7ff ff7d 	bl	800589c <std>
 80059a2:	68e0      	ldr	r0, [r4, #12]
 80059a4:	2202      	movs	r2, #2
 80059a6:	2112      	movs	r1, #18
 80059a8:	f7ff ff78 	bl	800589c <std>
 80059ac:	2301      	movs	r3, #1
 80059ae:	61a3      	str	r3, [r4, #24]
 80059b0:	e7d2      	b.n	8005958 <__sinit+0xc>
 80059b2:	bf00      	nop
 80059b4:	08013384 	.word	0x08013384
 80059b8:	080058e5 	.word	0x080058e5

080059bc <__sfp>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	4607      	mov	r7, r0
 80059c0:	f7ff ffac 	bl	800591c <__sfp_lock_acquire>
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <__sfp+0x84>)
 80059c6:	681e      	ldr	r6, [r3, #0]
 80059c8:	69b3      	ldr	r3, [r6, #24]
 80059ca:	b913      	cbnz	r3, 80059d2 <__sfp+0x16>
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff ffbd 	bl	800594c <__sinit>
 80059d2:	3648      	adds	r6, #72	; 0x48
 80059d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059d8:	3b01      	subs	r3, #1
 80059da:	d503      	bpl.n	80059e4 <__sfp+0x28>
 80059dc:	6833      	ldr	r3, [r6, #0]
 80059de:	b30b      	cbz	r3, 8005a24 <__sfp+0x68>
 80059e0:	6836      	ldr	r6, [r6, #0]
 80059e2:	e7f7      	b.n	80059d4 <__sfp+0x18>
 80059e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059e8:	b9d5      	cbnz	r5, 8005a20 <__sfp+0x64>
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <__sfp+0x88>)
 80059ec:	60e3      	str	r3, [r4, #12]
 80059ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059f2:	6665      	str	r5, [r4, #100]	; 0x64
 80059f4:	f000 f847 	bl	8005a86 <__retarget_lock_init_recursive>
 80059f8:	f7ff ff96 	bl	8005928 <__sfp_lock_release>
 80059fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a04:	6025      	str	r5, [r4, #0]
 8005a06:	61a5      	str	r5, [r4, #24]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a10:	f7ff fc72 	bl	80052f8 <memset>
 8005a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a20:	3468      	adds	r4, #104	; 0x68
 8005a22:	e7d9      	b.n	80059d8 <__sfp+0x1c>
 8005a24:	2104      	movs	r1, #4
 8005a26:	4638      	mov	r0, r7
 8005a28:	f7ff ff62 	bl	80058f0 <__sfmoreglue>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	6030      	str	r0, [r6, #0]
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1d5      	bne.n	80059e0 <__sfp+0x24>
 8005a34:	f7ff ff78 	bl	8005928 <__sfp_lock_release>
 8005a38:	230c      	movs	r3, #12
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	e7ee      	b.n	8005a1c <__sfp+0x60>
 8005a3e:	bf00      	nop
 8005a40:	08013384 	.word	0x08013384
 8005a44:	ffff0001 	.word	0xffff0001

08005a48 <_fwalk_reent>:
 8005a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	4688      	mov	r8, r1
 8005a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a54:	2700      	movs	r7, #0
 8005a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a5e:	d505      	bpl.n	8005a6c <_fwalk_reent+0x24>
 8005a60:	6824      	ldr	r4, [r4, #0]
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	d1f7      	bne.n	8005a56 <_fwalk_reent+0xe>
 8005a66:	4638      	mov	r0, r7
 8005a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6c:	89ab      	ldrh	r3, [r5, #12]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d907      	bls.n	8005a82 <_fwalk_reent+0x3a>
 8005a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a76:	3301      	adds	r3, #1
 8005a78:	d003      	beq.n	8005a82 <_fwalk_reent+0x3a>
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	47c0      	blx	r8
 8005a80:	4307      	orrs	r7, r0
 8005a82:	3568      	adds	r5, #104	; 0x68
 8005a84:	e7e9      	b.n	8005a5a <_fwalk_reent+0x12>

08005a86 <__retarget_lock_init_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_acquire_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <__retarget_lock_release_recursive>:
 8005a8a:	4770      	bx	lr

08005a8c <__swhatbuf_r>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	460e      	mov	r6, r1
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	b096      	sub	sp, #88	; 0x58
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	da07      	bge.n	8005aae <__swhatbuf_r+0x22>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	89b3      	ldrh	r3, [r6, #12]
 8005aa4:	061a      	lsls	r2, r3, #24
 8005aa6:	d410      	bmi.n	8005aca <__swhatbuf_r+0x3e>
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	e00e      	b.n	8005acc <__swhatbuf_r+0x40>
 8005aae:	466a      	mov	r2, sp
 8005ab0:	f000 fbb0 	bl	8006214 <_fstat_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	dbf2      	blt.n	8005a9e <__swhatbuf_r+0x12>
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ac2:	425a      	negs	r2, r3
 8005ac4:	415a      	adcs	r2, r3
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	e7ee      	b.n	8005aa8 <__swhatbuf_r+0x1c>
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	2000      	movs	r0, #0
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	b016      	add	sp, #88	; 0x58
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}

08005ad4 <__smakebuf_r>:
 8005ad4:	898b      	ldrh	r3, [r1, #12]
 8005ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad8:	079d      	lsls	r5, r3, #30
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	d507      	bpl.n	8005af0 <__smakebuf_r+0x1c>
 8005ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	2301      	movs	r3, #1
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	b002      	add	sp, #8
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	ab01      	add	r3, sp, #4
 8005af2:	466a      	mov	r2, sp
 8005af4:	f7ff ffca 	bl	8005a8c <__swhatbuf_r>
 8005af8:	9900      	ldr	r1, [sp, #0]
 8005afa:	4605      	mov	r5, r0
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff fc53 	bl	80053a8 <_malloc_r>
 8005b02:	b948      	cbnz	r0, 8005b18 <__smakebuf_r+0x44>
 8005b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b08:	059a      	lsls	r2, r3, #22
 8005b0a:	d4ef      	bmi.n	8005aec <__smakebuf_r+0x18>
 8005b0c:	f023 0303 	bic.w	r3, r3, #3
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	e7e3      	b.n	8005ae0 <__smakebuf_r+0xc>
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <__smakebuf_r+0x7c>)
 8005b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	6020      	str	r0, [r4, #0]
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	9b00      	ldr	r3, [sp, #0]
 8005b28:	6163      	str	r3, [r4, #20]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	6120      	str	r0, [r4, #16]
 8005b2e:	b15b      	cbz	r3, 8005b48 <__smakebuf_r+0x74>
 8005b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b34:	4630      	mov	r0, r6
 8005b36:	f000 fb7f 	bl	8006238 <_isatty_r>
 8005b3a:	b128      	cbz	r0, 8005b48 <__smakebuf_r+0x74>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	89a0      	ldrh	r0, [r4, #12]
 8005b4a:	4305      	orrs	r5, r0
 8005b4c:	81a5      	strh	r5, [r4, #12]
 8005b4e:	e7cd      	b.n	8005aec <__smakebuf_r+0x18>
 8005b50:	080058e5 	.word	0x080058e5

08005b54 <__malloc_lock>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__malloc_lock+0x8>)
 8005b56:	f7ff bf97 	b.w	8005a88 <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200025d8 	.word	0x200025d8

08005b60 <__malloc_unlock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__malloc_unlock+0x8>)
 8005b62:	f7ff bf92 	b.w	8005a8a <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	200025d8 	.word	0x200025d8

08005b6c <__sfputc_r>:
 8005b6c:	6893      	ldr	r3, [r2, #8]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	b410      	push	{r4}
 8005b74:	6093      	str	r3, [r2, #8]
 8005b76:	da08      	bge.n	8005b8a <__sfputc_r+0x1e>
 8005b78:	6994      	ldr	r4, [r2, #24]
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	db01      	blt.n	8005b82 <__sfputc_r+0x16>
 8005b7e:	290a      	cmp	r1, #10
 8005b80:	d103      	bne.n	8005b8a <__sfputc_r+0x1e>
 8005b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b86:	f7ff bd07 	b.w	8005598 <__swbuf_r>
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	1c58      	adds	r0, r3, #1
 8005b8e:	6010      	str	r0, [r2, #0]
 8005b90:	7019      	strb	r1, [r3, #0]
 8005b92:	4608      	mov	r0, r1
 8005b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <__sfputs_r>:
 8005b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	460f      	mov	r7, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	18d5      	adds	r5, r2, r3
 8005ba4:	42ac      	cmp	r4, r5
 8005ba6:	d101      	bne.n	8005bac <__sfputs_r+0x12>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e007      	b.n	8005bbc <__sfputs_r+0x22>
 8005bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7ff ffda 	bl	8005b6c <__sfputc_r>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d1f3      	bne.n	8005ba4 <__sfputs_r+0xa>
 8005bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bc0 <_vfiprintf_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	460d      	mov	r5, r1
 8005bc6:	b09d      	sub	sp, #116	; 0x74
 8005bc8:	4614      	mov	r4, r2
 8005bca:	4698      	mov	r8, r3
 8005bcc:	4606      	mov	r6, r0
 8005bce:	b118      	cbz	r0, 8005bd8 <_vfiprintf_r+0x18>
 8005bd0:	6983      	ldr	r3, [r0, #24]
 8005bd2:	b90b      	cbnz	r3, 8005bd8 <_vfiprintf_r+0x18>
 8005bd4:	f7ff feba 	bl	800594c <__sinit>
 8005bd8:	4b89      	ldr	r3, [pc, #548]	; (8005e00 <_vfiprintf_r+0x240>)
 8005bda:	429d      	cmp	r5, r3
 8005bdc:	d11b      	bne.n	8005c16 <_vfiprintf_r+0x56>
 8005bde:	6875      	ldr	r5, [r6, #4]
 8005be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be2:	07d9      	lsls	r1, r3, #31
 8005be4:	d405      	bmi.n	8005bf2 <_vfiprintf_r+0x32>
 8005be6:	89ab      	ldrh	r3, [r5, #12]
 8005be8:	059a      	lsls	r2, r3, #22
 8005bea:	d402      	bmi.n	8005bf2 <_vfiprintf_r+0x32>
 8005bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bee:	f7ff ff4b 	bl	8005a88 <__retarget_lock_acquire_recursive>
 8005bf2:	89ab      	ldrh	r3, [r5, #12]
 8005bf4:	071b      	lsls	r3, r3, #28
 8005bf6:	d501      	bpl.n	8005bfc <_vfiprintf_r+0x3c>
 8005bf8:	692b      	ldr	r3, [r5, #16]
 8005bfa:	b9eb      	cbnz	r3, 8005c38 <_vfiprintf_r+0x78>
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7ff fd1c 	bl	800563c <__swsetup_r>
 8005c04:	b1c0      	cbz	r0, 8005c38 <_vfiprintf_r+0x78>
 8005c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c08:	07dc      	lsls	r4, r3, #31
 8005c0a:	d50e      	bpl.n	8005c2a <_vfiprintf_r+0x6a>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	b01d      	add	sp, #116	; 0x74
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <_vfiprintf_r+0x244>)
 8005c18:	429d      	cmp	r5, r3
 8005c1a:	d101      	bne.n	8005c20 <_vfiprintf_r+0x60>
 8005c1c:	68b5      	ldr	r5, [r6, #8]
 8005c1e:	e7df      	b.n	8005be0 <_vfiprintf_r+0x20>
 8005c20:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <_vfiprintf_r+0x248>)
 8005c22:	429d      	cmp	r5, r3
 8005c24:	bf08      	it	eq
 8005c26:	68f5      	ldreq	r5, [r6, #12]
 8005c28:	e7da      	b.n	8005be0 <_vfiprintf_r+0x20>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	0598      	lsls	r0, r3, #22
 8005c2e:	d4ed      	bmi.n	8005c0c <_vfiprintf_r+0x4c>
 8005c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c32:	f7ff ff2a 	bl	8005a8a <__retarget_lock_release_recursive>
 8005c36:	e7e9      	b.n	8005c0c <_vfiprintf_r+0x4c>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c46:	2330      	movs	r3, #48	; 0x30
 8005c48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e0c <_vfiprintf_r+0x24c>
 8005c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c50:	f04f 0901 	mov.w	r9, #1
 8005c54:	4623      	mov	r3, r4
 8005c56:	469a      	mov	sl, r3
 8005c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c5c:	b10a      	cbz	r2, 8005c62 <_vfiprintf_r+0xa2>
 8005c5e:	2a25      	cmp	r2, #37	; 0x25
 8005c60:	d1f9      	bne.n	8005c56 <_vfiprintf_r+0x96>
 8005c62:	ebba 0b04 	subs.w	fp, sl, r4
 8005c66:	d00b      	beq.n	8005c80 <_vfiprintf_r+0xc0>
 8005c68:	465b      	mov	r3, fp
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7ff ff93 	bl	8005b9a <__sfputs_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f000 80aa 	beq.w	8005dce <_vfiprintf_r+0x20e>
 8005c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7c:	445a      	add	r2, fp
 8005c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c80:	f89a 3000 	ldrb.w	r3, [sl]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80a2 	beq.w	8005dce <_vfiprintf_r+0x20e>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c94:	f10a 0a01 	add.w	sl, sl, #1
 8005c98:	9304      	str	r3, [sp, #16]
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ca2:	4654      	mov	r4, sl
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005caa:	4858      	ldr	r0, [pc, #352]	; (8005e0c <_vfiprintf_r+0x24c>)
 8005cac:	f7fa fac8 	bl	8000240 <memchr>
 8005cb0:	9a04      	ldr	r2, [sp, #16]
 8005cb2:	b9d8      	cbnz	r0, 8005cec <_vfiprintf_r+0x12c>
 8005cb4:	06d1      	lsls	r1, r2, #27
 8005cb6:	bf44      	itt	mi
 8005cb8:	2320      	movmi	r3, #32
 8005cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbe:	0713      	lsls	r3, r2, #28
 8005cc0:	bf44      	itt	mi
 8005cc2:	232b      	movmi	r3, #43	; 0x2b
 8005cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cce:	d015      	beq.n	8005cfc <_vfiprintf_r+0x13c>
 8005cd0:	9a07      	ldr	r2, [sp, #28]
 8005cd2:	4654      	mov	r4, sl
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f04f 0c0a 	mov.w	ip, #10
 8005cda:	4621      	mov	r1, r4
 8005cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ce0:	3b30      	subs	r3, #48	; 0x30
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d94e      	bls.n	8005d84 <_vfiprintf_r+0x1c4>
 8005ce6:	b1b0      	cbz	r0, 8005d16 <_vfiprintf_r+0x156>
 8005ce8:	9207      	str	r2, [sp, #28]
 8005cea:	e014      	b.n	8005d16 <_vfiprintf_r+0x156>
 8005cec:	eba0 0308 	sub.w	r3, r0, r8
 8005cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	46a2      	mov	sl, r4
 8005cfa:	e7d2      	b.n	8005ca2 <_vfiprintf_r+0xe2>
 8005cfc:	9b03      	ldr	r3, [sp, #12]
 8005cfe:	1d19      	adds	r1, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	9103      	str	r1, [sp, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfbb      	ittet	lt
 8005d08:	425b      	neglt	r3, r3
 8005d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d0e:	9307      	strge	r3, [sp, #28]
 8005d10:	9307      	strlt	r3, [sp, #28]
 8005d12:	bfb8      	it	lt
 8005d14:	9204      	strlt	r2, [sp, #16]
 8005d16:	7823      	ldrb	r3, [r4, #0]
 8005d18:	2b2e      	cmp	r3, #46	; 0x2e
 8005d1a:	d10c      	bne.n	8005d36 <_vfiprintf_r+0x176>
 8005d1c:	7863      	ldrb	r3, [r4, #1]
 8005d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d20:	d135      	bne.n	8005d8e <_vfiprintf_r+0x1ce>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	9203      	str	r2, [sp, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfb8      	it	lt
 8005d2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d32:	3402      	adds	r4, #2
 8005d34:	9305      	str	r3, [sp, #20]
 8005d36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e1c <_vfiprintf_r+0x25c>
 8005d3a:	7821      	ldrb	r1, [r4, #0]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	4650      	mov	r0, sl
 8005d40:	f7fa fa7e 	bl	8000240 <memchr>
 8005d44:	b140      	cbz	r0, 8005d58 <_vfiprintf_r+0x198>
 8005d46:	2340      	movs	r3, #64	; 0x40
 8005d48:	eba0 000a 	sub.w	r0, r0, sl
 8005d4c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d50:	9b04      	ldr	r3, [sp, #16]
 8005d52:	4303      	orrs	r3, r0
 8005d54:	3401      	adds	r4, #1
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5c:	482c      	ldr	r0, [pc, #176]	; (8005e10 <_vfiprintf_r+0x250>)
 8005d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d62:	2206      	movs	r2, #6
 8005d64:	f7fa fa6c 	bl	8000240 <memchr>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d03f      	beq.n	8005dec <_vfiprintf_r+0x22c>
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <_vfiprintf_r+0x254>)
 8005d6e:	bb1b      	cbnz	r3, 8005db8 <_vfiprintf_r+0x1f8>
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	3307      	adds	r3, #7
 8005d74:	f023 0307 	bic.w	r3, r3, #7
 8005d78:	3308      	adds	r3, #8
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7e:	443b      	add	r3, r7
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	e767      	b.n	8005c54 <_vfiprintf_r+0x94>
 8005d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d88:	460c      	mov	r4, r1
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	e7a5      	b.n	8005cda <_vfiprintf_r+0x11a>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	3401      	adds	r4, #1
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	4619      	mov	r1, r3
 8005d96:	f04f 0c0a 	mov.w	ip, #10
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005da0:	3a30      	subs	r2, #48	; 0x30
 8005da2:	2a09      	cmp	r2, #9
 8005da4:	d903      	bls.n	8005dae <_vfiprintf_r+0x1ee>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0c5      	beq.n	8005d36 <_vfiprintf_r+0x176>
 8005daa:	9105      	str	r1, [sp, #20]
 8005dac:	e7c3      	b.n	8005d36 <_vfiprintf_r+0x176>
 8005dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005db2:	4604      	mov	r4, r0
 8005db4:	2301      	movs	r3, #1
 8005db6:	e7f0      	b.n	8005d9a <_vfiprintf_r+0x1da>
 8005db8:	ab03      	add	r3, sp, #12
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <_vfiprintf_r+0x258>)
 8005dc0:	a904      	add	r1, sp, #16
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	4607      	mov	r7, r0
 8005dca:	1c78      	adds	r0, r7, #1
 8005dcc:	d1d6      	bne.n	8005d7c <_vfiprintf_r+0x1bc>
 8005dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd0:	07d9      	lsls	r1, r3, #31
 8005dd2:	d405      	bmi.n	8005de0 <_vfiprintf_r+0x220>
 8005dd4:	89ab      	ldrh	r3, [r5, #12]
 8005dd6:	059a      	lsls	r2, r3, #22
 8005dd8:	d402      	bmi.n	8005de0 <_vfiprintf_r+0x220>
 8005dda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ddc:	f7ff fe55 	bl	8005a8a <__retarget_lock_release_recursive>
 8005de0:	89ab      	ldrh	r3, [r5, #12]
 8005de2:	065b      	lsls	r3, r3, #25
 8005de4:	f53f af12 	bmi.w	8005c0c <_vfiprintf_r+0x4c>
 8005de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dea:	e711      	b.n	8005c10 <_vfiprintf_r+0x50>
 8005dec:	ab03      	add	r3, sp, #12
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	462a      	mov	r2, r5
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <_vfiprintf_r+0x258>)
 8005df4:	a904      	add	r1, sp, #16
 8005df6:	4630      	mov	r0, r6
 8005df8:	f000 f880 	bl	8005efc <_printf_i>
 8005dfc:	e7e4      	b.n	8005dc8 <_vfiprintf_r+0x208>
 8005dfe:	bf00      	nop
 8005e00:	080133a8 	.word	0x080133a8
 8005e04:	080133c8 	.word	0x080133c8
 8005e08:	08013388 	.word	0x08013388
 8005e0c:	080133e8 	.word	0x080133e8
 8005e10:	080133f2 	.word	0x080133f2
 8005e14:	00000000 	.word	0x00000000
 8005e18:	08005b9b 	.word	0x08005b9b
 8005e1c:	080133ee 	.word	0x080133ee

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4699      	mov	r9, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e6c:	1e13      	subs	r3, r2, #0
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	68e5      	ldr	r5, [r4, #12]
 8005e8a:	6832      	ldr	r2, [r6, #0]
 8005e8c:	f003 0306 	and.w	r3, r3, #6
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	bf08      	it	eq
 8005e94:	1aad      	subeq	r5, r5, r2
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	6922      	ldr	r2, [r4, #16]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c0      	blx	r8
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	; 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	460c      	mov	r4, r1
 8005f02:	4691      	mov	r9, r2
 8005f04:	7e27      	ldrb	r7, [r4, #24]
 8005f06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f08:	2f78      	cmp	r7, #120	; 0x78
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	; 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d8 	beq.w	80060ce <_printf_i+0x1d2>
 8005f1e:	2f58      	cmp	r7, #88	; 0x58
 8005f20:	f000 80a3 	beq.w	800606a <_printf_i+0x16e>
 8005f24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a001      	add	r0, pc, #4	; (adr r0, 8005f3c <_printf_i+0x40>)
 8005f38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060b5 	.word	0x080060b5
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	08006097 	.word	0x08006097
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060d7 	.word	0x080060d7
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	0800609f 	.word	0x0800609f
 8005f94:	680b      	ldr	r3, [r1, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	600a      	str	r2, [r1, #0]
 8005f9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a3      	b.n	80060f0 <_printf_i+0x1f4>
 8005fa8:	6825      	ldr	r5, [r4, #0]
 8005faa:	6808      	ldr	r0, [r1, #0]
 8005fac:	062e      	lsls	r6, r5, #24
 8005fae:	f100 0304 	add.w	r3, r0, #4
 8005fb2:	d50a      	bpl.n	8005fca <_printf_i+0xce>
 8005fb4:	6805      	ldr	r5, [r0, #0]
 8005fb6:	600b      	str	r3, [r1, #0]
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	da03      	bge.n	8005fc4 <_printf_i+0xc8>
 8005fbc:	232d      	movs	r3, #45	; 0x2d
 8005fbe:	426d      	negs	r5, r5
 8005fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc4:	485e      	ldr	r0, [pc, #376]	; (8006140 <_printf_i+0x244>)
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e019      	b.n	8005ffe <_printf_i+0x102>
 8005fca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fce:	6805      	ldr	r5, [r0, #0]
 8005fd0:	600b      	str	r3, [r1, #0]
 8005fd2:	bf18      	it	ne
 8005fd4:	b22d      	sxthne	r5, r5
 8005fd6:	e7ef      	b.n	8005fb8 <_printf_i+0xbc>
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	1d18      	adds	r0, r3, #4
 8005fde:	6008      	str	r0, [r1, #0]
 8005fe0:	0628      	lsls	r0, r5, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0xec>
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_printf_i+0xf2>
 8005fe8:	0669      	lsls	r1, r5, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0xe8>
 8005fec:	881d      	ldrh	r5, [r3, #0]
 8005fee:	4854      	ldr	r0, [pc, #336]	; (8006140 <_printf_i+0x244>)
 8005ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2308      	moveq	r3, #8
 8005ff6:	230a      	movne	r3, #10
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffe:	6866      	ldr	r6, [r4, #4]
 8006000:	60a6      	str	r6, [r4, #8]
 8006002:	2e00      	cmp	r6, #0
 8006004:	bfa2      	ittt	ge
 8006006:	6821      	ldrge	r1, [r4, #0]
 8006008:	f021 0104 	bicge.w	r1, r1, #4
 800600c:	6021      	strge	r1, [r4, #0]
 800600e:	b90d      	cbnz	r5, 8006014 <_printf_i+0x118>
 8006010:	2e00      	cmp	r6, #0
 8006012:	d04d      	beq.n	80060b0 <_printf_i+0x1b4>
 8006014:	4616      	mov	r6, r2
 8006016:	fbb5 f1f3 	udiv	r1, r5, r3
 800601a:	fb03 5711 	mls	r7, r3, r1, r5
 800601e:	5dc7      	ldrb	r7, [r0, r7]
 8006020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006024:	462f      	mov	r7, r5
 8006026:	42bb      	cmp	r3, r7
 8006028:	460d      	mov	r5, r1
 800602a:	d9f4      	bls.n	8006016 <_printf_i+0x11a>
 800602c:	2b08      	cmp	r3, #8
 800602e:	d10b      	bne.n	8006048 <_printf_i+0x14c>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	07df      	lsls	r7, r3, #31
 8006034:	d508      	bpl.n	8006048 <_printf_i+0x14c>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4299      	cmp	r1, r3
 800603c:	bfde      	ittt	le
 800603e:	2330      	movle	r3, #48	; 0x30
 8006040:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006044:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006048:	1b92      	subs	r2, r2, r6
 800604a:	6122      	str	r2, [r4, #16]
 800604c:	f8cd a000 	str.w	sl, [sp]
 8006050:	464b      	mov	r3, r9
 8006052:	aa03      	add	r2, sp, #12
 8006054:	4621      	mov	r1, r4
 8006056:	4640      	mov	r0, r8
 8006058:	f7ff fee2 	bl	8005e20 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	d14c      	bne.n	80060fa <_printf_i+0x1fe>
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	b004      	add	sp, #16
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606a:	4835      	ldr	r0, [pc, #212]	; (8006140 <_printf_i+0x244>)
 800606c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	680e      	ldr	r6, [r1, #0]
 8006074:	061f      	lsls	r7, r3, #24
 8006076:	f856 5b04 	ldr.w	r5, [r6], #4
 800607a:	600e      	str	r6, [r1, #0]
 800607c:	d514      	bpl.n	80060a8 <_printf_i+0x1ac>
 800607e:	07d9      	lsls	r1, r3, #31
 8006080:	bf44      	itt	mi
 8006082:	f043 0320 	orrmi.w	r3, r3, #32
 8006086:	6023      	strmi	r3, [r4, #0]
 8006088:	b91d      	cbnz	r5, 8006092 <_printf_i+0x196>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f023 0320 	bic.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	2310      	movs	r3, #16
 8006094:	e7b0      	b.n	8005ff8 <_printf_i+0xfc>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f043 0320 	orr.w	r3, r3, #32
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	2378      	movs	r3, #120	; 0x78
 80060a0:	4828      	ldr	r0, [pc, #160]	; (8006144 <_printf_i+0x248>)
 80060a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a6:	e7e3      	b.n	8006070 <_printf_i+0x174>
 80060a8:	065e      	lsls	r6, r3, #25
 80060aa:	bf48      	it	mi
 80060ac:	b2ad      	uxthmi	r5, r5
 80060ae:	e7e6      	b.n	800607e <_printf_i+0x182>
 80060b0:	4616      	mov	r6, r2
 80060b2:	e7bb      	b.n	800602c <_printf_i+0x130>
 80060b4:	680b      	ldr	r3, [r1, #0]
 80060b6:	6826      	ldr	r6, [r4, #0]
 80060b8:	6960      	ldr	r0, [r4, #20]
 80060ba:	1d1d      	adds	r5, r3, #4
 80060bc:	600d      	str	r5, [r1, #0]
 80060be:	0635      	lsls	r5, r6, #24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0x1cc>
 80060c4:	6018      	str	r0, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0x1d2>
 80060c8:	0671      	lsls	r1, r6, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0x1c8>
 80060cc:	8018      	strh	r0, [r3, #0]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	4616      	mov	r6, r2
 80060d4:	e7ba      	b.n	800604c <_printf_i+0x150>
 80060d6:	680b      	ldr	r3, [r1, #0]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	600a      	str	r2, [r1, #0]
 80060dc:	681e      	ldr	r6, [r3, #0]
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7fa f8ac 	bl	8000240 <memchr>
 80060e8:	b108      	cbz	r0, 80060ee <_printf_i+0x1f2>
 80060ea:	1b80      	subs	r0, r0, r6
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	2300      	movs	r3, #0
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f8:	e7a8      	b.n	800604c <_printf_i+0x150>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	4632      	mov	r2, r6
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	47d0      	blx	sl
 8006104:	3001      	adds	r0, #1
 8006106:	d0ab      	beq.n	8006060 <_printf_i+0x164>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	079b      	lsls	r3, r3, #30
 800610c:	d413      	bmi.n	8006136 <_printf_i+0x23a>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	4298      	cmp	r0, r3
 8006114:	bfb8      	it	lt
 8006116:	4618      	movlt	r0, r3
 8006118:	e7a4      	b.n	8006064 <_printf_i+0x168>
 800611a:	2301      	movs	r3, #1
 800611c:	4632      	mov	r2, r6
 800611e:	4649      	mov	r1, r9
 8006120:	4640      	mov	r0, r8
 8006122:	47d0      	blx	sl
 8006124:	3001      	adds	r0, #1
 8006126:	d09b      	beq.n	8006060 <_printf_i+0x164>
 8006128:	3501      	adds	r5, #1
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	9903      	ldr	r1, [sp, #12]
 800612e:	1a5b      	subs	r3, r3, r1
 8006130:	42ab      	cmp	r3, r5
 8006132:	dcf2      	bgt.n	800611a <_printf_i+0x21e>
 8006134:	e7eb      	b.n	800610e <_printf_i+0x212>
 8006136:	2500      	movs	r5, #0
 8006138:	f104 0619 	add.w	r6, r4, #25
 800613c:	e7f5      	b.n	800612a <_printf_i+0x22e>
 800613e:	bf00      	nop
 8006140:	080133f9 	.word	0x080133f9
 8006144:	0801340a 	.word	0x0801340a

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f894 	bl	800627c <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	; 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006180:	2302      	movs	r3, #2
 8006182:	2200      	movs	r2, #0
 8006184:	f000 f868 	bl	8006258 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	4628      	mov	r0, r5
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b817 	b.w	80061d0 <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f855 	bl	8006258 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b813 	b.w	80061f4 <_close_r>
	...

080061d0 <_write_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_write_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fa fe87 	bl	8000ef2 <_write>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_write_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_write_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	200025e0 	.word	0x200025e0

080061f4 <_close_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d06      	ldr	r5, [pc, #24]	; (8006210 <_close_r+0x1c>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	f7fa fe93 	bl	8000f2a <_close>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_close_r+0x1a>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_close_r+0x1a>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	200025e0 	.word	0x200025e0

08006214 <_fstat_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	; (8006234 <_fstat_r+0x20>)
 8006218:	2300      	movs	r3, #0
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	f7fa fe8e 	bl	8000f42 <_fstat>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d102      	bne.n	8006230 <_fstat_r+0x1c>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	b103      	cbz	r3, 8006230 <_fstat_r+0x1c>
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	bd38      	pop	{r3, r4, r5, pc}
 8006232:	bf00      	nop
 8006234:	200025e0 	.word	0x200025e0

08006238 <_isatty_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4d06      	ldr	r5, [pc, #24]	; (8006254 <_isatty_r+0x1c>)
 800623c:	2300      	movs	r3, #0
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fa fe8d 	bl	8000f62 <_isatty>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_isatty_r+0x1a>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_isatty_r+0x1a>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	200025e0 	.word	0x200025e0

08006258 <_lseek_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d07      	ldr	r5, [pc, #28]	; (8006278 <_lseek_r+0x20>)
 800625c:	4604      	mov	r4, r0
 800625e:	4608      	mov	r0, r1
 8006260:	4611      	mov	r1, r2
 8006262:	2200      	movs	r2, #0
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fa fe86 	bl	8000f78 <_lseek>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_lseek_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_lseek_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	200025e0 	.word	0x200025e0

0800627c <_read_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d07      	ldr	r5, [pc, #28]	; (800629c <_read_r+0x20>)
 8006280:	4604      	mov	r4, r0
 8006282:	4608      	mov	r0, r1
 8006284:	4611      	mov	r1, r2
 8006286:	2200      	movs	r2, #0
 8006288:	602a      	str	r2, [r5, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	f7fa fe14 	bl	8000eb8 <_read>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_read_r+0x1e>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_read_r+0x1e>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	200025e0 	.word	0x200025e0

080062a0 <cos>:
 80062a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062a2:	eeb0 7b40 	vmov.f64	d7, d0
 80062a6:	ee17 3a90 	vmov	r3, s15
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <cos+0x88>)
 80062ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	4293      	cmp	r3, r2
 80062b2:	dc04      	bgt.n	80062be <cos+0x1e>
 80062b4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8006320 <cos+0x80>
 80062b8:	f000 f9c2 	bl	8006640 <__kernel_cos>
 80062bc:	e004      	b.n	80062c8 <cos+0x28>
 80062be:	4a1b      	ldr	r2, [pc, #108]	; (800632c <cos+0x8c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	dd04      	ble.n	80062ce <cos+0x2e>
 80062c4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80062c8:	b005      	add	sp, #20
 80062ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80062ce:	4668      	mov	r0, sp
 80062d0:	f000 f876 	bl	80063c0 <__ieee754_rem_pio2>
 80062d4:	f000 0003 	and.w	r0, r0, #3
 80062d8:	2801      	cmp	r0, #1
 80062da:	d007      	beq.n	80062ec <cos+0x4c>
 80062dc:	2802      	cmp	r0, #2
 80062de:	d00e      	beq.n	80062fe <cos+0x5e>
 80062e0:	b9a0      	cbnz	r0, 800630c <cos+0x6c>
 80062e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062e6:	ed9d 0b00 	vldr	d0, [sp]
 80062ea:	e7e5      	b.n	80062b8 <cos+0x18>
 80062ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062f0:	ed9d 0b00 	vldr	d0, [sp]
 80062f4:	f000 fc90 	bl	8006c18 <__kernel_sin>
 80062f8:	eeb1 0b40 	vneg.f64	d0, d0
 80062fc:	e7e4      	b.n	80062c8 <cos+0x28>
 80062fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006302:	ed9d 0b00 	vldr	d0, [sp]
 8006306:	f000 f99b 	bl	8006640 <__kernel_cos>
 800630a:	e7f5      	b.n	80062f8 <cos+0x58>
 800630c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006310:	ed9d 0b00 	vldr	d0, [sp]
 8006314:	2001      	movs	r0, #1
 8006316:	f000 fc7f 	bl	8006c18 <__kernel_sin>
 800631a:	e7d5      	b.n	80062c8 <cos+0x28>
 800631c:	f3af 8000 	nop.w
	...
 8006328:	3fe921fb 	.word	0x3fe921fb
 800632c:	7fefffff 	.word	0x7fefffff

08006330 <sin>:
 8006330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006332:	eeb0 7b40 	vmov.f64	d7, d0
 8006336:	ee17 3a90 	vmov	r3, s15
 800633a:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <sin+0x88>)
 800633c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006340:	4293      	cmp	r3, r2
 8006342:	dc05      	bgt.n	8006350 <sin+0x20>
 8006344:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80063b0 <sin+0x80>
 8006348:	2000      	movs	r0, #0
 800634a:	f000 fc65 	bl	8006c18 <__kernel_sin>
 800634e:	e004      	b.n	800635a <sin+0x2a>
 8006350:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <sin+0x8c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	dd04      	ble.n	8006360 <sin+0x30>
 8006356:	ee30 0b40 	vsub.f64	d0, d0, d0
 800635a:	b005      	add	sp, #20
 800635c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006360:	4668      	mov	r0, sp
 8006362:	f000 f82d 	bl	80063c0 <__ieee754_rem_pio2>
 8006366:	f000 0003 	and.w	r0, r0, #3
 800636a:	2801      	cmp	r0, #1
 800636c:	d008      	beq.n	8006380 <sin+0x50>
 800636e:	2802      	cmp	r0, #2
 8006370:	d00d      	beq.n	800638e <sin+0x5e>
 8006372:	b9b0      	cbnz	r0, 80063a2 <sin+0x72>
 8006374:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006378:	ed9d 0b00 	vldr	d0, [sp]
 800637c:	2001      	movs	r0, #1
 800637e:	e7e4      	b.n	800634a <sin+0x1a>
 8006380:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006384:	ed9d 0b00 	vldr	d0, [sp]
 8006388:	f000 f95a 	bl	8006640 <__kernel_cos>
 800638c:	e7e5      	b.n	800635a <sin+0x2a>
 800638e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006392:	ed9d 0b00 	vldr	d0, [sp]
 8006396:	2001      	movs	r0, #1
 8006398:	f000 fc3e 	bl	8006c18 <__kernel_sin>
 800639c:	eeb1 0b40 	vneg.f64	d0, d0
 80063a0:	e7db      	b.n	800635a <sin+0x2a>
 80063a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063a6:	ed9d 0b00 	vldr	d0, [sp]
 80063aa:	f000 f949 	bl	8006640 <__kernel_cos>
 80063ae:	e7f5      	b.n	800639c <sin+0x6c>
	...
 80063b8:	3fe921fb 	.word	0x3fe921fb
 80063bc:	7fefffff 	.word	0x7fefffff

080063c0 <__ieee754_rem_pio2>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	eeb0 7b40 	vmov.f64	d7, d0
 80063c6:	ee17 5a90 	vmov	r5, s15
 80063ca:	4b97      	ldr	r3, [pc, #604]	; (8006628 <__ieee754_rem_pio2+0x268>)
 80063cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80063d0:	429e      	cmp	r6, r3
 80063d2:	b088      	sub	sp, #32
 80063d4:	4604      	mov	r4, r0
 80063d6:	dc07      	bgt.n	80063e8 <__ieee754_rem_pio2+0x28>
 80063d8:	2200      	movs	r2, #0
 80063da:	2300      	movs	r3, #0
 80063dc:	ed84 0b00 	vstr	d0, [r4]
 80063e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80063e4:	2000      	movs	r0, #0
 80063e6:	e01b      	b.n	8006420 <__ieee754_rem_pio2+0x60>
 80063e8:	4b90      	ldr	r3, [pc, #576]	; (800662c <__ieee754_rem_pio2+0x26c>)
 80063ea:	429e      	cmp	r6, r3
 80063ec:	dc3b      	bgt.n	8006466 <__ieee754_rem_pio2+0xa6>
 80063ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80065e8 <__ieee754_rem_pio2+0x228>
 80063f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80063fc:	dd19      	ble.n	8006432 <__ieee754_rem_pio2+0x72>
 80063fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006402:	429e      	cmp	r6, r3
 8006404:	d00e      	beq.n	8006424 <__ieee754_rem_pio2+0x64>
 8006406:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80065f0 <__ieee754_rem_pio2+0x230>
 800640a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800640e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006412:	ed84 5b00 	vstr	d5, [r4]
 8006416:	ee37 7b46 	vsub.f64	d7, d7, d6
 800641a:	ed84 7b02 	vstr	d7, [r4, #8]
 800641e:	2001      	movs	r0, #1
 8006420:	b008      	add	sp, #32
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80065f8 <__ieee754_rem_pio2+0x238>
 8006428:	ee37 7b46 	vsub.f64	d7, d7, d6
 800642c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8006600 <__ieee754_rem_pio2+0x240>
 8006430:	e7eb      	b.n	800640a <__ieee754_rem_pio2+0x4a>
 8006432:	429e      	cmp	r6, r3
 8006434:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006438:	d00e      	beq.n	8006458 <__ieee754_rem_pio2+0x98>
 800643a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80065f0 <__ieee754_rem_pio2+0x230>
 800643e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006442:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006446:	ed84 5b00 	vstr	d5, [r4]
 800644a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	ed84 7b02 	vstr	d7, [r4, #8]
 8006456:	e7e3      	b.n	8006420 <__ieee754_rem_pio2+0x60>
 8006458:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80065f8 <__ieee754_rem_pio2+0x238>
 800645c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006460:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8006600 <__ieee754_rem_pio2+0x240>
 8006464:	e7eb      	b.n	800643e <__ieee754_rem_pio2+0x7e>
 8006466:	4b72      	ldr	r3, [pc, #456]	; (8006630 <__ieee754_rem_pio2+0x270>)
 8006468:	429e      	cmp	r6, r3
 800646a:	dc6e      	bgt.n	800654a <__ieee754_rem_pio2+0x18a>
 800646c:	f000 fc2c 	bl	8006cc8 <fabs>
 8006470:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006474:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006608 <__ieee754_rem_pio2+0x248>
 8006478:	eea0 7b06 	vfma.f64	d7, d0, d6
 800647c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006480:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006484:	ee17 0a90 	vmov	r0, s15
 8006488:	eeb1 4b45 	vneg.f64	d4, d5
 800648c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80065e8 <__ieee754_rem_pio2+0x228>
 8006490:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006494:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80065f0 <__ieee754_rem_pio2+0x230>
 8006498:	281f      	cmp	r0, #31
 800649a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800649e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80064a2:	dc08      	bgt.n	80064b6 <__ieee754_rem_pio2+0xf6>
 80064a4:	4b63      	ldr	r3, [pc, #396]	; (8006634 <__ieee754_rem_pio2+0x274>)
 80064a6:	1e42      	subs	r2, r0, #1
 80064a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ac:	42b3      	cmp	r3, r6
 80064ae:	d002      	beq.n	80064b6 <__ieee754_rem_pio2+0xf6>
 80064b0:	ed84 6b00 	vstr	d6, [r4]
 80064b4:	e024      	b.n	8006500 <__ieee754_rem_pio2+0x140>
 80064b6:	ee16 3a90 	vmov	r3, s13
 80064ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80064be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80064c8:	ddf2      	ble.n	80064b0 <__ieee754_rem_pio2+0xf0>
 80064ca:	eeb0 6b40 	vmov.f64	d6, d0
 80064ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80065f8 <__ieee754_rem_pio2+0x238>
 80064d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80064d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80064da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80064de:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8006600 <__ieee754_rem_pio2+0x240>
 80064e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80064e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80064ea:	ee13 3a90 	vmov	r3, s7
 80064ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b31      	cmp	r3, #49	; 0x31
 80064f6:	dc17      	bgt.n	8006528 <__ieee754_rem_pio2+0x168>
 80064f8:	eeb0 0b46 	vmov.f64	d0, d6
 80064fc:	ed84 3b00 	vstr	d3, [r4]
 8006500:	ed94 6b00 	vldr	d6, [r4]
 8006504:	2d00      	cmp	r5, #0
 8006506:	ee30 0b46 	vsub.f64	d0, d0, d6
 800650a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800650e:	ed84 7b02 	vstr	d7, [r4, #8]
 8006512:	da85      	bge.n	8006420 <__ieee754_rem_pio2+0x60>
 8006514:	eeb1 6b46 	vneg.f64	d6, d6
 8006518:	ed84 6b00 	vstr	d6, [r4]
 800651c:	eeb1 7b47 	vneg.f64	d7, d7
 8006520:	4240      	negs	r0, r0
 8006522:	ed84 7b02 	vstr	d7, [r4, #8]
 8006526:	e77b      	b.n	8006420 <__ieee754_rem_pio2+0x60>
 8006528:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8006610 <__ieee754_rem_pio2+0x250>
 800652c:	eeb0 0b46 	vmov.f64	d0, d6
 8006530:	eea4 0b03 	vfma.f64	d0, d4, d3
 8006534:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006538:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006618 <__ieee754_rem_pio2+0x258>
 800653c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006540:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8006544:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006548:	e7b2      	b.n	80064b0 <__ieee754_rem_pio2+0xf0>
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <__ieee754_rem_pio2+0x278>)
 800654c:	429e      	cmp	r6, r3
 800654e:	dd06      	ble.n	800655e <__ieee754_rem_pio2+0x19e>
 8006550:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006554:	ed80 7b02 	vstr	d7, [r0, #8]
 8006558:	ed80 7b00 	vstr	d7, [r0]
 800655c:	e742      	b.n	80063e4 <__ieee754_rem_pio2+0x24>
 800655e:	1532      	asrs	r2, r6, #20
 8006560:	ee10 0a10 	vmov	r0, s0
 8006564:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006568:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800656c:	ec41 0b17 	vmov	d7, r0, r1
 8006570:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006574:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8006620 <__ieee754_rem_pio2+0x260>
 8006578:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800657c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006580:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006584:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006588:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800658c:	a902      	add	r1, sp, #8
 800658e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006592:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006596:	ed8d 6b04 	vstr	d6, [sp, #16]
 800659a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800659e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80065a2:	2603      	movs	r6, #3
 80065a4:	4608      	mov	r0, r1
 80065a6:	ed91 7b04 	vldr	d7, [r1, #16]
 80065aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80065ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b2:	4633      	mov	r3, r6
 80065b4:	f1a1 0108 	sub.w	r1, r1, #8
 80065b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80065bc:	d0f3      	beq.n	80065a6 <__ieee754_rem_pio2+0x1e6>
 80065be:	491f      	ldr	r1, [pc, #124]	; (800663c <__ieee754_rem_pio2+0x27c>)
 80065c0:	9101      	str	r1, [sp, #4]
 80065c2:	2102      	movs	r1, #2
 80065c4:	9100      	str	r1, [sp, #0]
 80065c6:	4621      	mov	r1, r4
 80065c8:	f000 f8a6 	bl	8006718 <__kernel_rem_pio2>
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	f6bf af27 	bge.w	8006420 <__ieee754_rem_pio2+0x60>
 80065d2:	ed94 7b00 	vldr	d7, [r4]
 80065d6:	eeb1 7b47 	vneg.f64	d7, d7
 80065da:	ed84 7b00 	vstr	d7, [r4]
 80065de:	ed94 7b02 	vldr	d7, [r4, #8]
 80065e2:	e79b      	b.n	800651c <__ieee754_rem_pio2+0x15c>
 80065e4:	f3af 8000 	nop.w
 80065e8:	54400000 	.word	0x54400000
 80065ec:	3ff921fb 	.word	0x3ff921fb
 80065f0:	1a626331 	.word	0x1a626331
 80065f4:	3dd0b461 	.word	0x3dd0b461
 80065f8:	1a600000 	.word	0x1a600000
 80065fc:	3dd0b461 	.word	0x3dd0b461
 8006600:	2e037073 	.word	0x2e037073
 8006604:	3ba3198a 	.word	0x3ba3198a
 8006608:	6dc9c883 	.word	0x6dc9c883
 800660c:	3fe45f30 	.word	0x3fe45f30
 8006610:	2e000000 	.word	0x2e000000
 8006614:	3ba3198a 	.word	0x3ba3198a
 8006618:	252049c1 	.word	0x252049c1
 800661c:	397b839a 	.word	0x397b839a
 8006620:	00000000 	.word	0x00000000
 8006624:	41700000 	.word	0x41700000
 8006628:	3fe921fb 	.word	0x3fe921fb
 800662c:	4002d97b 	.word	0x4002d97b
 8006630:	413921fb 	.word	0x413921fb
 8006634:	0801341c 	.word	0x0801341c
 8006638:	7fefffff 	.word	0x7fefffff
 800663c:	0801349c 	.word	0x0801349c

08006640 <__kernel_cos>:
 8006640:	ee10 1a90 	vmov	r1, s1
 8006644:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006648:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800664c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006650:	da05      	bge.n	800665e <__kernel_cos+0x1e>
 8006652:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006656:	ee17 3a90 	vmov	r3, s15
 800665a:	2b00      	cmp	r3, #0
 800665c:	d03d      	beq.n	80066da <__kernel_cos+0x9a>
 800665e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8006662:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80066e0 <__kernel_cos+0xa0>
 8006666:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80066e8 <__kernel_cos+0xa8>
 800666a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800666e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80066f0 <__kernel_cos+0xb0>
 8006672:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006676:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80066f8 <__kernel_cos+0xb8>
 800667a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800667e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006700 <__kernel_cos+0xc0>
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <__kernel_cos+0xd0>)
 8006684:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006688:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8006708 <__kernel_cos+0xc8>
 800668c:	4299      	cmp	r1, r3
 800668e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006692:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006696:	ee26 5b03 	vmul.f64	d5, d6, d3
 800669a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800669e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80066a2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80066a6:	dc04      	bgt.n	80066b2 <__kernel_cos+0x72>
 80066a8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80066ac:	ee34 0b46 	vsub.f64	d0, d4, d6
 80066b0:	4770      	bx	lr
 80066b2:	4b18      	ldr	r3, [pc, #96]	; (8006714 <__kernel_cos+0xd4>)
 80066b4:	4299      	cmp	r1, r3
 80066b6:	dc0d      	bgt.n	80066d4 <__kernel_cos+0x94>
 80066b8:	2200      	movs	r2, #0
 80066ba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80066be:	ec43 2b15 	vmov	d5, r2, r3
 80066c2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80066c6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80066ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 80066d2:	4770      	bx	lr
 80066d4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80066d8:	e7f3      	b.n	80066c2 <__kernel_cos+0x82>
 80066da:	eeb0 0b44 	vmov.f64	d0, d4
 80066de:	4770      	bx	lr
 80066e0:	be8838d4 	.word	0xbe8838d4
 80066e4:	bda8fae9 	.word	0xbda8fae9
 80066e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80066ec:	3e21ee9e 	.word	0x3e21ee9e
 80066f0:	809c52ad 	.word	0x809c52ad
 80066f4:	be927e4f 	.word	0xbe927e4f
 80066f8:	19cb1590 	.word	0x19cb1590
 80066fc:	3efa01a0 	.word	0x3efa01a0
 8006700:	16c15177 	.word	0x16c15177
 8006704:	bf56c16c 	.word	0xbf56c16c
 8006708:	5555554c 	.word	0x5555554c
 800670c:	3fa55555 	.word	0x3fa55555
 8006710:	3fd33332 	.word	0x3fd33332
 8006714:	3fe90000 	.word	0x3fe90000

08006718 <__kernel_rem_pio2>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	ed2d 8b06 	vpush	{d8-d10}
 8006720:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8006724:	469b      	mov	fp, r3
 8006726:	460f      	mov	r7, r1
 8006728:	4bcf      	ldr	r3, [pc, #828]	; (8006a68 <__kernel_rem_pio2+0x350>)
 800672a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800672c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8006730:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006734:	9000      	str	r0, [sp, #0]
 8006736:	f112 0f14 	cmn.w	r2, #20
 800673a:	bfa8      	it	ge
 800673c:	2318      	movge	r3, #24
 800673e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8006742:	bfb8      	it	lt
 8006744:	2300      	movlt	r3, #0
 8006746:	f06f 0417 	mvn.w	r4, #23
 800674a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8006a50 <__kernel_rem_pio2+0x338>
 800674e:	bfa4      	itt	ge
 8006750:	f1a2 0a03 	subge.w	sl, r2, #3
 8006754:	fb9a f3f3 	sdivge	r3, sl, r3
 8006758:	fb03 4404 	mla	r4, r3, r4, r4
 800675c:	1a5d      	subs	r5, r3, r1
 800675e:	4414      	add	r4, r2
 8006760:	eb09 0601 	add.w	r6, r9, r1
 8006764:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8006768:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800676c:	2200      	movs	r2, #0
 800676e:	42b2      	cmp	r2, r6
 8006770:	dd12      	ble.n	8006798 <__kernel_rem_pio2+0x80>
 8006772:	aa18      	add	r2, sp, #96	; 0x60
 8006774:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8006778:	460e      	mov	r6, r1
 800677a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800677e:	f1cb 0a01 	rsb	sl, fp, #1
 8006782:	eb0a 0006 	add.w	r0, sl, r6
 8006786:	4581      	cmp	r9, r0
 8006788:	db25      	blt.n	80067d6 <__kernel_rem_pio2+0xbe>
 800678a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8006a50 <__kernel_rem_pio2+0x338>
 800678e:	f8dd e000 	ldr.w	lr, [sp]
 8006792:	4615      	mov	r5, r2
 8006794:	2000      	movs	r0, #0
 8006796:	e015      	b.n	80067c4 <__kernel_rem_pio2+0xac>
 8006798:	42d5      	cmn	r5, r2
 800679a:	d409      	bmi.n	80067b0 <__kernel_rem_pio2+0x98>
 800679c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80067a0:	ee07 0a90 	vmov	s15, r0
 80067a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067a8:	eca8 7b02 	vstmia	r8!, {d7}
 80067ac:	3201      	adds	r2, #1
 80067ae:	e7de      	b.n	800676e <__kernel_rem_pio2+0x56>
 80067b0:	eeb0 7b46 	vmov.f64	d7, d6
 80067b4:	e7f8      	b.n	80067a8 <__kernel_rem_pio2+0x90>
 80067b6:	ecbe 5b02 	vldmia	lr!, {d5}
 80067ba:	ed95 6b00 	vldr	d6, [r5]
 80067be:	3001      	adds	r0, #1
 80067c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80067c4:	4288      	cmp	r0, r1
 80067c6:	f1a5 0508 	sub.w	r5, r5, #8
 80067ca:	ddf4      	ble.n	80067b6 <__kernel_rem_pio2+0x9e>
 80067cc:	eca8 7b02 	vstmia	r8!, {d7}
 80067d0:	3208      	adds	r2, #8
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7d5      	b.n	8006782 <__kernel_rem_pio2+0x6a>
 80067d6:	aa04      	add	r2, sp, #16
 80067d8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8006a58 <__kernel_rem_pio2+0x340>
 80067dc:	ed9f aba0 	vldr	d10, [pc, #640]	; 8006a60 <__kernel_rem_pio2+0x348>
 80067e0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80067e4:	9201      	str	r2, [sp, #4]
 80067e6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80067ea:	464e      	mov	r6, r9
 80067ec:	ab90      	add	r3, sp, #576	; 0x240
 80067ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067f2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80067f6:	ab04      	add	r3, sp, #16
 80067f8:	4618      	mov	r0, r3
 80067fa:	4632      	mov	r2, r6
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	dc4e      	bgt.n	800689e <__kernel_rem_pio2+0x186>
 8006800:	4620      	mov	r0, r4
 8006802:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8006806:	f000 fadf 	bl	8006dc8 <scalbn>
 800680a:	eeb0 8b40 	vmov.f64	d8, d0
 800680e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006812:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006816:	f000 fa63 	bl	8006ce0 <floor>
 800681a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800681e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006822:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006826:	2c00      	cmp	r4, #0
 8006828:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800682c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8006830:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006834:	ee17 8a90 	vmov	r8, s15
 8006838:	dd46      	ble.n	80068c8 <__kernel_rem_pio2+0x1b0>
 800683a:	1e70      	subs	r0, r6, #1
 800683c:	aa04      	add	r2, sp, #16
 800683e:	f1c4 0c18 	rsb	ip, r4, #24
 8006842:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8006846:	fa45 f20c 	asr.w	r2, r5, ip
 800684a:	4490      	add	r8, r2
 800684c:	fa02 f20c 	lsl.w	r2, r2, ip
 8006850:	1aad      	subs	r5, r5, r2
 8006852:	aa04      	add	r2, sp, #16
 8006854:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8006858:	f1c4 0217 	rsb	r2, r4, #23
 800685c:	4115      	asrs	r5, r2
 800685e:	2d00      	cmp	r5, #0
 8006860:	dd41      	ble.n	80068e6 <__kernel_rem_pio2+0x1ce>
 8006862:	f04f 0c00 	mov.w	ip, #0
 8006866:	f108 0801 	add.w	r8, r8, #1
 800686a:	4660      	mov	r0, ip
 800686c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006870:	4566      	cmp	r6, ip
 8006872:	dc69      	bgt.n	8006948 <__kernel_rem_pio2+0x230>
 8006874:	2c00      	cmp	r4, #0
 8006876:	dd03      	ble.n	8006880 <__kernel_rem_pio2+0x168>
 8006878:	2c01      	cmp	r4, #1
 800687a:	d076      	beq.n	800696a <__kernel_rem_pio2+0x252>
 800687c:	2c02      	cmp	r4, #2
 800687e:	d07f      	beq.n	8006980 <__kernel_rem_pio2+0x268>
 8006880:	2d02      	cmp	r5, #2
 8006882:	d130      	bne.n	80068e6 <__kernel_rem_pio2+0x1ce>
 8006884:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006888:	ee30 8b48 	vsub.f64	d8, d0, d8
 800688c:	b358      	cbz	r0, 80068e6 <__kernel_rem_pio2+0x1ce>
 800688e:	4620      	mov	r0, r4
 8006890:	9102      	str	r1, [sp, #8]
 8006892:	f000 fa99 	bl	8006dc8 <scalbn>
 8006896:	9902      	ldr	r1, [sp, #8]
 8006898:	ee38 8b40 	vsub.f64	d8, d8, d0
 800689c:	e023      	b.n	80068e6 <__kernel_rem_pio2+0x1ce>
 800689e:	ee20 7b09 	vmul.f64	d7, d0, d9
 80068a2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80068a6:	3a01      	subs	r2, #1
 80068a8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80068ac:	ad68      	add	r5, sp, #416	; 0x1a0
 80068ae:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80068b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80068b6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80068ba:	eca0 0a01 	vstmia	r0!, {s0}
 80068be:	ed95 0b00 	vldr	d0, [r5]
 80068c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80068c6:	e799      	b.n	80067fc <__kernel_rem_pio2+0xe4>
 80068c8:	d105      	bne.n	80068d6 <__kernel_rem_pio2+0x1be>
 80068ca:	1e72      	subs	r2, r6, #1
 80068cc:	a804      	add	r0, sp, #16
 80068ce:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80068d2:	15ed      	asrs	r5, r5, #23
 80068d4:	e7c3      	b.n	800685e <__kernel_rem_pio2+0x146>
 80068d6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80068da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	da2f      	bge.n	8006944 <__kernel_rem_pio2+0x22c>
 80068e4:	2500      	movs	r5, #0
 80068e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80068ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ee:	f040 8087 	bne.w	8006a00 <__kernel_rem_pio2+0x2e8>
 80068f2:	1e73      	subs	r3, r6, #1
 80068f4:	4618      	mov	r0, r3
 80068f6:	f04f 0c00 	mov.w	ip, #0
 80068fa:	4548      	cmp	r0, r9
 80068fc:	da47      	bge.n	800698e <__kernel_rem_pio2+0x276>
 80068fe:	f1bc 0f00 	cmp.w	ip, #0
 8006902:	d070      	beq.n	80069e6 <__kernel_rem_pio2+0x2ce>
 8006904:	aa04      	add	r2, sp, #16
 8006906:	3c18      	subs	r4, #24
 8006908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800690c:	2a00      	cmp	r2, #0
 800690e:	d075      	beq.n	80069fc <__kernel_rem_pio2+0x2e4>
 8006910:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006914:	4620      	mov	r0, r4
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	f000 fa56 	bl	8006dc8 <scalbn>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006a58 <__kernel_rem_pio2+0x340>
 8006922:	461a      	mov	r2, r3
 8006924:	2a00      	cmp	r2, #0
 8006926:	f280 80ac 	bge.w	8006a82 <__kernel_rem_pio2+0x36a>
 800692a:	4619      	mov	r1, r3
 800692c:	2000      	movs	r0, #0
 800692e:	2900      	cmp	r1, #0
 8006930:	f2c0 80cd 	blt.w	8006ace <__kernel_rem_pio2+0x3b6>
 8006934:	aa68      	add	r2, sp, #416	; 0x1a0
 8006936:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800693a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8006a50 <__kernel_rem_pio2+0x338>
 800693e:	4e4b      	ldr	r6, [pc, #300]	; (8006a6c <__kernel_rem_pio2+0x354>)
 8006940:	2200      	movs	r2, #0
 8006942:	e0b8      	b.n	8006ab6 <__kernel_rem_pio2+0x39e>
 8006944:	2502      	movs	r5, #2
 8006946:	e78c      	b.n	8006862 <__kernel_rem_pio2+0x14a>
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	b948      	cbnz	r0, 8006960 <__kernel_rem_pio2+0x248>
 800694c:	b11a      	cbz	r2, 8006956 <__kernel_rem_pio2+0x23e>
 800694e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2201      	movs	r2, #1
 8006956:	f10c 0c01 	add.w	ip, ip, #1
 800695a:	3304      	adds	r3, #4
 800695c:	4610      	mov	r0, r2
 800695e:	e787      	b.n	8006870 <__kernel_rem_pio2+0x158>
 8006960:	ebae 0202 	sub.w	r2, lr, r2
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	4602      	mov	r2, r0
 8006968:	e7f5      	b.n	8006956 <__kernel_rem_pio2+0x23e>
 800696a:	1e72      	subs	r2, r6, #1
 800696c:	ab04      	add	r3, sp, #16
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006976:	f10d 0c10 	add.w	ip, sp, #16
 800697a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800697e:	e77f      	b.n	8006880 <__kernel_rem_pio2+0x168>
 8006980:	1e72      	subs	r2, r6, #1
 8006982:	ab04      	add	r3, sp, #16
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800698c:	e7f3      	b.n	8006976 <__kernel_rem_pio2+0x25e>
 800698e:	aa04      	add	r2, sp, #16
 8006990:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8006994:	3801      	subs	r0, #1
 8006996:	ea4c 0c02 	orr.w	ip, ip, r2
 800699a:	e7ae      	b.n	80068fa <__kernel_rem_pio2+0x1e2>
 800699c:	3001      	adds	r0, #1
 800699e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	d0fa      	beq.n	800699c <__kernel_rem_pio2+0x284>
 80069a6:	eb06 020b 	add.w	r2, r6, fp
 80069aa:	ad18      	add	r5, sp, #96	; 0x60
 80069ac:	1c73      	adds	r3, r6, #1
 80069ae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80069b2:	4406      	add	r6, r0
 80069b4:	429e      	cmp	r6, r3
 80069b6:	f6ff af19 	blt.w	80067ec <__kernel_rem_pio2+0xd4>
 80069ba:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80069be:	9d00      	ldr	r5, [sp, #0]
 80069c0:	ee07 0a90 	vmov	s15, r0
 80069c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069c8:	2000      	movs	r0, #0
 80069ca:	eca2 7b02 	vstmia	r2!, {d7}
 80069ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006a50 <__kernel_rem_pio2+0x338>
 80069d2:	4694      	mov	ip, r2
 80069d4:	4288      	cmp	r0, r1
 80069d6:	dd09      	ble.n	80069ec <__kernel_rem_pio2+0x2d4>
 80069d8:	a868      	add	r0, sp, #416	; 0x1a0
 80069da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80069de:	ed80 7b00 	vstr	d7, [r0]
 80069e2:	3301      	adds	r3, #1
 80069e4:	e7e6      	b.n	80069b4 <__kernel_rem_pio2+0x29c>
 80069e6:	9b01      	ldr	r3, [sp, #4]
 80069e8:	2001      	movs	r0, #1
 80069ea:	e7d8      	b.n	800699e <__kernel_rem_pio2+0x286>
 80069ec:	ecb5 5b02 	vldmia	r5!, {d5}
 80069f0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80069f4:	3001      	adds	r0, #1
 80069f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80069fa:	e7eb      	b.n	80069d4 <__kernel_rem_pio2+0x2bc>
 80069fc:	3b01      	subs	r3, #1
 80069fe:	e781      	b.n	8006904 <__kernel_rem_pio2+0x1ec>
 8006a00:	4260      	negs	r0, r4
 8006a02:	eeb0 0b48 	vmov.f64	d0, d8
 8006a06:	f000 f9df 	bl	8006dc8 <scalbn>
 8006a0a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8006a60 <__kernel_rem_pio2+0x348>
 8006a0e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	db2b      	blt.n	8006a70 <__kernel_rem_pio2+0x358>
 8006a18:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8006a58 <__kernel_rem_pio2+0x340>
 8006a1c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006a20:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8006a24:	aa04      	add	r2, sp, #16
 8006a26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006a2a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006a2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006a32:	a904      	add	r1, sp, #16
 8006a34:	ee10 3a10 	vmov	r3, s0
 8006a38:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006a3c:	ee17 2a10 	vmov	r2, s14
 8006a40:	1c73      	adds	r3, r6, #1
 8006a42:	3418      	adds	r4, #24
 8006a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006a48:	e762      	b.n	8006910 <__kernel_rem_pio2+0x1f8>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
	...
 8006a5c:	3e700000 	.word	0x3e700000
 8006a60:	00000000 	.word	0x00000000
 8006a64:	41700000 	.word	0x41700000
 8006a68:	080135e8 	.word	0x080135e8
 8006a6c:	080135a8 	.word	0x080135a8
 8006a70:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006a74:	aa04      	add	r2, sp, #16
 8006a76:	ee10 3a10 	vmov	r3, s0
 8006a7a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006a7e:	4633      	mov	r3, r6
 8006a80:	e746      	b.n	8006910 <__kernel_rem_pio2+0x1f8>
 8006a82:	a804      	add	r0, sp, #16
 8006a84:	a968      	add	r1, sp, #416	; 0x1a0
 8006a86:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006a8a:	9000      	str	r0, [sp, #0]
 8006a8c:	ee07 0a90 	vmov	s15, r0
 8006a90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006a94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8006a9e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006aa2:	ed81 7b00 	vstr	d7, [r1]
 8006aa6:	e73d      	b.n	8006924 <__kernel_rem_pio2+0x20c>
 8006aa8:	ecb6 5b02 	vldmia	r6!, {d5}
 8006aac:	ecb4 6b02 	vldmia	r4!, {d6}
 8006ab0:	3201      	adds	r2, #1
 8006ab2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006ab6:	454a      	cmp	r2, r9
 8006ab8:	dc01      	bgt.n	8006abe <__kernel_rem_pio2+0x3a6>
 8006aba:	4290      	cmp	r0, r2
 8006abc:	daf4      	bge.n	8006aa8 <__kernel_rem_pio2+0x390>
 8006abe:	aa40      	add	r2, sp, #256	; 0x100
 8006ac0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006ac4:	ed82 7b00 	vstr	d7, [r2]
 8006ac8:	3901      	subs	r1, #1
 8006aca:	3001      	adds	r0, #1
 8006acc:	e72f      	b.n	800692e <__kernel_rem_pio2+0x216>
 8006ace:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8006ad0:	2a02      	cmp	r2, #2
 8006ad2:	dc0a      	bgt.n	8006aea <__kernel_rem_pio2+0x3d2>
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	dc5a      	bgt.n	8006b8e <__kernel_rem_pio2+0x476>
 8006ad8:	d039      	beq.n	8006b4e <__kernel_rem_pio2+0x436>
 8006ada:	f008 0007 	and.w	r0, r8, #7
 8006ade:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8006ae2:	ecbd 8b06 	vpop	{d8-d10}
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8006aec:	2a03      	cmp	r2, #3
 8006aee:	d1f4      	bne.n	8006ada <__kernel_rem_pio2+0x3c2>
 8006af0:	aa40      	add	r2, sp, #256	; 0x100
 8006af2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f1a1 0108 	sub.w	r1, r1, #8
 8006b00:	dc52      	bgt.n	8006ba8 <__kernel_rem_pio2+0x490>
 8006b02:	4619      	mov	r1, r3
 8006b04:	2901      	cmp	r1, #1
 8006b06:	f1a2 0208 	sub.w	r2, r2, #8
 8006b0a:	dc5d      	bgt.n	8006bc8 <__kernel_rem_pio2+0x4b0>
 8006b0c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8006c10 <__kernel_rem_pio2+0x4f8>
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	dc69      	bgt.n	8006be8 <__kernel_rem_pio2+0x4d0>
 8006b14:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8006b18:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	d16c      	bne.n	8006bfa <__kernel_rem_pio2+0x4e2>
 8006b20:	ed87 5b00 	vstr	d5, [r7]
 8006b24:	ed87 6b02 	vstr	d6, [r7, #8]
 8006b28:	ed87 7b04 	vstr	d7, [r7, #16]
 8006b2c:	e7d5      	b.n	8006ada <__kernel_rem_pio2+0x3c2>
 8006b2e:	aa40      	add	r2, sp, #256	; 0x100
 8006b30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006b34:	ed92 6b00 	vldr	d6, [r2]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	daf5      	bge.n	8006b2e <__kernel_rem_pio2+0x416>
 8006b42:	b10d      	cbz	r5, 8006b48 <__kernel_rem_pio2+0x430>
 8006b44:	eeb1 7b47 	vneg.f64	d7, d7
 8006b48:	ed87 7b00 	vstr	d7, [r7]
 8006b4c:	e7c5      	b.n	8006ada <__kernel_rem_pio2+0x3c2>
 8006b4e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006c10 <__kernel_rem_pio2+0x4f8>
 8006b52:	e7f4      	b.n	8006b3e <__kernel_rem_pio2+0x426>
 8006b54:	a940      	add	r1, sp, #256	; 0x100
 8006b56:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006b5a:	ed91 7b00 	vldr	d7, [r1]
 8006b5e:	3a01      	subs	r2, #1
 8006b60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	daf5      	bge.n	8006b54 <__kernel_rem_pio2+0x43c>
 8006b68:	b1ad      	cbz	r5, 8006b96 <__kernel_rem_pio2+0x47e>
 8006b6a:	eeb1 7b46 	vneg.f64	d7, d6
 8006b6e:	ed87 7b00 	vstr	d7, [r7]
 8006b72:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8006b76:	a942      	add	r1, sp, #264	; 0x108
 8006b78:	2201      	movs	r2, #1
 8006b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	da0c      	bge.n	8006b9c <__kernel_rem_pio2+0x484>
 8006b82:	b10d      	cbz	r5, 8006b88 <__kernel_rem_pio2+0x470>
 8006b84:	eeb1 7b47 	vneg.f64	d7, d7
 8006b88:	ed87 7b02 	vstr	d7, [r7, #8]
 8006b8c:	e7a5      	b.n	8006ada <__kernel_rem_pio2+0x3c2>
 8006b8e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8006c10 <__kernel_rem_pio2+0x4f8>
 8006b92:	461a      	mov	r2, r3
 8006b94:	e7e6      	b.n	8006b64 <__kernel_rem_pio2+0x44c>
 8006b96:	eeb0 7b46 	vmov.f64	d7, d6
 8006b9a:	e7e8      	b.n	8006b6e <__kernel_rem_pio2+0x456>
 8006b9c:	ecb1 6b02 	vldmia	r1!, {d6}
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ba6:	e7ea      	b.n	8006b7e <__kernel_rem_pio2+0x466>
 8006ba8:	ed91 7b00 	vldr	d7, [r1]
 8006bac:	ed91 5b02 	vldr	d5, [r1, #8]
 8006bb0:	3801      	subs	r0, #1
 8006bb2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006bb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006bba:	ed81 6b00 	vstr	d6, [r1]
 8006bbe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006bc2:	ed81 7b02 	vstr	d7, [r1, #8]
 8006bc6:	e798      	b.n	8006afa <__kernel_rem_pio2+0x3e2>
 8006bc8:	ed92 7b00 	vldr	d7, [r2]
 8006bcc:	ed92 5b02 	vldr	d5, [r2, #8]
 8006bd0:	3901      	subs	r1, #1
 8006bd2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006bd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006bda:	ed82 6b00 	vstr	d6, [r2]
 8006bde:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006be2:	ed82 7b02 	vstr	d7, [r2, #8]
 8006be6:	e78d      	b.n	8006b04 <__kernel_rem_pio2+0x3ec>
 8006be8:	aa40      	add	r2, sp, #256	; 0x100
 8006bea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006bee:	ed92 6b00 	vldr	d6, [r2]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bf8:	e78a      	b.n	8006b10 <__kernel_rem_pio2+0x3f8>
 8006bfa:	eeb1 5b45 	vneg.f64	d5, d5
 8006bfe:	eeb1 6b46 	vneg.f64	d6, d6
 8006c02:	ed87 5b00 	vstr	d5, [r7]
 8006c06:	eeb1 7b47 	vneg.f64	d7, d7
 8006c0a:	ed87 6b02 	vstr	d6, [r7, #8]
 8006c0e:	e78b      	b.n	8006b28 <__kernel_rem_pio2+0x410>
	...

08006c18 <__kernel_sin>:
 8006c18:	ee10 3a90 	vmov	r3, s1
 8006c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006c24:	da04      	bge.n	8006c30 <__kernel_sin+0x18>
 8006c26:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006c2a:	ee17 3a90 	vmov	r3, s15
 8006c2e:	b35b      	cbz	r3, 8006c88 <__kernel_sin+0x70>
 8006c30:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006c34:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006c38:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006c90 <__kernel_sin+0x78>
 8006c3c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006c98 <__kernel_sin+0x80>
 8006c40:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006c44:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006ca0 <__kernel_sin+0x88>
 8006c48:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006c4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006ca8 <__kernel_sin+0x90>
 8006c50:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006c54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006cb0 <__kernel_sin+0x98>
 8006c58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006c5c:	b930      	cbnz	r0, 8006c6c <__kernel_sin+0x54>
 8006c5e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006cb8 <__kernel_sin+0xa0>
 8006c62:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006c66:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006c6a:	4770      	bx	lr
 8006c6c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006c70:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006c74:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006c78:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006c7c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006cc0 <__kernel_sin+0xa8>
 8006c80:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006c84:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	f3af 8000 	nop.w
 8006c90:	5acfd57c 	.word	0x5acfd57c
 8006c94:	3de5d93a 	.word	0x3de5d93a
 8006c98:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c9c:	be5ae5e6 	.word	0xbe5ae5e6
 8006ca0:	57b1fe7d 	.word	0x57b1fe7d
 8006ca4:	3ec71de3 	.word	0x3ec71de3
 8006ca8:	19c161d5 	.word	0x19c161d5
 8006cac:	bf2a01a0 	.word	0xbf2a01a0
 8006cb0:	1110f8a6 	.word	0x1110f8a6
 8006cb4:	3f811111 	.word	0x3f811111
 8006cb8:	55555549 	.word	0x55555549
 8006cbc:	bfc55555 	.word	0xbfc55555
 8006cc0:	55555549 	.word	0x55555549
 8006cc4:	3fc55555 	.word	0x3fc55555

08006cc8 <fabs>:
 8006cc8:	ec51 0b10 	vmov	r0, r1, d0
 8006ccc:	ee10 2a10 	vmov	r2, s0
 8006cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cd4:	ec43 2b10 	vmov	d0, r2, r3
 8006cd8:	4770      	bx	lr
 8006cda:	0000      	movs	r0, r0
 8006cdc:	0000      	movs	r0, r0
	...

08006ce0 <floor>:
 8006ce0:	ee10 1a90 	vmov	r1, s1
 8006ce4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ce8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006cec:	2b13      	cmp	r3, #19
 8006cee:	b530      	push	{r4, r5, lr}
 8006cf0:	ee10 0a10 	vmov	r0, s0
 8006cf4:	ee10 5a10 	vmov	r5, s0
 8006cf8:	dc31      	bgt.n	8006d5e <floor+0x7e>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da15      	bge.n	8006d2a <floor+0x4a>
 8006cfe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006db8 <floor+0xd8>
 8006d02:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006d06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	dd07      	ble.n	8006d20 <floor+0x40>
 8006d10:	2900      	cmp	r1, #0
 8006d12:	da4e      	bge.n	8006db2 <floor+0xd2>
 8006d14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d18:	4318      	orrs	r0, r3
 8006d1a:	d001      	beq.n	8006d20 <floor+0x40>
 8006d1c:	4928      	ldr	r1, [pc, #160]	; (8006dc0 <floor+0xe0>)
 8006d1e:	2000      	movs	r0, #0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4602      	mov	r2, r0
 8006d24:	ec43 2b10 	vmov	d0, r2, r3
 8006d28:	e020      	b.n	8006d6c <floor+0x8c>
 8006d2a:	4a26      	ldr	r2, [pc, #152]	; (8006dc4 <floor+0xe4>)
 8006d2c:	411a      	asrs	r2, r3
 8006d2e:	ea01 0402 	and.w	r4, r1, r2
 8006d32:	4304      	orrs	r4, r0
 8006d34:	d01a      	beq.n	8006d6c <floor+0x8c>
 8006d36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006db8 <floor+0xd8>
 8006d3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006d3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	ddeb      	ble.n	8006d20 <floor+0x40>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	bfbe      	ittt	lt
 8006d4c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006d50:	fa40 f303 	asrlt.w	r3, r0, r3
 8006d54:	18c9      	addlt	r1, r1, r3
 8006d56:	ea21 0102 	bic.w	r1, r1, r2
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7e0      	b.n	8006d20 <floor+0x40>
 8006d5e:	2b33      	cmp	r3, #51	; 0x33
 8006d60:	dd05      	ble.n	8006d6e <floor+0x8e>
 8006d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d66:	d101      	bne.n	8006d6c <floor+0x8c>
 8006d68:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006d6c:	bd30      	pop	{r4, r5, pc}
 8006d6e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295
 8006d76:	40e2      	lsrs	r2, r4
 8006d78:	4202      	tst	r2, r0
 8006d7a:	d0f7      	beq.n	8006d6c <floor+0x8c>
 8006d7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006db8 <floor+0xd8>
 8006d80:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006d84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8c:	ddc8      	ble.n	8006d20 <floor+0x40>
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	da02      	bge.n	8006d98 <floor+0xb8>
 8006d92:	2b14      	cmp	r3, #20
 8006d94:	d103      	bne.n	8006d9e <floor+0xbe>
 8006d96:	3101      	adds	r1, #1
 8006d98:	ea20 0002 	bic.w	r0, r0, r2
 8006d9c:	e7c0      	b.n	8006d20 <floor+0x40>
 8006d9e:	2401      	movs	r4, #1
 8006da0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006da4:	fa04 f303 	lsl.w	r3, r4, r3
 8006da8:	4418      	add	r0, r3
 8006daa:	42a8      	cmp	r0, r5
 8006dac:	bf38      	it	cc
 8006dae:	1909      	addcc	r1, r1, r4
 8006db0:	e7f2      	b.n	8006d98 <floor+0xb8>
 8006db2:	2000      	movs	r0, #0
 8006db4:	4601      	mov	r1, r0
 8006db6:	e7b3      	b.n	8006d20 <floor+0x40>
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	bff00000 	.word	0xbff00000
 8006dc4:	000fffff 	.word	0x000fffff

08006dc8 <scalbn>:
 8006dc8:	b082      	sub	sp, #8
 8006dca:	ed8d 0b00 	vstr	d0, [sp]
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006dd4:	b9a2      	cbnz	r2, 8006e00 <scalbn+0x38>
 8006dd6:	9a00      	ldr	r2, [sp, #0]
 8006dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	d03a      	beq.n	8006e56 <scalbn+0x8e>
 8006de0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8006eb8 <scalbn+0xf0>
 8006de4:	4b40      	ldr	r3, [pc, #256]	; (8006ee8 <scalbn+0x120>)
 8006de6:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006dea:	4298      	cmp	r0, r3
 8006dec:	ed8d 7b00 	vstr	d7, [sp]
 8006df0:	da11      	bge.n	8006e16 <scalbn+0x4e>
 8006df2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8006ec0 <scalbn+0xf8>
 8006df6:	ed9d 6b00 	vldr	d6, [sp]
 8006dfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006dfe:	e007      	b.n	8006e10 <scalbn+0x48>
 8006e00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006e04:	428a      	cmp	r2, r1
 8006e06:	d10a      	bne.n	8006e1e <scalbn+0x56>
 8006e08:	ed9d 7b00 	vldr	d7, [sp]
 8006e0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006e10:	ed8d 7b00 	vstr	d7, [sp]
 8006e14:	e01f      	b.n	8006e56 <scalbn+0x8e>
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e1c:	3a36      	subs	r2, #54	; 0x36
 8006e1e:	4402      	add	r2, r0
 8006e20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e24:	428a      	cmp	r2, r1
 8006e26:	dd0a      	ble.n	8006e3e <scalbn+0x76>
 8006e28:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8006ec8 <scalbn+0x100>
 8006e2c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8006ed0 <scalbn+0x108>
 8006e30:	eeb0 6b47 	vmov.f64	d6, d7
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	fe27 7b05 	vselge.f64	d7, d7, d5
 8006e3c:	e7dd      	b.n	8006dfa <scalbn+0x32>
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	dd0d      	ble.n	8006e5e <scalbn+0x96>
 8006e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e4e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e52:	e9cd 0100 	strd	r0, r1, [sp]
 8006e56:	ed9d 0b00 	vldr	d0, [sp]
 8006e5a:	b002      	add	sp, #8
 8006e5c:	4770      	bx	lr
 8006e5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e62:	da18      	bge.n	8006e96 <scalbn+0xce>
 8006e64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006e68:	4298      	cmp	r0, r3
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e70:	dd09      	ble.n	8006e86 <scalbn+0xbe>
 8006e72:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006ec8 <scalbn+0x100>
 8006e76:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8006ed0 <scalbn+0x108>
 8006e7a:	eeb0 6b47 	vmov.f64	d6, d7
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8006e84:	e7b9      	b.n	8006dfa <scalbn+0x32>
 8006e86:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006ec0 <scalbn+0xf8>
 8006e8a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8006ed8 <scalbn+0x110>
 8006e8e:	eeb0 6b47 	vmov.f64	d6, d7
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	e7f4      	b.n	8006e80 <scalbn+0xb8>
 8006e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e9e:	3236      	adds	r2, #54	; 0x36
 8006ea0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ea4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006ea8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8006ee0 <scalbn+0x118>
 8006eac:	ec41 0b17 	vmov	d7, r0, r1
 8006eb0:	e7a3      	b.n	8006dfa <scalbn+0x32>
 8006eb2:	bf00      	nop
 8006eb4:	f3af 8000 	nop.w
 8006eb8:	00000000 	.word	0x00000000
 8006ebc:	43500000 	.word	0x43500000
 8006ec0:	c2f8f359 	.word	0xc2f8f359
 8006ec4:	01a56e1f 	.word	0x01a56e1f
 8006ec8:	8800759c 	.word	0x8800759c
 8006ecc:	7e37e43c 	.word	0x7e37e43c
 8006ed0:	8800759c 	.word	0x8800759c
 8006ed4:	fe37e43c 	.word	0xfe37e43c
 8006ed8:	c2f8f359 	.word	0xc2f8f359
 8006edc:	81a56e1f 	.word	0x81a56e1f
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	3c900000 	.word	0x3c900000
 8006ee8:	ffff3cb0 	.word	0xffff3cb0

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
