
Waveshare_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f8c  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c2c  08008c2c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c34  08008c34  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200000a0  08008cdc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08008cdc  00020610  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b13f  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e3  00000000  00000000  0003b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000589a  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017a19  00000000  00000000  00045342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001009c8  00000000  00000000  0005cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0015d723  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ee0  00000000  00000000  0015d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048dc  00000000  00000000  0015e658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000a0 	.word	0x200000a0
 8000214:	00000000 	.word	0x00000000
 8000218:	08005c88 	.word	0x08005c88

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000a4 	.word	0x200000a4
 8000234:	08005c88 	.word	0x08005c88

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f001 fd93 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f80c 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f91a 	bl	8000774 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 8000540:	f000 f8ba 	bl	80006b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 f8e8 	bl	8000718 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000548:	f000 f876 	bl	8000638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_1in5_test();
 800054c:	f000 fc24 	bl	8000d98 <OLED_1in5_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x20>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fec2 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000578:	f002 fe00 	bl	800317c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <SystemClock_Config+0xdc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <SystemClock_Config+0xdc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xdc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xe0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a25      	ldr	r2, [pc, #148]	; (8000634 <SystemClock_Config+0xe0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xe0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fe2d 	bl	800323c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 f966 	bl	80008b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ec:	f002 fdd6 	bl	800319c <HAL_PWREx_EnableOverDrive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005f6:	f000 f95f 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2103      	movs	r1, #3
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f8be 	bl	8003798 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000622:	f000 f949 	bl	80008b8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_I2C1_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_I2C1_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_I2C1_Init+0x74>)
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x7c>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_I2C1_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_I2C1_Init+0x74>)
 8000674:	f002 f820 	bl	80026b8 <HAL_I2C_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067e:	f000 f91b 	bl	80008b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <MX_I2C1_Init+0x74>)
 8000686:	f002 fb99 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000690:	f000 f912 	bl	80008b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2C1_Init+0x74>)
 8000698:	f002 fbdb 	bl	8002e52 <HAL_I2CEx_ConfigDigitalFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f909 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000c8 	.word	0x200000c8
 80006b0:	40005400 	.word	0x40005400
 80006b4:	2010091a 	.word	0x2010091a

080006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART3_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006fc:	f003 fe76 	bl	80043ec <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f8d7 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000114 	.word	0x20000114
 8000714:	40004800 	.word	0x40004800

08000718 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000726:	2206      	movs	r2, #6
 8000728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2201      	movs	r2, #1
 8000740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	f002 fbc5 	bl	8002eea <HAL_PCD_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8a7 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000198 	.word	0x20000198

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <MX_GPIO_Init+0x134>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a3a      	ldr	r2, [pc, #232]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000820:	4822      	ldr	r0, [pc, #136]	; (80008ac <MX_GPIO_Init+0x138>)
 8000822:	f001 ff2f 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x13c>)
 800082c:	f001 ff2a 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x140>)
 8000848:	f001 fd70 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_GPIO_Init+0x138>)
 8000866:	f001 fd61 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <MX_GPIO_Init+0x13c>)
 8000882:	f001 fd53 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0x13c>)
 800089a:	f001 fd47 	bl	800232c <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40020800 	.word	0x40020800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x44>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x44>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x44>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x44>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ae      	sub	sp, #184	; 0xb8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2290      	movs	r2, #144	; 0x90
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 fcdd 	bl	80052ec <memset>
  if(hi2c->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <HAL_I2C_MspInit+0xb4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d13c      	bne.n	80009b6 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000940:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000942:	2300      	movs	r3, #0
 8000944:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f926 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f7ff ffaf 	bl	80008b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000972:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_I2C_MspInit+0xbc>)
 800099a:	f001 fcc7 	bl	800232c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	37b8      	adds	r7, #184	; 0xb8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40005400 	.word	0x40005400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0ae      	sub	sp, #184	; 0xb8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2290      	movs	r2, #144	; 0x90
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fc7d 	bl	80052ec <memset>
  if(huart->Instance==USART3)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <HAL_UART_MspInit+0xb4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d13c      	bne.n	8000a76 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 f8c6 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a16:	f7ff ff4f 	bl	80008b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a64:	2307      	movs	r3, #7
 8000a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a72:	f001 fc5b 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	37b8      	adds	r7, #184	; 0xb8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40004800 	.word	0x40004800
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0ae      	sub	sp, #184	; 0xb8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2290      	movs	r2, #144	; 0x90
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fc1d 	bl	80052ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aba:	d159      	bne.n	8000b70 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000abc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ac0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 f865 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ad8:	f7ff feee 	bl	80008b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000af4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4818      	ldr	r0, [pc, #96]	; (8000b7c <HAL_PCD_MspInit+0xf0>)
 8000b1c:	f001 fc06 	bl	800232c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <HAL_PCD_MspInit+0xf0>)
 8000b3c:	f001 fbf6 	bl	800232c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b62:	6453      	str	r3, [r2, #68]	; 0x44
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_PCD_MspInit+0xec>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	37b8      	adds	r7, #184	; 0xb8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f001 fa84 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e00a      	b.n	8000bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000be6:	f3af 8000 	nop.w
 8000bea:	4601      	mov	r1, r0
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbf0      	blt.n	8000be6 <_read+0x12>
	}

return len;
 8000c04:	687b      	ldr	r3, [r7, #4]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e009      	b.n	8000c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf1      	blt.n	8000c20 <_write+0x12>
	}
	return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_close>:

int _close(int file)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_isatty>:

int _isatty(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f004 fad2 	bl	8005288 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20080000 	.word	0x20080000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	200000bc 	.word	0x200000bc
 8000d18:	20000610 	.word	0x20000610

08000d1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f004 fa91 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fbdd 	bl	8000530 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000d84:	08008c3c 	.word	0x08008c3c
  ldr r2, =_sbss
 8000d88:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000d8c:	20000610 	.word	0x20000610

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
 8000d92:	0000      	movs	r0, r0
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <OLED_1in5_test>:
#include "../OLED/OLED_1in5.h"
#include "../Example/test.h"


int OLED_1in5_test(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
	printf("1.5inch OLED test demo\n");
 8000d9e:	4876      	ldr	r0, [pc, #472]	; (8000f78 <OLED_1in5_test+0x1e0>)
 8000da0:	f004 fbc4 	bl	800552c <puts>
	if(System_Init() != 0) {
 8000da4:	f001 f91a 	bl	8001fdc <System_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <OLED_1in5_test+0x1c>
		return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e0d3      	b.n	8000f5c <OLED_1in5_test+0x1c4>
	}
	  
	printf("OLED Init...\r\n");
 8000db4:	4871      	ldr	r0, [pc, #452]	; (8000f7c <OLED_1in5_test+0x1e4>)
 8000db6:	f004 fbb9 	bl	800552c <puts>
	OLED_1in5_Init();
 8000dba:	f001 f879 	bl	8001eb0 <OLED_1in5_Init>
	Driver_Delay_ms(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f001 f941 	bl	8002048 <Driver_Delay_ms>
	OLED_1in5_Clear();
 8000dc6:	f001 f8bf 	bl	8001f48 <OLED_1in5_Clear>
	
	// 0.Create a new image cache
	UBYTE *BlackImage;
	UWORD Imagesize = ((OLED_1in5_WIDTH%2==0)? (OLED_1in5_WIDTH/2): (OLED_1in5_WIDTH/2+1)) * OLED_1in5_HEIGHT;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	80fb      	strh	r3, [r7, #6]
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fa82 	bl	80052dc <malloc>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <OLED_1in5_test+0x56>
			printf("Failed to apply for black memory...\r\n");
 8000de2:	4867      	ldr	r0, [pc, #412]	; (8000f80 <OLED_1in5_test+0x1e8>)
 8000de4:	f004 fba2 	bl	800552c <puts>
			return -1;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	e0b6      	b.n	8000f5c <OLED_1in5_test+0x1c4>
	}
	printf("Paint_NewImage\r\n");
 8000dee:	4865      	ldr	r0, [pc, #404]	; (8000f84 <OLED_1in5_test+0x1ec>)
 8000df0:	f004 fb9c 	bl	800552c <puts>
	Paint_NewImage(BlackImage, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);	
 8000df4:	2300      	movs	r3, #0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f000 f8e3 	bl	8000fcc <Paint_NewImage>
	Paint_SetScale(16);
 8000e06:	2010      	movs	r0, #16
 8000e08:	f000 f946 	bl	8001098 <Paint_SetScale>
	printf("Drawing\r\n");
 8000e0c:	485e      	ldr	r0, [pc, #376]	; (8000f88 <OLED_1in5_test+0x1f0>)
 8000e0e:	f004 fb8d 	bl	800552c <puts>
	//1.Select Image
	Paint_SelectImage(BlackImage);
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f000 f930 	bl	8001078 <Paint_SelectImage>
	Driver_Delay_ms(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f001 f914 	bl	8002048 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 fb23 	bl	800146c <Paint_Clear>
//		OLED_1in5_Display(BlackImage);
//		Driver_Delay_ms(2000);
//		Paint_Clear(BLACK);

		// 2.Drawing on the image
		printf("Drawing:page 1\r\n");
 8000e26:	4859      	ldr	r0, [pc, #356]	; (8000f8c <OLED_1in5_test+0x1f4>)
 8000e28:	f004 fb80 	bl	800552c <puts>
		Paint_DrawString_EN(10, 0, "salut ", &Font12, BLACK, WHITE);
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <OLED_1in5_test+0x1f8>)
 8000e38:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <OLED_1in5_test+0x1fc>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f000 fc69 	bl	8001714 <Paint_DrawString_EN>
		Paint_DrawString_EN(50, 0, " le monde", &Font12, WHITE, WHITE);
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <OLED_1in5_test+0x1f8>)
 8000e50:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <OLED_1in5_test+0x200>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	2032      	movs	r0, #50	; 0x32
 8000e56:	f000 fc5d 	bl	8001714 <Paint_DrawString_EN>
		Paint_DrawString_EN(10, 50, "bonsoir", &Font12, WHITE, WHITE);
 8000e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <OLED_1in5_test+0x1f8>)
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <OLED_1in5_test+0x204>)
 8000e6a:	2132      	movs	r1, #50	; 0x32
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 fc51 	bl	8001714 <Paint_DrawString_EN>
		Paint_DrawString_EN(15, 115, " le pote", &Font12, WHITE, WHITE);
 8000e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <OLED_1in5_test+0x1f8>)
 8000e80:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <OLED_1in5_test+0x208>)
 8000e82:	2173      	movs	r1, #115	; 0x73
 8000e84:	200f      	movs	r0, #15
 8000e86:	f000 fc45 	bl	8001714 <Paint_DrawString_EN>
		// 3.Show image on page1
		OLED_1in5_Display(BlackImage);
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f001 f877 	bl	8001f7e <OLED_1in5_Display>
		Driver_Delay_ms(2000);
 8000e90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e94:	f001 f8d8 	bl	8002048 <Driver_Delay_ms>
		Paint_Clear(BLACK);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 fae7 	bl	800146c <Paint_Clear>
//		OLED_1in5_Display(BlackImage);
//		Driver_Delay_ms(2000);
//		Paint_Clear(BLACK);
		
		// Drawing on the image
		printf("Drawing:page 3\r\n");			
 8000e9e:	4841      	ldr	r0, [pc, #260]	; (8000fa4 <OLED_1in5_test+0x20c>)
 8000ea0:	f004 fb44 	bl	800552c <puts>
		Paint_DrawString_EN(10, 0, "waveshare", &Font16, 0x1, 0xb);
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <OLED_1in5_test+0x210>)
 8000eae:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <OLED_1in5_test+0x214>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f000 fc2e 	bl	8001714 <Paint_DrawString_EN>
		Paint_DrawString_EN(10, 17, "hello world", &Font8, 0x2, 0xc);
 8000eb8:	230c      	movs	r3, #12
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <OLED_1in5_test+0x218>)
 8000ec2:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <OLED_1in5_test+0x21c>)
 8000ec4:	2111      	movs	r1, #17
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f000 fc24 	bl	8001714 <Paint_DrawString_EN>
		Paint_DrawNum(10, 30, 123.456789, &Font8, 4, 0x3, 0xd);
 8000ecc:	230d      	movs	r3, #13
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <OLED_1in5_test+0x218>)
 8000ed8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8000f68 <OLED_1in5_test+0x1d0>
 8000edc:	211e      	movs	r1, #30
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fe08 	bl	8001af4 <Paint_DrawNum>
		Paint_DrawNum(10, 43, 987654, &Font12, 5, 0x4, 0xe);
 8000ee4:	230e      	movs	r3, #14
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2304      	movs	r3, #4
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2305      	movs	r3, #5
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <OLED_1in5_test+0x1f8>)
 8000ef0:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000f70 <OLED_1in5_test+0x1d8>
 8000ef4:	212b      	movs	r1, #43	; 0x2b
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f000 fdfc 	bl	8001af4 <Paint_DrawNum>
		// Show image on page2
		OLED_1in5_Display(BlackImage);
 8000efc:	6838      	ldr	r0, [r7, #0]
 8000efe:	f001 f83e 	bl	8001f7e <OLED_1in5_Display>
		Driver_Delay_ms(2000);	
 8000f02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f06:	f001 f89f 	bl	8002048 <Driver_Delay_ms>
		Paint_Clear(BLACK);		
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 faae 	bl	800146c <Paint_Clear>
		
		// Drawing on the image
		printf("Drawing:page 4\r\n");
 8000f10:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <OLED_1in5_test+0x220>)
 8000f12:	f004 fb0b 	bl	800552c <puts>
		Paint_DrawString_CN(10, 0,"���Abc", &Font12CN, WHITE, WHITE);
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <OLED_1in5_test+0x224>)
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <OLED_1in5_test+0x228>)
 8000f26:	2100      	movs	r1, #0
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f000 fc47 	bl	80017bc <Paint_DrawString_CN>
		Paint_DrawString_CN(0, 20, "΢ѩ����", &Font24CN, WHITE, WHITE);
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <OLED_1in5_test+0x22c>)
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <OLED_1in5_test+0x230>)
 8000f3e:	2114      	movs	r1, #20
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fc3b 	bl	80017bc <Paint_DrawString_CN>
		// Show image on page3
		OLED_1in5_Display(BlackImage);
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f001 f819 	bl	8001f7e <OLED_1in5_Display>
		Driver_Delay_ms(2000);		
 8000f4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f50:	f001 f87a 	bl	8002048 <Driver_Delay_ms>
		Paint_Clear(BLACK);		
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fa89 	bl	800146c <Paint_Clear>
		printf("Drawing:page 1\r\n");
 8000f5a:	e764      	b.n	8000e26 <OLED_1in5_test+0x8e>
//		OLED_1in5_Display(gImage_1in5);
//		Driver_Delay_ms(2000);
//		Paint_Clear(BLACK);

	}
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	07ee0b0b 	.word	0x07ee0b0b
 8000f6c:	405edd3c 	.word	0x405edd3c
 8000f70:	00000000 	.word	0x00000000
 8000f74:	412e240c 	.word	0x412e240c
 8000f78:	08005ca0 	.word	0x08005ca0
 8000f7c:	08005cb8 	.word	0x08005cb8
 8000f80:	08005cc8 	.word	0x08005cc8
 8000f84:	08005cf0 	.word	0x08005cf0
 8000f88:	08005d00 	.word	0x08005d00
 8000f8c:	08005d0c 	.word	0x08005d0c
 8000f90:	20000004 	.word	0x20000004
 8000f94:	08005d1c 	.word	0x08005d1c
 8000f98:	08005d24 	.word	0x08005d24
 8000f9c:	08005d30 	.word	0x08005d30
 8000fa0:	08005d38 	.word	0x08005d38
 8000fa4:	08005d44 	.word	0x08005d44
 8000fa8:	20000018 	.word	0x20000018
 8000fac:	08005d54 	.word	0x08005d54
 8000fb0:	2000002c 	.word	0x2000002c
 8000fb4:	08005d60 	.word	0x08005d60
 8000fb8:	08005d6c 	.word	0x08005d6c
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	08005d7c 	.word	0x08005d7c
 8000fc4:	20000020 	.word	0x20000020
 8000fc8:	08005d8c 	.word	0x08005d8c

08000fcc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	817b      	strh	r3, [r7, #10]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	813b      	strh	r3, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <Paint_NewImage+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <Paint_NewImage+0xa8>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <Paint_NewImage+0xa8>)
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <Paint_NewImage+0xa8>)
 8000ffa:	893b      	ldrh	r3, [r7, #8]
 8000ffc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <Paint_NewImage+0xa8>)
 8001000:	8b3b      	ldrh	r3, [r7, #24]
 8001002:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <Paint_NewImage+0xa8>)
 8001006:	2202      	movs	r2, #2
 8001008:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	b29b      	uxth	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <Paint_NewImage+0x52>
 8001016:	897b      	ldrh	r3, [r7, #10]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	b29b      	uxth	r3, r3
 800101c:	e004      	b.n	8001028 <Paint_NewImage+0x5c>
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b29b      	uxth	r3, r3
 8001024:	3301      	adds	r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <Paint_NewImage+0xa8>)
 800102a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <Paint_NewImage+0xa8>)
 800102e:	893b      	ldrh	r3, [r7, #8]
 8001030:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <Paint_NewImage+0xa8>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <Paint_NewImage+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <Paint_NewImage+0x7e>
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	2bb4      	cmp	r3, #180	; 0xb4
 8001048:	d106      	bne.n	8001058 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <Paint_NewImage+0xa8>)
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <Paint_NewImage+0xa8>)
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	80d3      	strh	r3, [r2, #6]
 8001056:	e006      	b.n	8001066 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <Paint_NewImage+0xa8>)
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <Paint_NewImage+0xa8>)
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	80d3      	strh	r3, [r2, #6]
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200005e4 	.word	0x200005e4

08001078 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <Paint_SelectImage+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200005e4 	.word	0x200005e4

08001098 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d118      	bne.n	80010da <Paint_SetScale+0x42>
        Paint.Scale = scale;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <Paint_SetScale+0xe4>)
 80010ae:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <Paint_SetScale+0xe4>)
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <Paint_SetScale+0x30>
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <Paint_SetScale+0xe4>)
 80010c0:	891b      	ldrh	r3, [r3, #8]
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	e005      	b.n	80010d4 <Paint_SetScale+0x3c>
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <Paint_SetScale+0xe4>)
 80010ca:	891b      	ldrh	r3, [r3, #8]
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <Paint_SetScale+0xe4>)
 80010d6:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 80010d8:	e04b      	b.n	8001172 <Paint_SetScale+0xda>
    }else if(scale == 4){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d118      	bne.n	8001112 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <Paint_SetScale+0xe4>)
 80010e6:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <Paint_SetScale+0xe4>)
 80010ea:	891b      	ldrh	r3, [r3, #8]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <Paint_SetScale+0x68>
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <Paint_SetScale+0xe4>)
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	e005      	b.n	800110c <Paint_SetScale+0x74>
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <Paint_SetScale+0xe4>)
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	b29b      	uxth	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <Paint_SetScale+0xe4>)
 800110e:	8253      	strh	r3, [r2, #18]
}
 8001110:	e02f      	b.n	8001172 <Paint_SetScale+0xda>
    }else if(scale ==16) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d118      	bne.n	800114a <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <Paint_SetScale+0xe4>)
 800111e:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <Paint_SetScale+0xe4>)
 8001122:	891b      	ldrh	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b29b      	uxth	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <Paint_SetScale+0xa0>
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <Paint_SetScale+0xe4>)
 8001130:	891b      	ldrh	r3, [r3, #8]
 8001132:	085b      	lsrs	r3, r3, #1
 8001134:	b29b      	uxth	r3, r3
 8001136:	e005      	b.n	8001144 <Paint_SetScale+0xac>
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <Paint_SetScale+0xe4>)
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	b29b      	uxth	r3, r3
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <Paint_SetScale+0xe4>)
 8001146:	8253      	strh	r3, [r2, #18]
}
 8001148:	e013      	b.n	8001172 <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b41      	cmp	r3, #65	; 0x41
 800114e:	d10a      	bne.n	8001166 <Paint_SetScale+0xce>
        Paint.Scale = scale;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <Paint_SetScale+0xe4>)
 8001156:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <Paint_SetScale+0xe4>)
 800115a:	891b      	ldrh	r3, [r3, #8]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <Paint_SetScale+0xe4>)
 8001162:	825a      	strh	r2, [r3, #18]
}
 8001164:	e005      	b.n	8001172 <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <Paint_SetScale+0xe8>)
 8001168:	f004 f9e0 	bl	800552c <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <Paint_SetScale+0xec>)
 800116e:	f004 f9dd 	bl	800552c <puts>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200005e4 	.word	0x200005e4
 8001180:	08005de4 	.word	0x08005de4
 8001184:	08005e0c 	.word	0x08005e0c

08001188 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
 8001192:	460b      	mov	r3, r1
 8001194:	80bb      	strh	r3, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800119a:	4b9e      	ldr	r3, [pc, #632]	; (8001414 <Paint_SetPixel+0x28c>)
 800119c:	889b      	ldrh	r3, [r3, #4]
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d804      	bhi.n	80011ae <Paint_SetPixel+0x26>
 80011a4:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <Paint_SetPixel+0x28c>)
 80011a6:	88db      	ldrh	r3, [r3, #6]
 80011a8:	88ba      	ldrh	r2, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d903      	bls.n	80011b6 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80011ae:	489a      	ldr	r0, [pc, #616]	; (8001418 <Paint_SetPixel+0x290>)
 80011b0:	f004 f9bc 	bl	800552c <puts>
        return;
 80011b4:	e154      	b.n	8001460 <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80011b6:	4b97      	ldr	r3, [pc, #604]	; (8001414 <Paint_SetPixel+0x28c>)
 80011b8:	89db      	ldrh	r3, [r3, #14]
 80011ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80011be:	d02b      	beq.n	8001218 <Paint_SetPixel+0x90>
 80011c0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80011c4:	f300 8149 	bgt.w	800145a <Paint_SetPixel+0x2d2>
 80011c8:	2bb4      	cmp	r3, #180	; 0xb4
 80011ca:	d016      	beq.n	80011fa <Paint_SetPixel+0x72>
 80011cc:	2bb4      	cmp	r3, #180	; 0xb4
 80011ce:	f300 8144 	bgt.w	800145a <Paint_SetPixel+0x2d2>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <Paint_SetPixel+0x54>
 80011d6:	2b5a      	cmp	r3, #90	; 0x5a
 80011d8:	d005      	beq.n	80011e6 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80011da:	e13e      	b.n	800145a <Paint_SetPixel+0x2d2>
        X = Xpoint;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80011e4:	e022      	b.n	800122c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <Paint_SetPixel+0x28c>)
 80011e8:	891a      	ldrh	r2, [r3, #8]
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80011f8:	e018      	b.n	800122c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80011fa:	4b86      	ldr	r3, [pc, #536]	; (8001414 <Paint_SetPixel+0x28c>)
 80011fc:	891a      	ldrh	r2, [r3, #8]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001208:	4b82      	ldr	r3, [pc, #520]	; (8001414 <Paint_SetPixel+0x28c>)
 800120a:	895a      	ldrh	r2, [r3, #10]
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b29b      	uxth	r3, r3
 8001212:	3b01      	subs	r3, #1
 8001214:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001216:	e009      	b.n	800122c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800121c:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <Paint_SetPixel+0x28c>)
 800121e:	895a      	ldrh	r2, [r3, #10]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800122a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800122c:	4b79      	ldr	r3, [pc, #484]	; (8001414 <Paint_SetPixel+0x28c>)
 800122e:	8a1b      	ldrh	r3, [r3, #16]
 8001230:	2b03      	cmp	r3, #3
 8001232:	f200 8114 	bhi.w	800145e <Paint_SetPixel+0x2d6>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <Paint_SetPixel+0xb4>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800128b 	.word	0x0800128b
 8001240:	0800124d 	.word	0x0800124d
 8001244:	0800125d 	.word	0x0800125d
 8001248:	0800126d 	.word	0x0800126d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <Paint_SetPixel+0x28c>)
 800124e:	891a      	ldrh	r2, [r3, #8]
 8001250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800125a:	e017      	b.n	800128c <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800125c:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <Paint_SetPixel+0x28c>)
 800125e:	895a      	ldrh	r2, [r3, #10]
 8001260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800126a:	e00f      	b.n	800128c <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <Paint_SetPixel+0x28c>)
 800126e:	891a      	ldrh	r2, [r3, #8]
 8001270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	3b01      	subs	r3, #1
 8001278:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <Paint_SetPixel+0x28c>)
 800127c:	895a      	ldrh	r2, [r3, #10]
 800127e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001288:	e000      	b.n	800128c <Paint_SetPixel+0x104>
        break;
 800128a:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <Paint_SetPixel+0x28c>)
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001292:	429a      	cmp	r2, r3
 8001294:	d804      	bhi.n	80012a0 <Paint_SetPixel+0x118>
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <Paint_SetPixel+0x28c>)
 8001298:	895b      	ldrh	r3, [r3, #10]
 800129a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800129c:	429a      	cmp	r2, r3
 800129e:	d903      	bls.n	80012a8 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80012a0:	485d      	ldr	r0, [pc, #372]	; (8001418 <Paint_SetPixel+0x290>)
 80012a2:	f004 f943 	bl	800552c <puts>
        return;
 80012a6:	e0db      	b.n	8001460 <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 80012a8:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <Paint_SetPixel+0x28c>)
 80012aa:	8adb      	ldrh	r3, [r3, #22]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d139      	bne.n	8001324 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80012b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ba:	4a56      	ldr	r2, [pc, #344]	; (8001414 <Paint_SetPixel+0x28c>)
 80012bc:	8a52      	ldrh	r2, [r2, #18]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	440b      	add	r3, r1
 80012c4:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <Paint_SetPixel+0x28c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d113      	bne.n	8001300 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80012d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	fa42 f303 	asr.w	r3, r2, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012ee:	4013      	ands	r3, r2
 80012f0:	b259      	sxtb	r1, r3
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <Paint_SetPixel+0x28c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e0af      	b.n	8001460 <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	fa42 f303 	asr.w	r3, r2, r3
 800130c:	b25a      	sxtb	r2, r3
 800130e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001312:	4313      	orrs	r3, r2
 8001314:	b259      	sxtb	r1, r3
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <Paint_SetPixel+0x28c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e09d      	b.n	8001460 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <Paint_SetPixel+0x28c>)
 8001326:	8adb      	ldrh	r3, [r3, #22]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d137      	bne.n	800139c <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800132c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	b29b      	uxth	r3, r3
 8001332:	4619      	mov	r1, r3
 8001334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <Paint_SetPixel+0x28c>)
 8001338:	8a52      	ldrh	r2, [r2, #18]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	440b      	add	r3, r1
 8001340:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <Paint_SetPixel+0x28c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	22c0      	movs	r2, #192	; 0xc0
 8001360:	fa42 f303 	asr.w	r3, r2, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	019a      	lsls	r2, r3, #6
 8001378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa42 f303 	asr.w	r3, r2, r3
 8001384:	b25a      	sxtb	r2, r3
 8001386:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800138a:	4313      	orrs	r3, r2
 800138c:	b259      	sxtb	r1, r3
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <Paint_SetPixel+0x28c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	b2ca      	uxtb	r2, r1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e061      	b.n	8001460 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <Paint_SetPixel+0x28c>)
 800139e:	8adb      	ldrh	r3, [r3, #22]
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d13b      	bne.n	800141c <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 80013a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4619      	mov	r1, r3
 80013ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <Paint_SetPixel+0x28c>)
 80013b0:	8a52      	ldrh	r2, [r2, #18]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	440b      	add	r3, r1
 80013b8:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <Paint_SetPixel+0x28c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 80013ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	22f0      	movs	r2, #240	; 0xf0
 80013d8:	fa42 f303 	asr.w	r3, r2, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80013e6:	4013      	ands	r3, r2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	011a      	lsls	r2, r3, #4
 80013f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa42 f303 	asr.w	r3, r2, r3
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001402:	4313      	orrs	r3, r2
 8001404:	b259      	sxtb	r1, r3
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <Paint_SetPixel+0x28c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e025      	b.n	8001460 <Paint_SetPixel+0x2d8>
 8001414:	200005e4 	.word	0x200005e4
 8001418:	08005ecc 	.word	0x08005ecc
    }else if(Paint.Scale == 65) {
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <Paint_SetPixel+0x2e0>)
 800141e:	8adb      	ldrh	r3, [r3, #22]
 8001420:	2b41      	cmp	r3, #65	; 0x41
 8001422:	d11d      	bne.n	8001460 <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 8001424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001426:	005a      	lsls	r2, r3, #1
 8001428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142a:	490f      	ldr	r1, [pc, #60]	; (8001468 <Paint_SetPixel+0x2e0>)
 800142c:	8a49      	ldrh	r1, [r1, #18]
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b299      	uxth	r1, r3
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <Paint_SetPixel+0x2e0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	4413      	add	r3, r2
 8001444:	b2ca      	uxtb	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <Paint_SetPixel+0x2e0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	3301      	adds	r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e002      	b.n	8001460 <Paint_SetPixel+0x2d8>
        return;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <Paint_SetPixel+0x2d8>
        return;
 800145e:	bf00      	nop
    }
}
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200005e4 	.word	0x200005e4

0800146c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <Paint_Clear+0x150>)
 8001478:	8adb      	ldrh	r3, [r3, #22]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <Paint_Clear+0x1a>
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <Paint_Clear+0x150>)
 8001480:	8adb      	ldrh	r3, [r3, #22]
 8001482:	2b04      	cmp	r3, #4
 8001484:	d125      	bne.n	80014d2 <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001486:	2300      	movs	r3, #0
 8001488:	83fb      	strh	r3, [r7, #30]
 800148a:	e01c      	b.n	80014c6 <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800148c:	2300      	movs	r3, #0
 800148e:	83bb      	strh	r3, [r7, #28]
 8001490:	e011      	b.n	80014b6 <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001492:	8bba      	ldrh	r2, [r7, #28]
 8001494:	8bfb      	ldrh	r3, [r7, #30]
 8001496:	4949      	ldr	r1, [pc, #292]	; (80015bc <Paint_Clear+0x150>)
 8001498:	8a49      	ldrh	r1, [r1, #18]
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <Paint_Clear+0x150>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80014b0:	8bbb      	ldrh	r3, [r7, #28]
 80014b2:	3301      	adds	r3, #1
 80014b4:	83bb      	strh	r3, [r7, #28]
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <Paint_Clear+0x150>)
 80014b8:	8a5b      	ldrh	r3, [r3, #18]
 80014ba:	8bba      	ldrh	r2, [r7, #28]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3e8      	bcc.n	8001492 <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014c0:	8bfb      	ldrh	r3, [r7, #30]
 80014c2:	3301      	adds	r3, #1
 80014c4:	83fb      	strh	r3, [r7, #30]
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <Paint_Clear+0x150>)
 80014c8:	8a9b      	ldrh	r3, [r3, #20]
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3dd      	bcc.n	800148c <Paint_Clear+0x20>
 80014d0:	e06e      	b.n	80015b0 <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <Paint_Clear+0x150>)
 80014d4:	8adb      	ldrh	r3, [r3, #22]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d12f      	bne.n	800153a <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	837b      	strh	r3, [r7, #26]
 80014de:	e026      	b.n	800152e <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80014e0:	2300      	movs	r3, #0
 80014e2:	833b      	strh	r3, [r7, #24]
 80014e4:	e01b      	b.n	800151e <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 80014e6:	8b3a      	ldrh	r2, [r7, #24]
 80014e8:	8b7b      	ldrh	r3, [r7, #26]
 80014ea:	4934      	ldr	r1, [pc, #208]	; (80015bc <Paint_Clear+0x150>)
 80014ec:	8a49      	ldrh	r1, [r1, #18]
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	b25a      	sxtb	r2, r3
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b259      	sxtb	r1, r3
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <Paint_Clear+0x150>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	b2ca      	uxtb	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001518:	8b3b      	ldrh	r3, [r7, #24]
 800151a:	3301      	adds	r3, #1
 800151c:	833b      	strh	r3, [r7, #24]
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <Paint_Clear+0x150>)
 8001520:	8a5b      	ldrh	r3, [r3, #18]
 8001522:	8b3a      	ldrh	r2, [r7, #24]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3de      	bcc.n	80014e6 <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001528:	8b7b      	ldrh	r3, [r7, #26]
 800152a:	3301      	adds	r3, #1
 800152c:	837b      	strh	r3, [r7, #26]
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <Paint_Clear+0x150>)
 8001530:	8a9b      	ldrh	r3, [r3, #20]
 8001532:	8b7a      	ldrh	r2, [r7, #26]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3d3      	bcc.n	80014e0 <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 8001538:	e03a      	b.n	80015b0 <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <Paint_Clear+0x150>)
 800153c:	8adb      	ldrh	r3, [r3, #22]
 800153e:	2b41      	cmp	r3, #65	; 0x41
 8001540:	d136      	bne.n	80015b0 <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001542:	2300      	movs	r3, #0
 8001544:	82fb      	strh	r3, [r7, #22]
 8001546:	e02d      	b.n	80015a4 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001548:	2300      	movs	r3, #0
 800154a:	82bb      	strh	r3, [r7, #20]
 800154c:	e022      	b.n	8001594 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800154e:	8abb      	ldrh	r3, [r7, #20]
 8001550:	005a      	lsls	r2, r3, #1
 8001552:	8afb      	ldrh	r3, [r7, #22]
 8001554:	4919      	ldr	r1, [pc, #100]	; (80015bc <Paint_Clear+0x150>)
 8001556:	8a49      	ldrh	r1, [r1, #18]
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b29b      	uxth	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <Paint_Clear+0x150>)
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	440b      	add	r3, r1
 8001570:	f002 020f 	and.w	r2, r2, #15
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <Paint_Clear+0x150>)
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	3301      	adds	r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	f002 020f 	and.w	r2, r2, #15
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800158e:	8abb      	ldrh	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	82bb      	strh	r3, [r7, #20]
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Paint_Clear+0x150>)
 8001596:	8a5b      	ldrh	r3, [r3, #18]
 8001598:	8aba      	ldrh	r2, [r7, #20]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3d7      	bcc.n	800154e <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800159e:	8afb      	ldrh	r3, [r7, #22]
 80015a0:	3301      	adds	r3, #1
 80015a2:	82fb      	strh	r3, [r7, #22]
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <Paint_Clear+0x150>)
 80015a6:	8a9b      	ldrh	r3, [r3, #20]
 80015a8:	8afa      	ldrh	r2, [r7, #22]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3cc      	bcc.n	8001548 <Paint_Clear+0xdc>
}
 80015ae:	e7ff      	b.n	80015b0 <Paint_Clear+0x144>
 80015b0:	bf00      	nop
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200005e4 	.word	0x200005e4

080015c0 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4603      	mov	r3, r0
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	460b      	mov	r3, r1
 80015ce:	81bb      	strh	r3, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <Paint_DrawChar+0x14c>)
 80015d6:	889b      	ldrh	r3, [r3, #4]
 80015d8:	89fa      	ldrh	r2, [r7, #14]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d804      	bhi.n	80015e8 <Paint_DrawChar+0x28>
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <Paint_DrawChar+0x14c>)
 80015e0:	88db      	ldrh	r3, [r3, #6]
 80015e2:	89ba      	ldrh	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d903      	bls.n	80015f0 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80015e8:	4849      	ldr	r0, [pc, #292]	; (8001710 <Paint_DrawChar+0x150>)
 80015ea:	f003 ff9f 	bl	800552c <puts>
        return;
 80015ee:	e089      	b.n	8001704 <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	3b20      	subs	r3, #32
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	88d2      	ldrh	r2, [r2, #6]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	8892      	ldrh	r2, [r2, #4]
 8001600:	08d2      	lsrs	r2, r2, #3
 8001602:	b292      	uxth	r2, r2
 8001604:	4611      	mov	r1, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	8892      	ldrh	r2, [r2, #4]
 800160a:	f002 0207 	and.w	r2, r2, #7
 800160e:	b292      	uxth	r2, r2
 8001610:	2a00      	cmp	r2, #0
 8001612:	bf14      	ite	ne
 8001614:	2201      	movne	r2, #1
 8001616:	2200      	moveq	r2, #0
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440a      	add	r2, r1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800162c:	2300      	movs	r3, #0
 800162e:	83fb      	strh	r3, [r7, #30]
 8001630:	e063      	b.n	80016fa <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001632:	2300      	movs	r3, #0
 8001634:	83bb      	strh	r3, [r7, #28]
 8001636:	e04e      	b.n	80016d6 <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001638:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	4293      	cmp	r3, r2
 8001640:	d118      	bne.n	8001674 <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	8bbb      	ldrh	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d031      	beq.n	80016be <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800165a:	89fa      	ldrh	r2, [r7, #14]
 800165c:	8bbb      	ldrh	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	b298      	uxth	r0, r3
 8001662:	89ba      	ldrh	r2, [r7, #12]
 8001664:	8bfb      	ldrh	r3, [r7, #30]
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fd8b 	bl	8001188 <Paint_SetPixel>
 8001672:	e024      	b.n	80016be <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	8bbb      	ldrh	r3, [r7, #28]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	fa42 f303 	asr.w	r3, r2, r3
 8001686:	400b      	ands	r3, r1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800168c:	89fa      	ldrh	r2, [r7, #14]
 800168e:	8bbb      	ldrh	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	b298      	uxth	r0, r3
 8001694:	89ba      	ldrh	r2, [r7, #12]
 8001696:	8bfb      	ldrh	r3, [r7, #30]
 8001698:	4413      	add	r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fd72 	bl	8001188 <Paint_SetPixel>
 80016a4:	e00b      	b.n	80016be <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80016a6:	89fa      	ldrh	r2, [r7, #14]
 80016a8:	8bbb      	ldrh	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	b298      	uxth	r0, r3
 80016ae:	89ba      	ldrh	r2, [r7, #12]
 80016b0:	8bfb      	ldrh	r3, [r7, #30]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fd65 	bl	8001188 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b07      	cmp	r3, #7
 80016c8:	d102      	bne.n	80016d0 <Paint_DrawChar+0x110>
                ptr++;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	83bb      	strh	r3, [r7, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	8bba      	ldrh	r2, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3ab      	bcc.n	8001638 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	889b      	ldrh	r3, [r3, #4]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <Paint_DrawChar+0x134>
            ptr++;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80016f4:	8bfb      	ldrh	r3, [r7, #30]
 80016f6:	3301      	adds	r3, #1
 80016f8:	83fb      	strh	r3, [r7, #30]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	88db      	ldrh	r3, [r3, #6]
 80016fe:	8bfa      	ldrh	r2, [r7, #30]
 8001700:	429a      	cmp	r2, r3
 8001702:	d396      	bcc.n	8001632 <Paint_DrawChar+0x72>
    }// Write all
}
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200005e4 	.word	0x200005e4
 8001710:	08006030 	.word	0x08006030

08001714 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4603      	mov	r3, r0
 8001720:	81fb      	strh	r3, [r7, #14]
 8001722:	460b      	mov	r3, r1
 8001724:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <Paint_DrawString_EN+0xa0>)
 8001730:	889b      	ldrh	r3, [r3, #4]
 8001732:	89fa      	ldrh	r2, [r7, #14]
 8001734:	429a      	cmp	r2, r3
 8001736:	d804      	bhi.n	8001742 <Paint_DrawString_EN+0x2e>
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <Paint_DrawString_EN+0xa0>)
 800173a:	88db      	ldrh	r3, [r3, #6]
 800173c:	89ba      	ldrh	r2, [r7, #12]
 800173e:	429a      	cmp	r2, r3
 8001740:	d931      	bls.n	80017a6 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001742:	481d      	ldr	r0, [pc, #116]	; (80017b8 <Paint_DrawString_EN+0xa4>)
 8001744:	f003 fef2 	bl	800552c <puts>
        return;
 8001748:	e031      	b.n	80017ae <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800174a:	8afb      	ldrh	r3, [r7, #22]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	8892      	ldrh	r2, [r2, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <Paint_DrawString_EN+0xa0>)
 8001754:	8892      	ldrh	r2, [r2, #4]
 8001756:	4293      	cmp	r3, r2
 8001758:	dd06      	ble.n	8001768 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	88da      	ldrh	r2, [r3, #6]
 8001762:	8abb      	ldrh	r3, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001768:	8abb      	ldrh	r3, [r7, #20]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	88d2      	ldrh	r2, [r2, #6]
 800176e:	4413      	add	r3, r2
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <Paint_DrawString_EN+0xa0>)
 8001772:	88d2      	ldrh	r2, [r2, #6]
 8001774:	4293      	cmp	r3, r2
 8001776:	dd03      	ble.n	8001780 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800177c:	89bb      	ldrh	r3, [r7, #12]
 800177e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	8ab9      	ldrh	r1, [r7, #20]
 8001786:	8af8      	ldrh	r0, [r7, #22]
 8001788:	8c3b      	ldrh	r3, [r7, #32]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f7ff ff15 	bl	80015c0 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	889a      	ldrh	r2, [r3, #4]
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	4413      	add	r3, r2
 80017a4:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1cd      	bne.n	800174a <Paint_DrawString_EN+0x36>
    }
}
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200005e4 	.word	0x200005e4
 80017b8:	08006070 	.word	0x08006070

080017bc <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4603      	mov	r3, r0
 80017c8:	81fb      	strh	r3, [r7, #14]
 80017ca:	460b      	mov	r3, r1
 80017cc:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 80017da:	e180      	b.n	8001ade <Paint_DrawString_CN+0x322>
        if(*p_text <= 0x7F) {  //ASCII < 126
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f2c0 80b7 	blt.w	8001956 <Paint_DrawString_CN+0x19a>
            for(Num = 0; Num < font->size; Num++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	e0a2      	b.n	8001934 <Paint_DrawString_CN+0x178>
                if(*p_text== font->table[Num].index[0]) {
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	20a6      	movs	r0, #166	; 0xa6
 80017fa:	fb00 f303 	mul.w	r3, r0, r3
 80017fe:	440b      	add	r3, r1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	f040 8093 	bne.w	800192e <Paint_DrawString_CN+0x172>
                    const char* ptr = &font->table[Num].matrix[0];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	21a6      	movs	r1, #166	; 0xa6
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3302      	adds	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
 800181e:	e07e      	b.n	800191e <Paint_DrawString_CN+0x162>
                        for (i = 0; i < font->Width; i++) {
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	e068      	b.n	80018f8 <Paint_DrawString_CN+0x13c>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	4293      	cmp	r3, r2
 800182e:	d121      	bne.n	8001874 <Paint_DrawString_CN+0xb8>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	425a      	negs	r2, r3
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	f002 0207 	and.w	r2, r2, #7
 8001842:	bf58      	it	pl
 8001844:	4253      	negpl	r3, r2
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	fa42 f303 	asr.w	r3, r2, r3
 800184c:	400b      	ands	r3, r1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d042      	beq.n	80018d8 <Paint_DrawString_CN+0x11c>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	b29a      	uxth	r2, r3
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	b29b      	uxth	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b298      	uxth	r0, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	b29a      	uxth	r2, r3
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff fc8b 	bl	8001188 <Paint_SetPixel>
 8001872:	e031      	b.n	80018d8 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	425a      	negs	r2, r3
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	f002 0207 	and.w	r2, r2, #7
 8001886:	bf58      	it	pl
 8001888:	4253      	negpl	r3, r2
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	fa42 f303 	asr.w	r3, r2, r3
 8001890:	400b      	ands	r3, r1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <Paint_DrawString_CN+0xfc>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	b29a      	uxth	r2, r3
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b298      	uxth	r0, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff fc69 	bl	8001188 <Paint_SetPixel>
 80018b6:	e00f      	b.n	80018d8 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b298      	uxth	r0, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff fc58 	bl	8001188 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	2b07      	cmp	r3, #7
 80018ea:	d102      	bne.n	80018f2 <Paint_DrawString_CN+0x136>
                                ptr++;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	891b      	ldrh	r3, [r3, #8]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	4293      	cmp	r3, r2
 8001902:	db90      	blt.n	8001826 <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	891b      	ldrh	r3, [r3, #8]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <Paint_DrawString_CN+0x15c>
                            ptr++;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3301      	adds	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	3301      	adds	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	895b      	ldrh	r3, [r3, #10]
 8001922:	461a      	mov	r2, r3
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	4293      	cmp	r3, r2
 8001928:	f6ff af7a 	blt.w	8001820 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 800192c:	e009      	b.n	8001942 <Paint_DrawString_CN+0x186>
            for(Num = 0; Num < font->size; Num++) {
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	461a      	mov	r2, r3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4293      	cmp	r3, r2
 800193e:	f6ff af56 	blt.w	80017ee <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	3301      	adds	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	88db      	ldrh	r3, [r3, #6]
 800194c:	461a      	mov	r2, r3
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	4413      	add	r3, r2
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
 8001954:	e0c3      	b.n	8001ade <Paint_DrawString_CN+0x322>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e0b0      	b.n	8001abe <Paint_DrawString_CN+0x302>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	20a6      	movs	r0, #166	; 0xa6
 8001968:	fb00 f303 	mul.w	r3, r0, r3
 800196c:	440b      	add	r3, r1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 80a1 	bne.w	8001ab8 <Paint_DrawString_CN+0x2fc>
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	20a6      	movs	r0, #166	; 0xa6
 8001984:	fb00 f303 	mul.w	r3, r0, r3
 8001988:	440b      	add	r3, r1
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8093 	bne.w	8001ab8 <Paint_DrawString_CN+0x2fc>
                    const char* ptr = &font->table[Num].matrix[0];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	21a6      	movs	r1, #166	; 0xa6
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3302      	adds	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	e07e      	b.n	8001aa8 <Paint_DrawString_CN+0x2ec>
                        for (i = 0; i < font->Width; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e068      	b.n	8001a82 <Paint_DrawString_CN+0x2c6>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80019b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d121      	bne.n	80019fe <Paint_DrawString_CN+0x242>
                                if (*ptr & (0x80 >> (i % 8))) {
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	425a      	negs	r2, r3
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	f002 0207 	and.w	r2, r2, #7
 80019cc:	bf58      	it	pl
 80019ce:	4253      	negpl	r3, r2
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	fa42 f303 	asr.w	r3, r2, r3
 80019d6:	400b      	ands	r3, r1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d042      	beq.n	8001a62 <Paint_DrawString_CN+0x2a6>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	b29a      	uxth	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff fbc6 	bl	8001188 <Paint_SetPixel>
 80019fc:	e031      	b.n	8001a62 <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	425a      	negs	r2, r3
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	f002 0207 	and.w	r2, r2, #7
 8001a10:	bf58      	it	pl
 8001a12:	4253      	negpl	r3, r2
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	fa42 f303 	asr.w	r3, r2, r3
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d010      	beq.n	8001a42 <Paint_DrawString_CN+0x286>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff fba4 	bl	8001188 <Paint_SetPixel>
 8001a40:	e00f      	b.n	8001a62 <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff fb93 	bl	8001188 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	425a      	negs	r2, r3
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	f002 0207 	and.w	r2, r2, #7
 8001a6e:	bf58      	it	pl
 8001a70:	4253      	negpl	r3, r2
 8001a72:	2b07      	cmp	r3, #7
 8001a74:	d102      	bne.n	8001a7c <Paint_DrawString_CN+0x2c0>
                                ptr++;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	891b      	ldrh	r3, [r3, #8]
 8001a86:	461a      	mov	r2, r3
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	db90      	blt.n	80019b0 <Paint_DrawString_CN+0x1f4>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <Paint_DrawString_CN+0x2e6>
                            ptr++;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	895b      	ldrh	r3, [r3, #10]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	f6ff af7a 	blt.w	80019aa <Paint_DrawString_CN+0x1ee>
                        }
                    }
                    break;
 8001ab6:	e009      	b.n	8001acc <Paint_DrawString_CN+0x310>
            for(Num = 0; Num < font->size; Num++) {
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f6ff af48 	blt.w	800195c <Paint_DrawString_CN+0x1a0>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	3302      	adds	r3, #2
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	891b      	ldrh	r3, [r3, #8]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	4413      	add	r3, r2
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae7a 	bne.w	80017dc <Paint_DrawString_CN+0x20>
        }
    }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, double Nummber,
                   sFONT* Font, UWORD Digit,UWORD Color_Foreground, UWORD Color_Background)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001afa:	af02      	add	r7, sp, #8
 8001afc:	4604      	mov	r4, r0
 8001afe:	4608      	mov	r0, r1
 8001b00:	f107 0108 	add.w	r1, r7, #8
 8001b04:	ed81 0b00 	vstr	d0, [r1]
 8001b08:	f107 0110 	add.w	r1, r7, #16
 8001b0c:	600a      	str	r2, [r1, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f107 0316 	add.w	r3, r7, #22
 8001b14:	4622      	mov	r2, r4
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	801a      	strh	r2, [r3, #0]
 8001b20:	1dbb      	adds	r3, r7, #6
 8001b22:	460a      	mov	r2, r1
 8001b24:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8001b32:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	22fb      	movs	r2, #251	; 0xfb
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fbd3 	bl	80052ec <memset>
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	22fb      	movs	r2, #251	; 0xfb
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fbc9 	bl	80052ec <memset>
    uint8_t *pStr = Str_Array;
 8001b5a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001b5e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		int temp = Nummber;
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	ed93 7b00 	vldr	d7, [r3]
 8001b6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		float decimals;
		uint8_t i;
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001b76:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <Paint_DrawNum+0x260>)
 8001b78:	889b      	ldrh	r3, [r3, #4]
 8001b7a:	f107 0216 	add.w	r2, r7, #22
 8001b7e:	8812      	ldrh	r2, [r2, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d806      	bhi.n	8001b92 <Paint_DrawNum+0x9e>
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <Paint_DrawNum+0x260>)
 8001b86:	88db      	ldrh	r3, [r3, #6]
 8001b88:	f107 0214 	add.w	r2, r7, #20
 8001b8c:	8812      	ldrh	r2, [r2, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d903      	bls.n	8001b9a <Paint_DrawNum+0xa6>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8001b92:	4871      	ldr	r0, [pc, #452]	; (8001d58 <Paint_DrawNum+0x264>)
 8001b94:	f003 fcca 	bl	800552c <puts>
 8001b98:	e0d8      	b.n	8001d4c <Paint_DrawNum+0x258>
        return;
    }

		if(Digit > 0) {				
 8001b9a:	1dbb      	adds	r3, r7, #6
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06e      	beq.n	8001c80 <Paint_DrawNum+0x18c>
		decimals = Nummber - temp;
 8001ba2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	ed93 6b00 	vldr	d6, [r3]
 8001bb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bbe:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
		for(i=Digit; i > 0; i--) {
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8001bca:	e00c      	b.n	8001be6 <Paint_DrawNum+0xf2>
			decimals*=10;
 8001bcc:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8001bd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	edc7 7a89 	vstr	s15, [r7, #548]	; 0x224
		for(i=Digit; i > 0; i--) {
 8001bdc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8001be0:	3b01      	subs	r3, #1
 8001be2:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8001be6:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ee      	bne.n	8001bcc <Paint_DrawNum+0xd8>
		}
		temp = decimals;
 8001bee:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8001bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf6:	ee17 3a90 	vmov	r3, s15
 8001bfa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		//Converts a number to a string
		for(i=Digit; i>0; i--) {
 8001bfe:	1dbb      	adds	r3, r7, #6
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8001c06:	e02a      	b.n	8001c5e <Paint_DrawNum+0x16a>
			Num_Array[Num_Bit] = temp % 10 + '0';
 8001c08:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001c0c:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <Paint_DrawNum+0x268>)
 8001c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c12:	1099      	asrs	r1, r3, #2
 8001c14:	17d3      	asrs	r3, r2, #31
 8001c16:	1ac9      	subs	r1, r1, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	1ad1      	subs	r1, r2, r3
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001c28:	3230      	adds	r2, #48	; 0x30
 8001c2a:	b2d1      	uxtb	r1, r2
 8001c2c:	f107 021c 	add.w	r2, r7, #28
 8001c30:	54d1      	strb	r1, [r2, r3]
			Num_Bit++;
 8001c32:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
			temp /= 10;						
 8001c40:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <Paint_DrawNum+0x268>)
 8001c46:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4a:	1092      	asrs	r2, r2, #2
 8001c4c:	17db      	asrs	r3, r3, #31
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		for(i=Digit; i>0; i--) {
 8001c54:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8001c5e:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1d0      	bne.n	8001c08 <Paint_DrawNum+0x114>
		}	
		Num_Array[Num_Bit] = '.';
 8001c66:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001c6a:	f107 021c 	add.w	r2, r7, #28
 8001c6e:	212e      	movs	r1, #46	; 0x2e
 8001c70:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8001c72:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
		}
	
		temp = Nummber;
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	ed93 7b00 	vldr	d7, [r3]
 8001c88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    //Converts a number to a string
    while (temp) {
 8001c94:	e025      	b.n	8001ce2 <Paint_DrawNum+0x1ee>
        Num_Array[Num_Bit] = temp % 10 + '0';
 8001c96:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <Paint_DrawNum+0x268>)
 8001c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca0:	1099      	asrs	r1, r3, #2
 8001ca2:	17d3      	asrs	r3, r2, #31
 8001ca4:	1ac9      	subs	r1, r1, r3
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	1ad1      	subs	r1, r2, r3
 8001cb0:	b2ca      	uxtb	r2, r1
 8001cb2:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001cb6:	3230      	adds	r2, #48	; 0x30
 8001cb8:	b2d1      	uxtb	r1, r2
 8001cba:	f107 021c 	add.w	r2, r7, #28
 8001cbe:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8001cc0:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
        temp /= 10;
 8001cce:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <Paint_DrawNum+0x268>)
 8001cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd8:	1092      	asrs	r2, r2, #2
 8001cda:	17db      	asrs	r3, r3, #31
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    while (temp) {
 8001ce2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1d5      	bne.n	8001c96 <Paint_DrawNum+0x1a2>
    }
		
    //The string is inverted
    while (Num_Bit > 0) {
 8001cea:	e018      	b.n	8001d1e <Paint_DrawNum+0x22a>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8001cec:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	f9b7 322c 	ldrsh.w	r3, [r7, #556]	; 0x22c
 8001cf6:	f107 011c 	add.w	r1, r7, #28
 8001cfa:	5c89      	ldrb	r1, [r1, r2]
 8001cfc:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001d00:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8001d02:	f9b7 322c 	ldrsh.w	r3, [r7, #556]	; 0x22c
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
        Num_Bit --;
 8001d10:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
    while (Num_Bit > 0) {
 8001d1e:	f9b7 322e 	ldrsh.w	r3, [r7, #558]	; 0x22e
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dce2      	bgt.n	8001cec <Paint_DrawNum+0x1f8>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	f107 0214 	add.w	r2, r7, #20
 8001d2e:	8811      	ldrh	r1, [r2, #0]
 8001d30:	f107 0216 	add.w	r2, r7, #22
 8001d34:	8810      	ldrh	r0, [r2, #0]
 8001d36:	f8b7 2240 	ldrh.w	r2, [r7, #576]	; 0x240
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	f8b7 2244 	ldrh.w	r2, [r7, #580]	; 0x244
 8001d40:	9200      	str	r2, [sp, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001d48:	f7ff fce4 	bl	8001714 <Paint_DrawString_EN>
}
 8001d4c:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	200005e4 	.word	0x200005e4
 8001d58:	080060b4 	.word	0x080060b4
 8001d5c:	66666667 	.word	0x66666667

08001d60 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    OLED_RST_1;
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <OLED_Reset+0x40>)
 8001d6c:	f000 fc8a 	bl	8002684 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001d70:	2064      	movs	r0, #100	; 0x64
 8001d72:	f000 f969 	bl	8002048 <Driver_Delay_ms>
    OLED_RST_0;
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7c:	4808      	ldr	r0, [pc, #32]	; (8001da0 <OLED_Reset+0x40>)
 8001d7e:	f000 fc81 	bl	8002684 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001d82:	2064      	movs	r0, #100	; 0x64
 8001d84:	f000 f960 	bl	8002048 <Driver_Delay_ms>
    OLED_RST_1;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <OLED_Reset+0x40>)
 8001d90:	f000 fc78 	bl	8002684 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f000 f957 	bl	8002048 <Driver_Delay_ms>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020000 	.word	0x40020000

08001da4 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	OLED_DC_0;
    OLED_CS_0;
    SPI4W_Write_Byte(Reg);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f92c 	bl	8002010 <I2C_Write_Byte>
#endif
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    OLED_DC_1;
    OLED_CS_0;
    SPI4W_Write_Byte(Data);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2140      	movs	r1, #64	; 0x40
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f91e 	bl	8002010 <I2C_Write_Byte>
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 8001de0:	20ae      	movs	r0, #174	; 0xae
 8001de2:	f7ff ffdf 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 8001de6:	2015      	movs	r0, #21
 8001de8:	f7ff ffdc 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff ffd9 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 8001df2:	207f      	movs	r0, #127	; 0x7f
 8001df4:	f7ff ffd6 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 8001df8:	2075      	movs	r0, #117	; 0x75
 8001dfa:	f7ff ffd3 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff ffd0 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 8001e04:	207f      	movs	r0, #127	; 0x7f
 8001e06:	f7ff ffcd 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 8001e0a:	2081      	movs	r0, #129	; 0x81
 8001e0c:	f7ff ffca 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 8001e10:	2080      	movs	r0, #128	; 0x80
 8001e12:	f7ff ffc7 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 8001e16:	20a0      	movs	r0, #160	; 0xa0
 8001e18:	f7ff ffc4 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 8001e1c:	2051      	movs	r0, #81	; 0x51
 8001e1e:	f7ff ffc1 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 8001e22:	20a1      	movs	r0, #161	; 0xa1
 8001e24:	f7ff ffbe 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff ffbb 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 8001e2e:	20a2      	movs	r0, #162	; 0xa2
 8001e30:	f7ff ffb8 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff ffb5 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 8001e3a:	20a4      	movs	r0, #164	; 0xa4
 8001e3c:	f7ff ffb2 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 8001e40:	20a8      	movs	r0, #168	; 0xa8
 8001e42:	f7ff ffaf 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 8001e46:	207f      	movs	r0, #127	; 0x7f
 8001e48:	f7ff ffac 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 8001e4c:	20b1      	movs	r0, #177	; 0xb1
 8001e4e:	f7ff ffa9 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 8001e52:	20f1      	movs	r0, #241	; 0xf1
 8001e54:	f7ff ffa6 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 8001e58:	20b3      	movs	r0, #179	; 0xb3
 8001e5a:	f7ff ffa3 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff ffa0 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 8001e64:	20ab      	movs	r0, #171	; 0xab
 8001e66:	f7ff ff9d 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7ff ff9a 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 8001e70:	20b6      	movs	r0, #182	; 0xb6
 8001e72:	f7ff ff97 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff ff94 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 8001e7c:	20be      	movs	r0, #190	; 0xbe
 8001e7e:	f7ff ff91 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f7ff ff8e 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 8001e88:	20bc      	movs	r0, #188	; 0xbc
 8001e8a:	f7ff ff8b 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 8001e8e:	2008      	movs	r0, #8
 8001e90:	f7ff ff88 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 8001e94:	20d5      	movs	r0, #213	; 0xd5
 8001e96:	f7ff ff85 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 8001e9a:	2062      	movs	r0, #98	; 0x62
 8001e9c:	f7ff ff82 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 8001ea0:	20fd      	movs	r0, #253	; 0xfd
 8001ea2:	f7ff ff7f 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 8001ea6:	2012      	movs	r0, #18
 8001ea8:	f7ff ff7c 	bl	8001da4 <OLED_WriteReg>

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 8001eb4:	f7ff ff54 	bl	8001d60 <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 8001eb8:	f7ff ff90 	bl	8001ddc <OLED_InitReg>
    Driver_Delay_ms(200);
 8001ebc:	20c8      	movs	r0, #200	; 0xc8
 8001ebe:	f000 f8c3 	bl	8002048 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 8001ec2:	20af      	movs	r0, #175	; 0xaf
 8001ec4:	f7ff ff6e 	bl	8001da4 <OLED_WriteReg>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71bb      	strb	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	717b      	strb	r3, [r7, #5]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d827      	bhi.n	8001f40 <OLED_SetWindow+0x74>
 8001ef0:	79bb      	ldrb	r3, [r7, #6]
 8001ef2:	2b80      	cmp	r3, #128	; 0x80
 8001ef4:	d824      	bhi.n	8001f40 <OLED_SetWindow+0x74>
 8001ef6:	797b      	ldrb	r3, [r7, #5]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d821      	bhi.n	8001f40 <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 8001efc:	793b      	ldrb	r3, [r7, #4]
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	d81e      	bhi.n	8001f40 <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 8001f02:	2015      	movs	r0, #21
 8001f04:	f7ff ff4e 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff48 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 8001f14:	797b      	ldrb	r3, [r7, #5]
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff40 	bl	8001da4 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 8001f24:	2075      	movs	r0, #117	; 0x75
 8001f26:	f7ff ff3d 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff39 	bl	8001da4 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 8001f32:	793b      	ldrb	r3, [r7, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <OLED_WriteReg>
 8001f3e:	e000      	b.n	8001f42 <OLED_SetWindow+0x76>
        return;
 8001f40:	bf00      	nop
}
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}

08001f48 <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	2100      	movs	r1, #0
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff ffb9 	bl	8001ecc <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	e005      	b.n	8001f6c <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff ff2d 	bl	8001dc0 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	80fb      	strh	r3, [r7, #6]
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f72:	d3f5      	bcc.n	8001f60 <OLED_1in5_Clear+0x18>
    }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff ff9d 	bl	8001ecc <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	81fb      	strh	r3, [r7, #14]
 8001f96:	e019      	b.n	8001fcc <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81bb      	strh	r3, [r7, #12]
 8001f9c:	e010      	b.n	8001fc0 <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 8001f9e:	89ba      	ldrh	r2, [r7, #12]
 8001fa0:	89fb      	ldrh	r3, [r7, #14]
 8001fa2:	019b      	lsls	r3, r3, #6
 8001fa4:	4413      	add	r3, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 8001fb0:	897b      	ldrh	r3, [r7, #10]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff03 	bl	8001dc0 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 8001fba:	89bb      	ldrh	r3, [r7, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	81bb      	strh	r3, [r7, #12]
 8001fc0:	89bb      	ldrh	r3, [r7, #12]
 8001fc2:	2b3f      	cmp	r3, #63	; 0x3f
 8001fc4:	d9eb      	bls.n	8001f9e <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	81fb      	strh	r3, [r7, #14]
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	2b7f      	cmp	r3, #127	; 0x7f
 8001fd0:	d9e2      	bls.n	8001f98 <OLED_1in5_Display+0x1a>
        }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
#if USE_SPI_4W
	printf("USE_SPI_4W\r\n");
#elif USE_IIC
	printf("USE_IIC\r\n");
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <System_Init+0x28>)
 8001fe2:	f003 faa3 	bl	800552c <puts>
	OLED_CS_0;
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <System_Init+0x2c>)
 8001fec:	f000 fb4a 	bl	8002684 <HAL_GPIO_WritePin>
	OLED_DC_0;//DC = 0,1 >> Address = 0x3c,0x3d 
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <System_Init+0x30>)
 8001ff8:	f000 fb44 	bl	8002684 <HAL_GPIO_WritePin>
#elif USE_IIC_SOFT
	printf("USEI_IIC_SOFT\r\n");
	OLED_CS_0;
	OLED_DC_0;
#endif
  return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	080060fc 	.word	0x080060fc
 8002008:	40020400 	.word	0x40020400
 800200c:	40020000 	.word	0x40020000

08002010 <I2C_Write_Byte>:
//    return *((__IO uint8_t *)(&SPI1->DR));
//#endif
//}

void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	4603      	mov	r3, r0
 8002018:	460a      	mov	r2, r1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	71bb      	strb	r3, [r7, #6]
    int Err;
    uint8_t W_Buf[2] ;
    W_Buf[0] = Cmd;
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	733b      	strb	r3, [r7, #12]
    W_Buf[1] = value;
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	737b      	strb	r3, [r7, #13]
//        if(Err == 1000) {
//            printf("send error\r\n");
//            return ;
//        }
//    }
	HAL_I2C_Master_Transmit(&hi2c1, 0x7A, W_Buf, 2, 10);
 8002028:	f107 020c 	add.w	r2, r7, #12
 800202c:	230a      	movs	r3, #10
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2302      	movs	r3, #2
 8002032:	217a      	movs	r1, #122	; 0x7a
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <I2C_Write_Byte+0x34>)
 8002036:	f000 fbcf 	bl	80027d8 <HAL_I2C_Master_Transmit>
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200000c8 	.word	0x200000c8

08002048 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f861 	bl	8002118 <HAL_Delay>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002062:	2003      	movs	r0, #3
 8002064:	f000 f92e 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f805 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206e:	f7fe fc29 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f93b 	bl	8002312 <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f911 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000038 	.word	0x20000038
 80020d4:	20000034 	.word	0x20000034

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000038 	.word	0x20000038
 80020fc:	200005fc 	.word	0x200005fc

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200005fc 	.word	0x200005fc

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000038 	.word	0x20000038

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	4313      	orrs	r3, r2
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	05fa0000 	.word	0x05fa0000

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff47 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff5c 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffb0 	bl	8002280 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e175      	b.n	8002638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8164 	bne.w	8002632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_GPIO_Init+0x56>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d130      	bne.n	80023e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0201 	and.w	r2, r3, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d017      	beq.n	8002420 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80be 	beq.w	8002632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_GPIO_Init+0x324>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_GPIO_Init+0x324>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_GPIO_Init+0x324>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ce:	4a61      	ldr	r2, [pc, #388]	; (8002654 <HAL_GPIO_Init+0x328>)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x32c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d037      	beq.n	800256a <HAL_GPIO_Init+0x23e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_GPIO_Init+0x330>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_GPIO_Init+0x23a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a56      	ldr	r2, [pc, #344]	; (8002660 <HAL_GPIO_Init+0x334>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02b      	beq.n	8002562 <HAL_GPIO_Init+0x236>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_GPIO_Init+0x338>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d025      	beq.n	800255e <HAL_GPIO_Init+0x232>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a54      	ldr	r2, [pc, #336]	; (8002668 <HAL_GPIO_Init+0x33c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01f      	beq.n	800255a <HAL_GPIO_Init+0x22e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a53      	ldr	r2, [pc, #332]	; (800266c <HAL_GPIO_Init+0x340>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x22a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_GPIO_Init+0x344>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x226>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a51      	ldr	r2, [pc, #324]	; (8002674 <HAL_GPIO_Init+0x348>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x222>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a50      	ldr	r2, [pc, #320]	; (8002678 <HAL_GPIO_Init+0x34c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x21e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4f      	ldr	r2, [pc, #316]	; (800267c <HAL_GPIO_Init+0x350>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x21a>
 8002542:	2309      	movs	r3, #9
 8002544:	e012      	b.n	800256c <HAL_GPIO_Init+0x240>
 8002546:	230a      	movs	r3, #10
 8002548:	e010      	b.n	800256c <HAL_GPIO_Init+0x240>
 800254a:	2308      	movs	r3, #8
 800254c:	e00e      	b.n	800256c <HAL_GPIO_Init+0x240>
 800254e:	2307      	movs	r3, #7
 8002550:	e00c      	b.n	800256c <HAL_GPIO_Init+0x240>
 8002552:	2306      	movs	r3, #6
 8002554:	e00a      	b.n	800256c <HAL_GPIO_Init+0x240>
 8002556:	2305      	movs	r3, #5
 8002558:	e008      	b.n	800256c <HAL_GPIO_Init+0x240>
 800255a:	2304      	movs	r3, #4
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x240>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_Init+0x240>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_Init+0x240>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_Init+0x240>
 800256a:	2300      	movs	r3, #0
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f002 0203 	and.w	r2, r2, #3
 8002572:	0092      	lsls	r2, r2, #2
 8002574:	4093      	lsls	r3, r2
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800257c:	4935      	ldr	r1, [pc, #212]	; (8002654 <HAL_GPIO_Init+0x328>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_GPIO_Init+0x354>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_GPIO_Init+0x354>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_GPIO_Init+0x354>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_GPIO_Init+0x354>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_GPIO_Init+0x354>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002602:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_GPIO_Init+0x354>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_GPIO_Init+0x354>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262c:	4a14      	ldr	r2, [pc, #80]	; (8002680 <HAL_GPIO_Init+0x354>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	f67f ae86 	bls.w	800234c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40021400 	.word	0x40021400
 8002670:	40021800 	.word	0x40021800
 8002674:	40021c00 	.word	0x40021c00
 8002678:	40022000 	.word	0x40022000
 800267c:	40022400 	.word	0x40022400
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe f914 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e006      	b.n	8002740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800273e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d104      	bne.n	8002752 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_I2C_Init+0x11c>)
 800275e:	430b      	orrs	r3, r1
 8002760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	02008000 	.word	0x02008000

080027d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	817b      	strh	r3, [r7, #10]
 80027e8:	4613      	mov	r3, r2
 80027ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	f040 80da 	bne.w	80029ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2C_Master_Transmit+0x30>
 8002804:	2302      	movs	r3, #2
 8002806:	e0d3      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002810:	f7ff fc76 	bl	8002100 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8f0 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0be      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2bff      	cmp	r3, #255	; 0xff
 8002862:	d90e      	bls.n	8002882 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa6c 	bl	8002d58 <I2C_TransferConfig>
 8002880:	e06c      	b.n	800295c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fa5b 	bl	8002d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028a2:	e05b      	b.n	800295c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	6a39      	ldr	r1, [r7, #32]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f8ed 	bl	8002a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e07b      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d034      	beq.n	800295c <HAL_I2C_Master_Transmit+0x184>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d130      	bne.n	800295c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f87f 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04d      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d90e      	bls.n	800293c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fa0f 	bl	8002d58 <I2C_TransferConfig>
 800293a:	e00f      	b.n	800295c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	b2da      	uxtb	r2, r3
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f9fe 	bl	8002d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d19e      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8cc 	bl	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e01a      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2220      	movs	r2, #32
 8002980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_I2C_Master_Transmit+0x1e4>)
 800298e:	400b      	ands	r3, r1
 8002990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	80002000 	.word	0x80002000
 80029bc:	fe00e800 	.word	0xfe00e800

080029c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d007      	beq.n	80029fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	619a      	str	r2, [r3, #24]
  }
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	e022      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d01e      	beq.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff fb6d 	bl	8002100 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d113      	bne.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00f      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d0cd      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a94:	e02c      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f870 	bl	8002b80 <I2C_IsErrorOccurred>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e02a      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d01e      	beq.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7ff fb25 	bl	8002100 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d113      	bne.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e007      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d1cb      	bne.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b14:	e028      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f830 	bl	8002b80 <I2C_IsErrorOccurred>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e026      	b.n	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7ff fae9 	bl	8002100 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d113      	bne.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d1cf      	bne.n	8002b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d075      	beq.n	8002c98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bb4:	e056      	b.n	8002c64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d052      	beq.n	8002c64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7ff fa9f 	bl	8002100 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_IsErrorOccurred+0x54>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d147      	bne.n	8002c64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf6:	d12e      	bne.n	8002c56 <I2C_IsErrorOccurred+0xd6>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bfe:	d02a      	beq.n	8002c56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d027      	beq.n	8002c56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c14:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c16:	f7ff fa73 	bl	8002100 <HAL_GetTick>
 8002c1a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1c:	e01b      	b.n	8002c56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c1e:	f7ff fa6f 	bl	8002100 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b19      	cmp	r3, #25
 8002c2a:	d914      	bls.n	8002c56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d1dc      	bne.n	8002c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d003      	beq.n	8002c7a <I2C_IsErrorOccurred+0xfa>
 8002c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d09d      	beq.n	8002bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2220      	movs	r2, #32
 8002c88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01c      	beq.n	8002d48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fe56 	bl	80029c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <I2C_IsErrorOccurred+0x1d4>)
 8002d20:	400b      	ands	r3, r1
 8002d22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	4613      	mov	r3, r2
 8002d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d70:	7a7b      	ldrb	r3, [r7, #9]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d78:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d86:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	0d5b      	lsrs	r3, r3, #21
 8002d92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <I2C_TransferConfig+0x60>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	ea02 0103 	and.w	r1, r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	03ff63ff 	.word	0x03ff63ff

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d138      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e032      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d139      	bne.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e033      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2224      	movs	r2, #36	; 0x24
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eec:	b08f      	sub	sp, #60	; 0x3c
 8002eee:	af0a      	add	r7, sp, #40	; 0x28
 8002ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e116      	b.n	800312a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd fdb8 	bl	8000a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 ff0e 	bl	8004d5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	687e      	ldr	r6, [r7, #4]
 8002f48:	466d      	mov	r5, sp
 8002f4a:	f106 0410 	add.w	r4, r6, #16
 8002f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f5e:	1d33      	adds	r3, r6, #4
 8002f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	f001 fea2 	bl	8004cac <USB_CoreInit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0d7      	b.n	800312a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 fefc 	bl	8004d7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e04a      	b.n	8003022 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	333c      	adds	r3, #60	; 0x3c
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	b298      	uxth	r0, r3
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3342      	adds	r3, #66	; 0x42
 8002fc8:	4602      	mov	r2, r0
 8002fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333f      	adds	r3, #63	; 0x3f
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3344      	adds	r3, #68	; 0x44
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3348      	adds	r3, #72	; 0x48
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3350      	adds	r3, #80	; 0x50
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	3301      	adds	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d3af      	bcc.n	8002f8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e044      	b.n	80030bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3b5      	bcc.n	8003032 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	687e      	ldr	r6, [r7, #4]
 80030ce:	466d      	mov	r5, sp
 80030d0:	f106 0410 	add.w	r4, r6, #16
 80030d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e4:	1d33      	adds	r3, r6, #4
 80030e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f001 fe95 	bl	8004e18 <USB_DevInit>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e014      	b.n	800312a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f80b 	bl	8003134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 f84f 	bl	80051c6 <USB_DevDisconnect>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_PCDEx_ActivateLPM+0x44>)
 8003164:	4313      	orrs	r3, r2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	10000003 	.word	0x10000003

0800317c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40007000 	.word	0x40007000

0800319c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a22      	ldr	r2, [pc, #136]	; (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ca:	f7fe ff99 	bl	8002100 <HAL_GetTick>
 80031ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031d0:	e009      	b.n	80031e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031d2:	f7fe ff95 	bl	8002100 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e0:	d901      	bls.n	80031e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e022      	b.n	800322c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d1ee      	bne.n	80031d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003200:	f7fe ff7e 	bl	8002100 <HAL_GetTick>
 8003204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003206:	e009      	b.n	800321c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003208:	f7fe ff7a 	bl	8002100 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003216:	d901      	bls.n	800321c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e007      	b.n	800322c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003228:	d1ee      	bne.n	8003208 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000

0800323c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e29b      	b.n	800378a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003260:	4b96      	ldr	r3, [pc, #600]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d00c      	beq.n	8003286 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326c:	4b93      	ldr	r3, [pc, #588]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d112      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
 8003278:	4b90      	ldr	r3, [pc, #576]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003284:	d10b      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003286:	4b8d      	ldr	r3, [pc, #564]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06c      	beq.n	800336c <HAL_RCC_OscConfig+0x130>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d168      	bne.n	800336c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e275      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x7a>
 80032a8:	4b84      	ldr	r3, [pc, #528]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a83      	ldr	r2, [pc, #524]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x9c>
 80032be:	4b7f      	ldr	r3, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7e      	ldr	r2, [pc, #504]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b7c      	ldr	r3, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7b      	ldr	r2, [pc, #492]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0xc0>
 80032e2:	4b76      	ldr	r3, [pc, #472]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a72      	ldr	r2, [pc, #456]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6e      	ldr	r2, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b6c      	ldr	r3, [pc, #432]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6b      	ldr	r2, [pc, #428]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fef0 	bl	8002100 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe feec 	bl	8002100 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e229      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xe8>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fedc 	bl	8002100 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fed8 	bl	8002100 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e215      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x110>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d069      	beq.n	800344e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337a:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x190>
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x17a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1e9      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	493d      	ldr	r1, [pc, #244]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e040      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d023      	beq.n	800341c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fe8e 	bl	8002100 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe fe8a 	bl	8002100 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1c7      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b30      	ldr	r3, [pc, #192]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4929      	ldr	r1, [pc, #164]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
 800341a:	e018      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a26      	ldr	r2, [pc, #152]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fe6a 	bl	8002100 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe fe66 	bl	8002100 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1a3      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d038      	beq.n	80034cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d019      	beq.n	8003496 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fe fe47 	bl	8002100 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe fe43 	bl	8002100 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e180      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x23a>
 8003494:	e01a      	b.n	80034cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_RCC_OscConfig+0x280>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fe2d 	bl	8002100 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fe fe29 	bl	8002100 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d903      	bls.n	80034c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e166      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
 80034bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	4b92      	ldr	r3, [pc, #584]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a4 	beq.w	8003622 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b8c      	ldr	r3, [pc, #560]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a88      	ldr	r2, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b86      	ldr	r3, [pc, #536]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	4b83      	ldr	r3, [pc, #524]	; (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800350e:	4b80      	ldr	r3, [pc, #512]	; (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7f      	ldr	r2, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fe fdf1 	bl	8002100 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fe fded 	bl	8002100 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e12a      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003534:	4b76      	ldr	r3, [pc, #472]	; (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x31a>
 8003548:	4b70      	ldr	r3, [pc, #448]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a6f      	ldr	r2, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x33c>
 800355e:	4b6b      	ldr	r3, [pc, #428]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	4a6a      	ldr	r2, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6713      	str	r3, [r2, #112]	; 0x70
 800356a:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a67      	ldr	r2, [pc, #412]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x35e>
 8003580:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a61      	ldr	r2, [pc, #388]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	4b5f      	ldr	r3, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a5e      	ldr	r2, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 800359a:	4b5c      	ldr	r3, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fda1 	bl	8002100 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fd9d 	bl	8002100 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0d8      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x386>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fd8b 	bl	8002100 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fd87 	bl	8002100 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0c2      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80ae 	beq.w	8003788 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362c:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d06d      	beq.n	8003714 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d14b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a31      	ldr	r2, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fd58 	bl	8002100 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fd54 	bl	8002100 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e091      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	491b      	ldr	r1, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fd26 	bl	8002100 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fd22 	bl	8002100 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e05f      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x47c>
 80036d6:	e057      	b.n	8003788 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fd0c 	bl	8002100 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fd08 	bl	8002100 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e045      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x4b0>
 800370a:	e03d      	b.n	8003788 <HAL_RCC_OscConfig+0x54c>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <HAL_RCC_OscConfig+0x558>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d030      	beq.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d129      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d122      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800374c:	4293      	cmp	r3, r2
 800374e:	d119      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d10f      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d0      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b67      	ldr	r3, [pc, #412]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 020f 	bic.w	r2, r3, #15
 80037c6:	4965      	ldr	r1, [pc, #404]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d040      	beq.n	80038bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d115      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e073      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06b      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4936      	ldr	r1, [pc, #216]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fe fc38 	bl	8002100 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe fc34 	bl	8002100 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e053      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d210      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	4922      	ldr	r1, [pc, #136]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490a      	ldr	r1, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x1cc>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1d0>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1d4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fb94 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	08006108 	.word	0x08006108
 8003968:	20000000 	.word	0x20000000
 800396c:	20000034 	.word	0x20000034

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	2300      	movs	r3, #0
 8003982:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003988:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d00d      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003994:	2b08      	cmp	r3, #8
 8003996:	f200 80bd 	bhi.w	8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x34>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x3a>
 80039a2:	e0b7      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039a6:	60bb      	str	r3, [r7, #8]
      break;
 80039a8:	e0b7      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039aa:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039ac:	60bb      	str	r3, [r7, #8]
      break;
 80039ae:	e0b4      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b0:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d04d      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	461a      	mov	r2, r3
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	ea02 0800 	and.w	r8, r2, r0
 80039de:	ea03 0901 	and.w	r9, r3, r1
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	014b      	lsls	r3, r1, #5
 80039f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039f4:	0142      	lsls	r2, r0, #5
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	ebb0 0008 	subs.w	r0, r0, r8
 80039fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a10:	0182      	lsls	r2, r0, #6
 8003a12:	1a12      	subs	r2, r2, r0
 8003a14:	eb63 0301 	sbc.w	r3, r3, r1
 8003a18:	f04f 0000 	mov.w	r0, #0
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	00d9      	lsls	r1, r3, #3
 8003a22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a26:	00d0      	lsls	r0, r2, #3
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	eb12 0208 	adds.w	r2, r2, r8
 8003a30:	eb43 0309 	adc.w	r3, r3, r9
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	0259      	lsls	r1, r3, #9
 8003a3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a42:	0250      	lsls	r0, r2, #9
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f7fc fbf0 	bl	8000238 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e04a      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	ea02 0400 	and.w	r4, r2, r0
 8003a7a:	ea03 0501 	and.w	r5, r3, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	014b      	lsls	r3, r1, #5
 8003a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a90:	0142      	lsls	r2, r0, #5
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	1b00      	subs	r0, r0, r4
 8003a98:	eb61 0105 	sbc.w	r1, r1, r5
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	018b      	lsls	r3, r1, #6
 8003aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aaa:	0182      	lsls	r2, r0, #6
 8003aac:	1a12      	subs	r2, r2, r0
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	00d9      	lsls	r1, r3, #3
 8003abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac0:	00d0      	lsls	r0, r2, #3
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1912      	adds	r2, r2, r4
 8003ac8:	eb45 0303 	adc.w	r3, r5, r3
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0299      	lsls	r1, r3, #10
 8003ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ada:	0290      	lsls	r0, r2, #10
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f7fc fba4 	bl	8000238 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4613      	mov	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	60bb      	str	r3, [r7, #8]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b16:	60bb      	str	r3, [r7, #8]
      break;
 8003b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a9b      	lsrs	r3, r3, #10
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08006118 	.word	0x08006118

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b78:	f7ff ffdc 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0b5b      	lsrs	r3, r3, #13
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	08006118 	.word	0x08006118

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bc4:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	4964      	ldr	r1, [pc, #400]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	4959      	ldr	r1, [pc, #356]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d017      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c32:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	494a      	ldr	r1, [pc, #296]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c50:	d101      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808b 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8c:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fa2c 	bl	8002100 <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe fa28 	bl	8002100 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e38f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d035      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d02e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d114      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f9f0 	bl	8002100 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe f9ec 	bl	8002100 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e351      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ee      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d111      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	4901      	ldr	r1, [pc, #4]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000
 8003d74:	0ffffcff 	.word	0x0ffffcff
 8003d78:	4bb3      	ldr	r3, [pc, #716]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4ab2      	ldr	r2, [pc, #712]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4bb0      	ldr	r3, [pc, #704]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	49ad      	ldr	r1, [pc, #692]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003da2:	4ba9      	ldr	r3, [pc, #676]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da8:	4aa7      	ldr	r2, [pc, #668]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003db2:	4ba5      	ldr	r3, [pc, #660]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	49a2      	ldr	r1, [pc, #648]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd0:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dde:	499a      	ldr	r1, [pc, #616]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df2:	4b95      	ldr	r3, [pc, #596]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	4991      	ldr	r1, [pc, #580]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e14:	4b8c      	ldr	r3, [pc, #560]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e22:	4989      	ldr	r1, [pc, #548]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e36:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4980      	ldr	r1, [pc, #512]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e58:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4978      	ldr	r1, [pc, #480]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7a:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f023 020c 	bic.w	r2, r3, #12
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	496f      	ldr	r1, [pc, #444]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	4967      	ldr	r1, [pc, #412]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	495e      	ldr	r1, [pc, #376]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	4956      	ldr	r1, [pc, #344]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	4945      	ldr	r1, [pc, #276]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f46:	4b40      	ldr	r3, [pc, #256]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	493c      	ldr	r1, [pc, #240]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f98:	492b      	ldr	r1, [pc, #172]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffc:	4912      	ldr	r1, [pc, #72]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	4986      	ldr	r1, [pc, #536]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004060:	4b81      	ldr	r3, [pc, #516]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	497d      	ldr	r1, [pc, #500]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d006      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80d6 	beq.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800408c:	4b76      	ldr	r3, [pc, #472]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a75      	ldr	r2, [pc, #468]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe f832 	bl	8002100 <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040a0:	f7fe f82e 	bl	8002100 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e195      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b2:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d021      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11d      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040d2:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	0e1b      	lsrs	r3, r3, #24
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	019a      	lsls	r2, r3, #6
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	071b      	lsls	r3, r3, #28
 8004106:	4958      	ldr	r1, [pc, #352]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004138:	d129      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004148:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	0f1b      	lsrs	r3, r3, #28
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	019a      	lsls	r2, r3, #6
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	431a      	orrs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	493e      	ldr	r1, [pc, #248]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004176:	4b3c      	ldr	r3, [pc, #240]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417c:	f023 021f 	bic.w	r2, r3, #31
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	3b01      	subs	r3, #1
 8004186:	4938      	ldr	r1, [pc, #224]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01d      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041a8:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	0f1b      	lsrs	r3, r3, #28
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	4926      	ldr	r1, [pc, #152]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	019a      	lsls	r2, r3, #6
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	491a      	ldr	r1, [pc, #104]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fd ff75 	bl	8002100 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421a:	f7fd ff71 	bl	8002100 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0d8      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 80ce 	bne.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424c:	f7fd ff58 	bl	8002100 <HAL_GetTick>
 8004250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004252:	e00b      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004254:	f7fd ff54 	bl	8002100 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d904      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0bb      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d0ec      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a2:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042b0:	4b4d      	ldr	r3, [pc, #308]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	0f1b      	lsrs	r3, r3, #28
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	4944      	ldr	r1, [pc, #272]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	493d      	ldr	r1, [pc, #244]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d022      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430c:	d11d      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	0f1b      	lsrs	r3, r3, #28
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	4929      	ldr	r1, [pc, #164]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	0e1b      	lsrs	r3, r3, #24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	019a      	lsls	r2, r3, #6
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	4917      	ldr	r1, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	4911      	ldr	r1, [pc, #68]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fd fea4 	bl	8002100 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043bc:	f7fd fea0 	bl	8002100 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e007      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043da:	d1ef      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e040      	b.n	8004480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fadc 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f82c 	bl	8004488 <UART_SetConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa82 	bl	800494c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb09 	bl	8004a90 <UART_CheckIdleState>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4ba7      	ldr	r3, [pc, #668]	; (8004750 <UART_SetConfig+0x2c8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	6979      	ldr	r1, [r7, #20]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a95      	ldr	r2, [pc, #596]	; (8004754 <UART_SetConfig+0x2cc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d120      	bne.n	8004546 <UART_SetConfig+0xbe>
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <UART_SetConfig+0x2d0>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d816      	bhi.n	8004540 <UART_SetConfig+0xb8>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x90>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004529 	.word	0x08004529
 800451c:	08004535 	.word	0x08004535
 8004520:	0800452f 	.word	0x0800452f
 8004524:	0800453b 	.word	0x0800453b
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e14f      	b.n	80047ce <UART_SetConfig+0x346>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e14c      	b.n	80047ce <UART_SetConfig+0x346>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e149      	b.n	80047ce <UART_SetConfig+0x346>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e146      	b.n	80047ce <UART_SetConfig+0x346>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e143      	b.n	80047ce <UART_SetConfig+0x346>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a84      	ldr	r2, [pc, #528]	; (800475c <UART_SetConfig+0x2d4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d132      	bne.n	80045b6 <UART_SetConfig+0x12e>
 8004550:	4b81      	ldr	r3, [pc, #516]	; (8004758 <UART_SetConfig+0x2d0>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d828      	bhi.n	80045b0 <UART_SetConfig+0x128>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0xdc>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004599 	.word	0x08004599
 8004568:	080045b1 	.word	0x080045b1
 800456c:	080045b1 	.word	0x080045b1
 8004570:	080045b1 	.word	0x080045b1
 8004574:	080045a5 	.word	0x080045a5
 8004578:	080045b1 	.word	0x080045b1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045b1 	.word	0x080045b1
 8004584:	0800459f 	.word	0x0800459f
 8004588:	080045b1 	.word	0x080045b1
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b1 	.word	0x080045b1
 8004594:	080045ab 	.word	0x080045ab
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e117      	b.n	80047ce <UART_SetConfig+0x346>
 800459e:	2302      	movs	r3, #2
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e114      	b.n	80047ce <UART_SetConfig+0x346>
 80045a4:	2304      	movs	r3, #4
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e111      	b.n	80047ce <UART_SetConfig+0x346>
 80045aa:	2308      	movs	r3, #8
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e10e      	b.n	80047ce <UART_SetConfig+0x346>
 80045b0:	2310      	movs	r3, #16
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e10b      	b.n	80047ce <UART_SetConfig+0x346>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a69      	ldr	r2, [pc, #420]	; (8004760 <UART_SetConfig+0x2d8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d120      	bne.n	8004602 <UART_SetConfig+0x17a>
 80045c0:	4b65      	ldr	r3, [pc, #404]	; (8004758 <UART_SetConfig+0x2d0>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	d013      	beq.n	80045f6 <UART_SetConfig+0x16e>
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d814      	bhi.n	80045fc <UART_SetConfig+0x174>
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d009      	beq.n	80045ea <UART_SetConfig+0x162>
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d810      	bhi.n	80045fc <UART_SetConfig+0x174>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <UART_SetConfig+0x15c>
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d006      	beq.n	80045f0 <UART_SetConfig+0x168>
 80045e2:	e00b      	b.n	80045fc <UART_SetConfig+0x174>
 80045e4:	2300      	movs	r3, #0
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0f1      	b.n	80047ce <UART_SetConfig+0x346>
 80045ea:	2302      	movs	r3, #2
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0ee      	b.n	80047ce <UART_SetConfig+0x346>
 80045f0:	2304      	movs	r3, #4
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0eb      	b.n	80047ce <UART_SetConfig+0x346>
 80045f6:	2308      	movs	r3, #8
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e0e8      	b.n	80047ce <UART_SetConfig+0x346>
 80045fc:	2310      	movs	r3, #16
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0e5      	b.n	80047ce <UART_SetConfig+0x346>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a57      	ldr	r2, [pc, #348]	; (8004764 <UART_SetConfig+0x2dc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d120      	bne.n	800464e <UART_SetConfig+0x1c6>
 800460c:	4b52      	ldr	r3, [pc, #328]	; (8004758 <UART_SetConfig+0x2d0>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004616:	2bc0      	cmp	r3, #192	; 0xc0
 8004618:	d013      	beq.n	8004642 <UART_SetConfig+0x1ba>
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d814      	bhi.n	8004648 <UART_SetConfig+0x1c0>
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d009      	beq.n	8004636 <UART_SetConfig+0x1ae>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d810      	bhi.n	8004648 <UART_SetConfig+0x1c0>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <UART_SetConfig+0x1a8>
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d006      	beq.n	800463c <UART_SetConfig+0x1b4>
 800462e:	e00b      	b.n	8004648 <UART_SetConfig+0x1c0>
 8004630:	2300      	movs	r3, #0
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0cb      	b.n	80047ce <UART_SetConfig+0x346>
 8004636:	2302      	movs	r3, #2
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0c8      	b.n	80047ce <UART_SetConfig+0x346>
 800463c:	2304      	movs	r3, #4
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0c5      	b.n	80047ce <UART_SetConfig+0x346>
 8004642:	2308      	movs	r3, #8
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e0c2      	b.n	80047ce <UART_SetConfig+0x346>
 8004648:	2310      	movs	r3, #16
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e0bf      	b.n	80047ce <UART_SetConfig+0x346>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a45      	ldr	r2, [pc, #276]	; (8004768 <UART_SetConfig+0x2e0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d125      	bne.n	80046a4 <UART_SetConfig+0x21c>
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <UART_SetConfig+0x2d0>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d017      	beq.n	8004698 <UART_SetConfig+0x210>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d817      	bhi.n	800469e <UART_SetConfig+0x216>
 800466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004672:	d00b      	beq.n	800468c <UART_SetConfig+0x204>
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d811      	bhi.n	800469e <UART_SetConfig+0x216>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <UART_SetConfig+0x1fe>
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d006      	beq.n	8004692 <UART_SetConfig+0x20a>
 8004684:	e00b      	b.n	800469e <UART_SetConfig+0x216>
 8004686:	2300      	movs	r3, #0
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e0a0      	b.n	80047ce <UART_SetConfig+0x346>
 800468c:	2302      	movs	r3, #2
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e09d      	b.n	80047ce <UART_SetConfig+0x346>
 8004692:	2304      	movs	r3, #4
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e09a      	b.n	80047ce <UART_SetConfig+0x346>
 8004698:	2308      	movs	r3, #8
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e097      	b.n	80047ce <UART_SetConfig+0x346>
 800469e:	2310      	movs	r3, #16
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e094      	b.n	80047ce <UART_SetConfig+0x346>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a30      	ldr	r2, [pc, #192]	; (800476c <UART_SetConfig+0x2e4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d125      	bne.n	80046fa <UART_SetConfig+0x272>
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <UART_SetConfig+0x2d0>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046bc:	d017      	beq.n	80046ee <UART_SetConfig+0x266>
 80046be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c2:	d817      	bhi.n	80046f4 <UART_SetConfig+0x26c>
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c8:	d00b      	beq.n	80046e2 <UART_SetConfig+0x25a>
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ce:	d811      	bhi.n	80046f4 <UART_SetConfig+0x26c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0x254>
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	d006      	beq.n	80046e8 <UART_SetConfig+0x260>
 80046da:	e00b      	b.n	80046f4 <UART_SetConfig+0x26c>
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e075      	b.n	80047ce <UART_SetConfig+0x346>
 80046e2:	2302      	movs	r3, #2
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e072      	b.n	80047ce <UART_SetConfig+0x346>
 80046e8:	2304      	movs	r3, #4
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e06f      	b.n	80047ce <UART_SetConfig+0x346>
 80046ee:	2308      	movs	r3, #8
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e06c      	b.n	80047ce <UART_SetConfig+0x346>
 80046f4:	2310      	movs	r3, #16
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e069      	b.n	80047ce <UART_SetConfig+0x346>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <UART_SetConfig+0x2e8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d137      	bne.n	8004774 <UART_SetConfig+0x2ec>
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <UART_SetConfig+0x2d0>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800470e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004712:	d017      	beq.n	8004744 <UART_SetConfig+0x2bc>
 8004714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004718:	d817      	bhi.n	800474a <UART_SetConfig+0x2c2>
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d00b      	beq.n	8004738 <UART_SetConfig+0x2b0>
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d811      	bhi.n	800474a <UART_SetConfig+0x2c2>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <UART_SetConfig+0x2aa>
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d006      	beq.n	800473e <UART_SetConfig+0x2b6>
 8004730:	e00b      	b.n	800474a <UART_SetConfig+0x2c2>
 8004732:	2300      	movs	r3, #0
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e04a      	b.n	80047ce <UART_SetConfig+0x346>
 8004738:	2302      	movs	r3, #2
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e047      	b.n	80047ce <UART_SetConfig+0x346>
 800473e:	2304      	movs	r3, #4
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e044      	b.n	80047ce <UART_SetConfig+0x346>
 8004744:	2308      	movs	r3, #8
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e041      	b.n	80047ce <UART_SetConfig+0x346>
 800474a:	2310      	movs	r3, #16
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e03e      	b.n	80047ce <UART_SetConfig+0x346>
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40011000 	.word	0x40011000
 8004758:	40023800 	.word	0x40023800
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	40011400 	.word	0x40011400
 8004770:	40007800 	.word	0x40007800
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	; (8004940 <UART_SetConfig+0x4b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d125      	bne.n	80047ca <UART_SetConfig+0x342>
 800477e:	4b71      	ldr	r3, [pc, #452]	; (8004944 <UART_SetConfig+0x4bc>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800478c:	d017      	beq.n	80047be <UART_SetConfig+0x336>
 800478e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004792:	d817      	bhi.n	80047c4 <UART_SetConfig+0x33c>
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d00b      	beq.n	80047b2 <UART_SetConfig+0x32a>
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d811      	bhi.n	80047c4 <UART_SetConfig+0x33c>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <UART_SetConfig+0x324>
 80047a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x330>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x33c>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e00d      	b.n	80047ce <UART_SetConfig+0x346>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e00a      	b.n	80047ce <UART_SetConfig+0x346>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e007      	b.n	80047ce <UART_SetConfig+0x346>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e004      	b.n	80047ce <UART_SetConfig+0x346>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e001      	b.n	80047ce <UART_SetConfig+0x346>
 80047ca:	2310      	movs	r3, #16
 80047cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d6:	d15a      	bne.n	800488e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d827      	bhi.n	800482e <UART_SetConfig+0x3a6>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0x35c>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004819 	.word	0x08004819
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7ff f9a0 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800480c:	61b8      	str	r0, [r7, #24]
        break;
 800480e:	e013      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7ff f9b0 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8004814:	61b8      	str	r0, [r7, #24]
        break;
 8004816:	e00f      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <UART_SetConfig+0x4c0>)
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e00c      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7ff f8a7 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8004822:	61b8      	str	r0, [r7, #24]
        break;
 8004824:	e008      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482a:	61bb      	str	r3, [r7, #24]
        break;
 800482c:	e004      	b.n	8004838 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	77bb      	strb	r3, [r7, #30]
        break;
 8004836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d074      	beq.n	8004928 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	005a      	lsls	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d916      	bls.n	8004888 <UART_SetConfig+0x400>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d212      	bcs.n	8004888 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b29a      	uxth	r2, r3
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	4313      	orrs	r3, r2
 800487c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	89fa      	ldrh	r2, [r7, #14]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e04f      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	77bb      	strb	r3, [r7, #30]
 800488c:	e04c      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800488e:	7ffb      	ldrb	r3, [r7, #31]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d828      	bhi.n	80048e6 <UART_SetConfig+0x45e>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x414>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	080048d7 	.word	0x080048d7
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
 80048bc:	080048df 	.word	0x080048df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7ff f944 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80048c4:	61b8      	str	r0, [r7, #24]
        break;
 80048c6:	e013      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7ff f954 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <UART_SetConfig+0x4c0>)
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e00c      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7ff f84b 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 80048da:	61b8      	str	r0, [r7, #24]
        break;
 80048dc:	e008      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e004      	b.n	80048f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77bb      	strb	r3, [r7, #30]
        break;
 80048ee:	bf00      	nop
    }

    if (pclk != 0U)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	085a      	lsrs	r2, r3, #1
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d909      	bls.n	8004924 <UART_SetConfig+0x49c>
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	d205      	bcs.n	8004924 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e001      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004934:	7fbb      	ldrb	r3, [r7, #30]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40007c00 	.word	0x40007c00
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400

0800494c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d10a      	bne.n	8004a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa0:	f7fd fb2e 	bl	8002100 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d10e      	bne.n	8004ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f82d 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e023      	b.n	8004b1a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d10e      	bne.n	8004afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f817 	bl	8004b22 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e00d      	b.n	8004b1a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b09c      	sub	sp, #112	; 0x70
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b32:	e0a5      	b.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	f000 80a1 	beq.w	8004c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fd fadf 	bl	8002100 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d13e      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b68:	667b      	str	r3, [r7, #100]	; 0x64
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e6      	bne.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e067      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d04f      	beq.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d147      	bne.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e6      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c4c:	623a      	str	r2, [r7, #32]
 8004c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e010      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	f43f af4a 	beq.w	8004b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3770      	adds	r7, #112	; 0x70
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cac:	b084      	sub	sp, #16
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	f107 001c 	add.w	r0, r7, #28
 8004cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d120      	bne.n	8004d06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <USB_CoreInit+0xac>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa92 	bl	8005224 <USB_CoreReset>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	e010      	b.n	8004d28 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa86 	bl	8005224 <USB_CoreReset>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10b      	bne.n	8004d46 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f043 0206 	orr.w	r2, r3, #6
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d52:	b004      	add	sp, #16
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	ffbdffbf 	.word	0xffbdffbf

08004d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 0201 	bic.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d115      	bne.n	8004dcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dac:	2001      	movs	r0, #1
 8004dae:	f7fd f9b3 	bl	8002118 <HAL_Delay>
      ms++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fa25 	bl	8005208 <USB_GetMode>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d01e      	beq.n	8004e02 <USB_SetCurrentMode+0x84>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b31      	cmp	r3, #49	; 0x31
 8004dc8:	d9f0      	bls.n	8004dac <USB_SetCurrentMode+0x2e>
 8004dca:	e01a      	b.n	8004e02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d115      	bne.n	8004dfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dde:	2001      	movs	r0, #1
 8004de0:	f7fd f99a 	bl	8002118 <HAL_Delay>
      ms++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa0c 	bl	8005208 <USB_GetMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <USB_SetCurrentMode+0x84>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b31      	cmp	r3, #49	; 0x31
 8004dfa:	d9f0      	bls.n	8004dde <USB_SetCurrentMode+0x60>
 8004dfc:	e001      	b.n	8004e02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e005      	b.n	8004e0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b32      	cmp	r3, #50	; 0x32
 8004e06:	d101      	bne.n	8004e0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e18:	b084      	sub	sp, #16
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e009      	b.n	8004e4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3340      	adds	r3, #64	; 0x40
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b0e      	cmp	r3, #14
 8004e50:	d9f2      	bls.n	8004e38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11c      	bne.n	8004e92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e005      	b.n	8004e9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	461a      	mov	r2, r3
 8004eba:	680b      	ldr	r3, [r1, #0]
 8004ebc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10c      	bne.n	8004ede <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004eca:	2100      	movs	r1, #0
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f961 	bl	8005194 <USB_SetDevSpeed>
 8004ed2:	e008      	b.n	8004ee6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f95c 	bl	8005194 <USB_SetDevSpeed>
 8004edc:	e003      	b.n	8004ee6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ede:	2103      	movs	r1, #3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f957 	bl	8005194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ee6:	2110      	movs	r1, #16
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f8f3 	bl	80050d4 <USB_FlushTxFifo>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f91d 	bl	8005138 <USB_FlushRxFifo>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2300      	movs	r3, #0
 8004f12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e043      	b.n	8004fba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d118      	bne.n	8004f7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e013      	b.n	8004f8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e008      	b.n	8004f8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	461a      	mov	r2, r3
 8004fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d3b7      	bcc.n	8004f32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e043      	b.n	8005050 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fde:	d118      	bne.n	8005012 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e013      	b.n	8005024 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	e008      	b.n	8005024 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	461a      	mov	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	461a      	mov	r2, r3
 8005044:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3301      	adds	r3, #1
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d3b7      	bcc.n	8004fc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800506a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <USB_DevInit+0x2b4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f043 0208 	orr.w	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <USB_DevInit+0x2b8>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050c8:	b004      	add	sp, #16
 80050ca:	4770      	bx	lr
 80050cc:	803c3800 	.word	0x803c3800
 80050d0:	40000004 	.word	0x40000004

080050d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	4a12      	ldr	r2, [pc, #72]	; (8005134 <USB_FlushTxFifo+0x60>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e01a      	b.n	8005128 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	daf3      	bge.n	80050e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <USB_FlushTxFifo+0x60>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e006      	b.n	8005128 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b20      	cmp	r3, #32
 8005124:	d0f1      	beq.n	800510a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	00030d40 	.word	0x00030d40

08005138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <USB_FlushRxFifo+0x58>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e017      	b.n	8005184 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	daf3      	bge.n	8005144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2210      	movs	r2, #16
 8005164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <USB_FlushRxFifo+0x58>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e006      	b.n	8005184 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b10      	cmp	r3, #16
 8005180:	d0f1      	beq.n	8005166 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	00030d40 	.word	0x00030d40

08005194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <USB_CoreReset+0x60>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e01a      	b.n	8005276 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	daf3      	bge.n	8005230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f043 0201 	orr.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <USB_CoreReset+0x60>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e006      	b.n	8005276 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d0f1      	beq.n	8005258 <USB_CoreReset+0x34>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	00030d40 	.word	0x00030d40

08005288 <__errno>:
 8005288:	4b01      	ldr	r3, [pc, #4]	; (8005290 <__errno+0x8>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	2000003c 	.word	0x2000003c

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	; (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	; (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	; (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	; (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 fcee 	bl	8005c88 <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	08008c34 	.word	0x08008c34
 80052d0:	08008c34 	.word	0x08008c34
 80052d4:	08008c34 	.word	0x08008c34
 80052d8:	08008c38 	.word	0x08008c38

080052dc <malloc>:
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <malloc+0xc>)
 80052de:	4601      	mov	r1, r0
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f000 b85b 	b.w	800539c <_malloc_r>
 80052e6:	bf00      	nop
 80052e8:	2000003c 	.word	0x2000003c

080052ec <memset>:
 80052ec:	4402      	add	r2, r0
 80052ee:	4603      	mov	r3, r0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <_free_r>:
 80052fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052fe:	2900      	cmp	r1, #0
 8005300:	d048      	beq.n	8005394 <_free_r+0x98>
 8005302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005306:	9001      	str	r0, [sp, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f1a1 0404 	sub.w	r4, r1, #4
 800530e:	bfb8      	it	lt
 8005310:	18e4      	addlt	r4, r4, r3
 8005312:	f000 fc01 	bl	8005b18 <__malloc_lock>
 8005316:	4a20      	ldr	r2, [pc, #128]	; (8005398 <_free_r+0x9c>)
 8005318:	9801      	ldr	r0, [sp, #4]
 800531a:	6813      	ldr	r3, [r2, #0]
 800531c:	4615      	mov	r5, r2
 800531e:	b933      	cbnz	r3, 800532e <_free_r+0x32>
 8005320:	6063      	str	r3, [r4, #4]
 8005322:	6014      	str	r4, [r2, #0]
 8005324:	b003      	add	sp, #12
 8005326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800532a:	f000 bbfb 	b.w	8005b24 <__malloc_unlock>
 800532e:	42a3      	cmp	r3, r4
 8005330:	d90b      	bls.n	800534a <_free_r+0x4e>
 8005332:	6821      	ldr	r1, [r4, #0]
 8005334:	1862      	adds	r2, r4, r1
 8005336:	4293      	cmp	r3, r2
 8005338:	bf04      	itt	eq
 800533a:	681a      	ldreq	r2, [r3, #0]
 800533c:	685b      	ldreq	r3, [r3, #4]
 800533e:	6063      	str	r3, [r4, #4]
 8005340:	bf04      	itt	eq
 8005342:	1852      	addeq	r2, r2, r1
 8005344:	6022      	streq	r2, [r4, #0]
 8005346:	602c      	str	r4, [r5, #0]
 8005348:	e7ec      	b.n	8005324 <_free_r+0x28>
 800534a:	461a      	mov	r2, r3
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	b10b      	cbz	r3, 8005354 <_free_r+0x58>
 8005350:	42a3      	cmp	r3, r4
 8005352:	d9fa      	bls.n	800534a <_free_r+0x4e>
 8005354:	6811      	ldr	r1, [r2, #0]
 8005356:	1855      	adds	r5, r2, r1
 8005358:	42a5      	cmp	r5, r4
 800535a:	d10b      	bne.n	8005374 <_free_r+0x78>
 800535c:	6824      	ldr	r4, [r4, #0]
 800535e:	4421      	add	r1, r4
 8005360:	1854      	adds	r4, r2, r1
 8005362:	42a3      	cmp	r3, r4
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	d1dd      	bne.n	8005324 <_free_r+0x28>
 8005368:	681c      	ldr	r4, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	6053      	str	r3, [r2, #4]
 800536e:	4421      	add	r1, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	e7d7      	b.n	8005324 <_free_r+0x28>
 8005374:	d902      	bls.n	800537c <_free_r+0x80>
 8005376:	230c      	movs	r3, #12
 8005378:	6003      	str	r3, [r0, #0]
 800537a:	e7d3      	b.n	8005324 <_free_r+0x28>
 800537c:	6825      	ldr	r5, [r4, #0]
 800537e:	1961      	adds	r1, r4, r5
 8005380:	428b      	cmp	r3, r1
 8005382:	bf04      	itt	eq
 8005384:	6819      	ldreq	r1, [r3, #0]
 8005386:	685b      	ldreq	r3, [r3, #4]
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	bf04      	itt	eq
 800538c:	1949      	addeq	r1, r1, r5
 800538e:	6021      	streq	r1, [r4, #0]
 8005390:	6054      	str	r4, [r2, #4]
 8005392:	e7c7      	b.n	8005324 <_free_r+0x28>
 8005394:	b003      	add	sp, #12
 8005396:	bd30      	pop	{r4, r5, pc}
 8005398:	200000c0 	.word	0x200000c0

0800539c <_malloc_r>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	1ccd      	adds	r5, r1, #3
 80053a0:	f025 0503 	bic.w	r5, r5, #3
 80053a4:	3508      	adds	r5, #8
 80053a6:	2d0c      	cmp	r5, #12
 80053a8:	bf38      	it	cc
 80053aa:	250c      	movcc	r5, #12
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	4606      	mov	r6, r0
 80053b0:	db01      	blt.n	80053b6 <_malloc_r+0x1a>
 80053b2:	42a9      	cmp	r1, r5
 80053b4:	d903      	bls.n	80053be <_malloc_r+0x22>
 80053b6:	230c      	movs	r3, #12
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	2000      	movs	r0, #0
 80053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053be:	f000 fbab 	bl	8005b18 <__malloc_lock>
 80053c2:	4921      	ldr	r1, [pc, #132]	; (8005448 <_malloc_r+0xac>)
 80053c4:	680a      	ldr	r2, [r1, #0]
 80053c6:	4614      	mov	r4, r2
 80053c8:	b99c      	cbnz	r4, 80053f2 <_malloc_r+0x56>
 80053ca:	4f20      	ldr	r7, [pc, #128]	; (800544c <_malloc_r+0xb0>)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	b923      	cbnz	r3, 80053da <_malloc_r+0x3e>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4630      	mov	r0, r6
 80053d4:	f000 f8b2 	bl	800553c <_sbrk_r>
 80053d8:	6038      	str	r0, [r7, #0]
 80053da:	4629      	mov	r1, r5
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f8ad 	bl	800553c <_sbrk_r>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d123      	bne.n	800542e <_malloc_r+0x92>
 80053e6:	230c      	movs	r3, #12
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	4630      	mov	r0, r6
 80053ec:	f000 fb9a 	bl	8005b24 <__malloc_unlock>
 80053f0:	e7e3      	b.n	80053ba <_malloc_r+0x1e>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	1b5b      	subs	r3, r3, r5
 80053f6:	d417      	bmi.n	8005428 <_malloc_r+0x8c>
 80053f8:	2b0b      	cmp	r3, #11
 80053fa:	d903      	bls.n	8005404 <_malloc_r+0x68>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	441c      	add	r4, r3
 8005400:	6025      	str	r5, [r4, #0]
 8005402:	e004      	b.n	800540e <_malloc_r+0x72>
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	42a2      	cmp	r2, r4
 8005408:	bf0c      	ite	eq
 800540a:	600b      	streq	r3, [r1, #0]
 800540c:	6053      	strne	r3, [r2, #4]
 800540e:	4630      	mov	r0, r6
 8005410:	f000 fb88 	bl	8005b24 <__malloc_unlock>
 8005414:	f104 000b 	add.w	r0, r4, #11
 8005418:	1d23      	adds	r3, r4, #4
 800541a:	f020 0007 	bic.w	r0, r0, #7
 800541e:	1ac2      	subs	r2, r0, r3
 8005420:	d0cc      	beq.n	80053bc <_malloc_r+0x20>
 8005422:	1a1b      	subs	r3, r3, r0
 8005424:	50a3      	str	r3, [r4, r2]
 8005426:	e7c9      	b.n	80053bc <_malloc_r+0x20>
 8005428:	4622      	mov	r2, r4
 800542a:	6864      	ldr	r4, [r4, #4]
 800542c:	e7cc      	b.n	80053c8 <_malloc_r+0x2c>
 800542e:	1cc4      	adds	r4, r0, #3
 8005430:	f024 0403 	bic.w	r4, r4, #3
 8005434:	42a0      	cmp	r0, r4
 8005436:	d0e3      	beq.n	8005400 <_malloc_r+0x64>
 8005438:	1a21      	subs	r1, r4, r0
 800543a:	4630      	mov	r0, r6
 800543c:	f000 f87e 	bl	800553c <_sbrk_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d1dd      	bne.n	8005400 <_malloc_r+0x64>
 8005444:	e7cf      	b.n	80053e6 <_malloc_r+0x4a>
 8005446:	bf00      	nop
 8005448:	200000c0 	.word	0x200000c0
 800544c:	200000c4 	.word	0x200000c4

08005450 <_puts_r>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460e      	mov	r6, r1
 8005454:	4605      	mov	r5, r0
 8005456:	b118      	cbz	r0, 8005460 <_puts_r+0x10>
 8005458:	6983      	ldr	r3, [r0, #24]
 800545a:	b90b      	cbnz	r3, 8005460 <_puts_r+0x10>
 800545c:	f000 fa58 	bl	8005910 <__sinit>
 8005460:	69ab      	ldr	r3, [r5, #24]
 8005462:	68ac      	ldr	r4, [r5, #8]
 8005464:	b913      	cbnz	r3, 800546c <_puts_r+0x1c>
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fa52 	bl	8005910 <__sinit>
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <_puts_r+0xd0>)
 800546e:	429c      	cmp	r4, r3
 8005470:	d120      	bne.n	80054b4 <_puts_r+0x64>
 8005472:	686c      	ldr	r4, [r5, #4]
 8005474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005476:	07db      	lsls	r3, r3, #31
 8005478:	d405      	bmi.n	8005486 <_puts_r+0x36>
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	0598      	lsls	r0, r3, #22
 800547e:	d402      	bmi.n	8005486 <_puts_r+0x36>
 8005480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005482:	f000 fae3 	bl	8005a4c <__retarget_lock_acquire_recursive>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	0719      	lsls	r1, r3, #28
 800548a:	d51d      	bpl.n	80054c8 <_puts_r+0x78>
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	b1db      	cbz	r3, 80054c8 <_puts_r+0x78>
 8005490:	3e01      	subs	r6, #1
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005498:	3b01      	subs	r3, #1
 800549a:	60a3      	str	r3, [r4, #8]
 800549c:	bb39      	cbnz	r1, 80054ee <_puts_r+0x9e>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da38      	bge.n	8005514 <_puts_r+0xc4>
 80054a2:	4622      	mov	r2, r4
 80054a4:	210a      	movs	r1, #10
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 f858 	bl	800555c <__swbuf_r>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d011      	beq.n	80054d4 <_puts_r+0x84>
 80054b0:	250a      	movs	r5, #10
 80054b2:	e011      	b.n	80054d8 <_puts_r+0x88>
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <_puts_r+0xd4>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	d101      	bne.n	80054be <_puts_r+0x6e>
 80054ba:	68ac      	ldr	r4, [r5, #8]
 80054bc:	e7da      	b.n	8005474 <_puts_r+0x24>
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <_puts_r+0xd8>)
 80054c0:	429c      	cmp	r4, r3
 80054c2:	bf08      	it	eq
 80054c4:	68ec      	ldreq	r4, [r5, #12]
 80054c6:	e7d5      	b.n	8005474 <_puts_r+0x24>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f898 	bl	8005600 <__swsetup_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d0dd      	beq.n	8005490 <_puts_r+0x40>
 80054d4:	f04f 35ff 	mov.w	r5, #4294967295
 80054d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054da:	07da      	lsls	r2, r3, #31
 80054dc:	d405      	bmi.n	80054ea <_puts_r+0x9a>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	059b      	lsls	r3, r3, #22
 80054e2:	d402      	bmi.n	80054ea <_puts_r+0x9a>
 80054e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e6:	f000 fab2 	bl	8005a4e <__retarget_lock_release_recursive>
 80054ea:	4628      	mov	r0, r5
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da04      	bge.n	80054fc <_puts_r+0xac>
 80054f2:	69a2      	ldr	r2, [r4, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	dc06      	bgt.n	8005506 <_puts_r+0xb6>
 80054f8:	290a      	cmp	r1, #10
 80054fa:	d004      	beq.n	8005506 <_puts_r+0xb6>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	6022      	str	r2, [r4, #0]
 8005502:	7019      	strb	r1, [r3, #0]
 8005504:	e7c5      	b.n	8005492 <_puts_r+0x42>
 8005506:	4622      	mov	r2, r4
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f827 	bl	800555c <__swbuf_r>
 800550e:	3001      	adds	r0, #1
 8005510:	d1bf      	bne.n	8005492 <_puts_r+0x42>
 8005512:	e7df      	b.n	80054d4 <_puts_r+0x84>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	250a      	movs	r5, #10
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	6022      	str	r2, [r4, #0]
 800551c:	701d      	strb	r5, [r3, #0]
 800551e:	e7db      	b.n	80054d8 <_puts_r+0x88>
 8005520:	08008bec 	.word	0x08008bec
 8005524:	08008c0c 	.word	0x08008c0c
 8005528:	08008bcc 	.word	0x08008bcc

0800552c <puts>:
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <puts+0xc>)
 800552e:	4601      	mov	r1, r0
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	f7ff bf8d 	b.w	8005450 <_puts_r>
 8005536:	bf00      	nop
 8005538:	2000003c 	.word	0x2000003c

0800553c <_sbrk_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_sbrk_r+0x1c>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	602b      	str	r3, [r5, #0]
 8005548:	f7fb fbb2 	bl	8000cb0 <_sbrk>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_sbrk_r+0x1a>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_sbrk_r+0x1a>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	2000060c 	.word	0x2000060c

0800555c <__swbuf_r>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	460e      	mov	r6, r1
 8005560:	4614      	mov	r4, r2
 8005562:	4605      	mov	r5, r0
 8005564:	b118      	cbz	r0, 800556e <__swbuf_r+0x12>
 8005566:	6983      	ldr	r3, [r0, #24]
 8005568:	b90b      	cbnz	r3, 800556e <__swbuf_r+0x12>
 800556a:	f000 f9d1 	bl	8005910 <__sinit>
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <__swbuf_r+0x98>)
 8005570:	429c      	cmp	r4, r3
 8005572:	d12b      	bne.n	80055cc <__swbuf_r+0x70>
 8005574:	686c      	ldr	r4, [r5, #4]
 8005576:	69a3      	ldr	r3, [r4, #24]
 8005578:	60a3      	str	r3, [r4, #8]
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	071a      	lsls	r2, r3, #28
 800557e:	d52f      	bpl.n	80055e0 <__swbuf_r+0x84>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	b36b      	cbz	r3, 80055e0 <__swbuf_r+0x84>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1ac0      	subs	r0, r0, r3
 800558a:	6963      	ldr	r3, [r4, #20]
 800558c:	b2f6      	uxtb	r6, r6
 800558e:	4283      	cmp	r3, r0
 8005590:	4637      	mov	r7, r6
 8005592:	dc04      	bgt.n	800559e <__swbuf_r+0x42>
 8005594:	4621      	mov	r1, r4
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f926 	bl	80057e8 <_fflush_r>
 800559c:	bb30      	cbnz	r0, 80055ec <__swbuf_r+0x90>
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	701e      	strb	r6, [r3, #0]
 80055ac:	6963      	ldr	r3, [r4, #20]
 80055ae:	3001      	adds	r0, #1
 80055b0:	4283      	cmp	r3, r0
 80055b2:	d004      	beq.n	80055be <__swbuf_r+0x62>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	07db      	lsls	r3, r3, #31
 80055b8:	d506      	bpl.n	80055c8 <__swbuf_r+0x6c>
 80055ba:	2e0a      	cmp	r6, #10
 80055bc:	d104      	bne.n	80055c8 <__swbuf_r+0x6c>
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f911 	bl	80057e8 <_fflush_r>
 80055c6:	b988      	cbnz	r0, 80055ec <__swbuf_r+0x90>
 80055c8:	4638      	mov	r0, r7
 80055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <__swbuf_r+0x9c>)
 80055ce:	429c      	cmp	r4, r3
 80055d0:	d101      	bne.n	80055d6 <__swbuf_r+0x7a>
 80055d2:	68ac      	ldr	r4, [r5, #8]
 80055d4:	e7cf      	b.n	8005576 <__swbuf_r+0x1a>
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <__swbuf_r+0xa0>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	bf08      	it	eq
 80055dc:	68ec      	ldreq	r4, [r5, #12]
 80055de:	e7ca      	b.n	8005576 <__swbuf_r+0x1a>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f80c 	bl	8005600 <__swsetup_r>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0cb      	beq.n	8005584 <__swbuf_r+0x28>
 80055ec:	f04f 37ff 	mov.w	r7, #4294967295
 80055f0:	e7ea      	b.n	80055c8 <__swbuf_r+0x6c>
 80055f2:	bf00      	nop
 80055f4:	08008bec 	.word	0x08008bec
 80055f8:	08008c0c 	.word	0x08008c0c
 80055fc:	08008bcc 	.word	0x08008bcc

08005600 <__swsetup_r>:
 8005600:	4b32      	ldr	r3, [pc, #200]	; (80056cc <__swsetup_r+0xcc>)
 8005602:	b570      	push	{r4, r5, r6, lr}
 8005604:	681d      	ldr	r5, [r3, #0]
 8005606:	4606      	mov	r6, r0
 8005608:	460c      	mov	r4, r1
 800560a:	b125      	cbz	r5, 8005616 <__swsetup_r+0x16>
 800560c:	69ab      	ldr	r3, [r5, #24]
 800560e:	b913      	cbnz	r3, 8005616 <__swsetup_r+0x16>
 8005610:	4628      	mov	r0, r5
 8005612:	f000 f97d 	bl	8005910 <__sinit>
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <__swsetup_r+0xd0>)
 8005618:	429c      	cmp	r4, r3
 800561a:	d10f      	bne.n	800563c <__swsetup_r+0x3c>
 800561c:	686c      	ldr	r4, [r5, #4]
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005624:	0719      	lsls	r1, r3, #28
 8005626:	d42c      	bmi.n	8005682 <__swsetup_r+0x82>
 8005628:	06dd      	lsls	r5, r3, #27
 800562a:	d411      	bmi.n	8005650 <__swsetup_r+0x50>
 800562c:	2309      	movs	r3, #9
 800562e:	6033      	str	r3, [r6, #0]
 8005630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	e03e      	b.n	80056ba <__swsetup_r+0xba>
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <__swsetup_r+0xd4>)
 800563e:	429c      	cmp	r4, r3
 8005640:	d101      	bne.n	8005646 <__swsetup_r+0x46>
 8005642:	68ac      	ldr	r4, [r5, #8]
 8005644:	e7eb      	b.n	800561e <__swsetup_r+0x1e>
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <__swsetup_r+0xd8>)
 8005648:	429c      	cmp	r4, r3
 800564a:	bf08      	it	eq
 800564c:	68ec      	ldreq	r4, [r5, #12]
 800564e:	e7e6      	b.n	800561e <__swsetup_r+0x1e>
 8005650:	0758      	lsls	r0, r3, #29
 8005652:	d512      	bpl.n	800567a <__swsetup_r+0x7a>
 8005654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005656:	b141      	cbz	r1, 800566a <__swsetup_r+0x6a>
 8005658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800565c:	4299      	cmp	r1, r3
 800565e:	d002      	beq.n	8005666 <__swsetup_r+0x66>
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff fe4b 	bl	80052fc <_free_r>
 8005666:	2300      	movs	r3, #0
 8005668:	6363      	str	r3, [r4, #52]	; 0x34
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	2300      	movs	r3, #0
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f043 0308 	orr.w	r3, r3, #8
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	b94b      	cbnz	r3, 800569a <__swsetup_r+0x9a>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800568c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005690:	d003      	beq.n	800569a <__swsetup_r+0x9a>
 8005692:	4621      	mov	r1, r4
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f9ff 	bl	8005a98 <__smakebuf_r>
 800569a:	89a0      	ldrh	r0, [r4, #12]
 800569c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a0:	f010 0301 	ands.w	r3, r0, #1
 80056a4:	d00a      	beq.n	80056bc <__swsetup_r+0xbc>
 80056a6:	2300      	movs	r3, #0
 80056a8:	60a3      	str	r3, [r4, #8]
 80056aa:	6963      	ldr	r3, [r4, #20]
 80056ac:	425b      	negs	r3, r3
 80056ae:	61a3      	str	r3, [r4, #24]
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	b943      	cbnz	r3, 80056c6 <__swsetup_r+0xc6>
 80056b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b8:	d1ba      	bne.n	8005630 <__swsetup_r+0x30>
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	0781      	lsls	r1, r0, #30
 80056be:	bf58      	it	pl
 80056c0:	6963      	ldrpl	r3, [r4, #20]
 80056c2:	60a3      	str	r3, [r4, #8]
 80056c4:	e7f4      	b.n	80056b0 <__swsetup_r+0xb0>
 80056c6:	2000      	movs	r0, #0
 80056c8:	e7f7      	b.n	80056ba <__swsetup_r+0xba>
 80056ca:	bf00      	nop
 80056cc:	2000003c 	.word	0x2000003c
 80056d0:	08008bec 	.word	0x08008bec
 80056d4:	08008c0c 	.word	0x08008c0c
 80056d8:	08008bcc 	.word	0x08008bcc

080056dc <__sflush_r>:
 80056dc:	898a      	ldrh	r2, [r1, #12]
 80056de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	4605      	mov	r5, r0
 80056e4:	0710      	lsls	r0, r2, #28
 80056e6:	460c      	mov	r4, r1
 80056e8:	d458      	bmi.n	800579c <__sflush_r+0xc0>
 80056ea:	684b      	ldr	r3, [r1, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dc05      	bgt.n	80056fc <__sflush_r+0x20>
 80056f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	dc02      	bgt.n	80056fc <__sflush_r+0x20>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d0f9      	beq.n	80056f6 <__sflush_r+0x1a>
 8005702:	2300      	movs	r3, #0
 8005704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005708:	682f      	ldr	r7, [r5, #0]
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	d032      	beq.n	8005774 <__sflush_r+0x98>
 800570e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	075a      	lsls	r2, r3, #29
 8005714:	d505      	bpl.n	8005722 <__sflush_r+0x46>
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	1ac0      	subs	r0, r0, r3
 800571a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571c:	b10b      	cbz	r3, 8005722 <__sflush_r+0x46>
 800571e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005720:	1ac0      	subs	r0, r0, r3
 8005722:	2300      	movs	r3, #0
 8005724:	4602      	mov	r2, r0
 8005726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005728:	6a21      	ldr	r1, [r4, #32]
 800572a:	4628      	mov	r0, r5
 800572c:	47b0      	blx	r6
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	d106      	bne.n	8005742 <__sflush_r+0x66>
 8005734:	6829      	ldr	r1, [r5, #0]
 8005736:	291d      	cmp	r1, #29
 8005738:	d82c      	bhi.n	8005794 <__sflush_r+0xb8>
 800573a:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <__sflush_r+0x108>)
 800573c:	40ca      	lsrs	r2, r1
 800573e:	07d6      	lsls	r6, r2, #31
 8005740:	d528      	bpl.n	8005794 <__sflush_r+0xb8>
 8005742:	2200      	movs	r2, #0
 8005744:	6062      	str	r2, [r4, #4]
 8005746:	04d9      	lsls	r1, r3, #19
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	d504      	bpl.n	8005758 <__sflush_r+0x7c>
 800574e:	1c42      	adds	r2, r0, #1
 8005750:	d101      	bne.n	8005756 <__sflush_r+0x7a>
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	b903      	cbnz	r3, 8005758 <__sflush_r+0x7c>
 8005756:	6560      	str	r0, [r4, #84]	; 0x54
 8005758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575a:	602f      	str	r7, [r5, #0]
 800575c:	2900      	cmp	r1, #0
 800575e:	d0ca      	beq.n	80056f6 <__sflush_r+0x1a>
 8005760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005764:	4299      	cmp	r1, r3
 8005766:	d002      	beq.n	800576e <__sflush_r+0x92>
 8005768:	4628      	mov	r0, r5
 800576a:	f7ff fdc7 	bl	80052fc <_free_r>
 800576e:	2000      	movs	r0, #0
 8005770:	6360      	str	r0, [r4, #52]	; 0x34
 8005772:	e7c1      	b.n	80056f8 <__sflush_r+0x1c>
 8005774:	6a21      	ldr	r1, [r4, #32]
 8005776:	2301      	movs	r3, #1
 8005778:	4628      	mov	r0, r5
 800577a:	47b0      	blx	r6
 800577c:	1c41      	adds	r1, r0, #1
 800577e:	d1c7      	bne.n	8005710 <__sflush_r+0x34>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0c4      	beq.n	8005710 <__sflush_r+0x34>
 8005786:	2b1d      	cmp	r3, #29
 8005788:	d001      	beq.n	800578e <__sflush_r+0xb2>
 800578a:	2b16      	cmp	r3, #22
 800578c:	d101      	bne.n	8005792 <__sflush_r+0xb6>
 800578e:	602f      	str	r7, [r5, #0]
 8005790:	e7b1      	b.n	80056f6 <__sflush_r+0x1a>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7ad      	b.n	80056f8 <__sflush_r+0x1c>
 800579c:	690f      	ldr	r7, [r1, #16]
 800579e:	2f00      	cmp	r7, #0
 80057a0:	d0a9      	beq.n	80056f6 <__sflush_r+0x1a>
 80057a2:	0793      	lsls	r3, r2, #30
 80057a4:	680e      	ldr	r6, [r1, #0]
 80057a6:	bf08      	it	eq
 80057a8:	694b      	ldreq	r3, [r1, #20]
 80057aa:	600f      	str	r7, [r1, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2300      	movne	r3, #0
 80057b0:	eba6 0807 	sub.w	r8, r6, r7
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	dd9c      	ble.n	80056f6 <__sflush_r+0x1a>
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057c0:	4643      	mov	r3, r8
 80057c2:	463a      	mov	r2, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dc06      	bgt.n	80057da <__sflush_r+0xfe>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e78e      	b.n	80056f8 <__sflush_r+0x1c>
 80057da:	4407      	add	r7, r0
 80057dc:	eba8 0800 	sub.w	r8, r8, r0
 80057e0:	e7e9      	b.n	80057b6 <__sflush_r+0xda>
 80057e2:	bf00      	nop
 80057e4:	20400001 	.word	0x20400001

080057e8 <_fflush_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	4605      	mov	r5, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	b913      	cbnz	r3, 80057f8 <_fflush_r+0x10>
 80057f2:	2500      	movs	r5, #0
 80057f4:	4628      	mov	r0, r5
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	b118      	cbz	r0, 8005802 <_fflush_r+0x1a>
 80057fa:	6983      	ldr	r3, [r0, #24]
 80057fc:	b90b      	cbnz	r3, 8005802 <_fflush_r+0x1a>
 80057fe:	f000 f887 	bl	8005910 <__sinit>
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <_fflush_r+0x6c>)
 8005804:	429c      	cmp	r4, r3
 8005806:	d11b      	bne.n	8005840 <_fflush_r+0x58>
 8005808:	686c      	ldr	r4, [r5, #4]
 800580a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0ef      	beq.n	80057f2 <_fflush_r+0xa>
 8005812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005814:	07d0      	lsls	r0, r2, #31
 8005816:	d404      	bmi.n	8005822 <_fflush_r+0x3a>
 8005818:	0599      	lsls	r1, r3, #22
 800581a:	d402      	bmi.n	8005822 <_fflush_r+0x3a>
 800581c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581e:	f000 f915 	bl	8005a4c <__retarget_lock_acquire_recursive>
 8005822:	4628      	mov	r0, r5
 8005824:	4621      	mov	r1, r4
 8005826:	f7ff ff59 	bl	80056dc <__sflush_r>
 800582a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800582c:	07da      	lsls	r2, r3, #31
 800582e:	4605      	mov	r5, r0
 8005830:	d4e0      	bmi.n	80057f4 <_fflush_r+0xc>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d4dd      	bmi.n	80057f4 <_fflush_r+0xc>
 8005838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800583a:	f000 f908 	bl	8005a4e <__retarget_lock_release_recursive>
 800583e:	e7d9      	b.n	80057f4 <_fflush_r+0xc>
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <_fflush_r+0x70>)
 8005842:	429c      	cmp	r4, r3
 8005844:	d101      	bne.n	800584a <_fflush_r+0x62>
 8005846:	68ac      	ldr	r4, [r5, #8]
 8005848:	e7df      	b.n	800580a <_fflush_r+0x22>
 800584a:	4b04      	ldr	r3, [pc, #16]	; (800585c <_fflush_r+0x74>)
 800584c:	429c      	cmp	r4, r3
 800584e:	bf08      	it	eq
 8005850:	68ec      	ldreq	r4, [r5, #12]
 8005852:	e7da      	b.n	800580a <_fflush_r+0x22>
 8005854:	08008bec 	.word	0x08008bec
 8005858:	08008c0c 	.word	0x08008c0c
 800585c:	08008bcc 	.word	0x08008bcc

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	e9c0 3300 	strd	r3, r3, [r0]
 800586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586e:	6083      	str	r3, [r0, #8]
 8005870:	8181      	strh	r1, [r0, #12]
 8005872:	6643      	str	r3, [r0, #100]	; 0x64
 8005874:	81c2      	strh	r2, [r0, #14]
 8005876:	6183      	str	r3, [r0, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	; 0x5c
 800587e:	f7ff fd35 	bl	80052ec <memset>
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x38>)
 8005884:	6263      	str	r3, [r4, #36]	; 0x24
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x3c>)
 8005888:	62a3      	str	r3, [r4, #40]	; 0x28
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x40>)
 800588c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x44>)
 8005890:	6224      	str	r4, [r4, #32]
 8005892:	6323      	str	r3, [r4, #48]	; 0x30
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	08005b31 	.word	0x08005b31
 800589c:	08005b53 	.word	0x08005b53
 80058a0:	08005b8b 	.word	0x08005b8b
 80058a4:	08005baf 	.word	0x08005baf

080058a8 <_cleanup_r>:
 80058a8:	4901      	ldr	r1, [pc, #4]	; (80058b0 <_cleanup_r+0x8>)
 80058aa:	f000 b8af 	b.w	8005a0c <_fwalk_reent>
 80058ae:	bf00      	nop
 80058b0:	080057e9 	.word	0x080057e9

080058b4 <__sfmoreglue>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	1e4a      	subs	r2, r1, #1
 80058b8:	2568      	movs	r5, #104	; 0x68
 80058ba:	4355      	muls	r5, r2
 80058bc:	460e      	mov	r6, r1
 80058be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058c2:	f7ff fd6b 	bl	800539c <_malloc_r>
 80058c6:	4604      	mov	r4, r0
 80058c8:	b140      	cbz	r0, 80058dc <__sfmoreglue+0x28>
 80058ca:	2100      	movs	r1, #0
 80058cc:	e9c0 1600 	strd	r1, r6, [r0]
 80058d0:	300c      	adds	r0, #12
 80058d2:	60a0      	str	r0, [r4, #8]
 80058d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d8:	f7ff fd08 	bl	80052ec <memset>
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}

080058e0 <__sfp_lock_acquire>:
 80058e0:	4801      	ldr	r0, [pc, #4]	; (80058e8 <__sfp_lock_acquire+0x8>)
 80058e2:	f000 b8b3 	b.w	8005a4c <__retarget_lock_acquire_recursive>
 80058e6:	bf00      	nop
 80058e8:	20000608 	.word	0x20000608

080058ec <__sfp_lock_release>:
 80058ec:	4801      	ldr	r0, [pc, #4]	; (80058f4 <__sfp_lock_release+0x8>)
 80058ee:	f000 b8ae 	b.w	8005a4e <__retarget_lock_release_recursive>
 80058f2:	bf00      	nop
 80058f4:	20000608 	.word	0x20000608

080058f8 <__sinit_lock_acquire>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__sinit_lock_acquire+0x8>)
 80058fa:	f000 b8a7 	b.w	8005a4c <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	20000603 	.word	0x20000603

08005904 <__sinit_lock_release>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sinit_lock_release+0x8>)
 8005906:	f000 b8a2 	b.w	8005a4e <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	20000603 	.word	0x20000603

08005910 <__sinit>:
 8005910:	b510      	push	{r4, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	f7ff fff0 	bl	80058f8 <__sinit_lock_acquire>
 8005918:	69a3      	ldr	r3, [r4, #24]
 800591a:	b11b      	cbz	r3, 8005924 <__sinit+0x14>
 800591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005920:	f7ff bff0 	b.w	8005904 <__sinit_lock_release>
 8005924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005928:	6523      	str	r3, [r4, #80]	; 0x50
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <__sinit+0x68>)
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <__sinit+0x6c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	62a2      	str	r2, [r4, #40]	; 0x28
 8005932:	42a3      	cmp	r3, r4
 8005934:	bf04      	itt	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	61a3      	streq	r3, [r4, #24]
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f820 	bl	8005980 <__sfp>
 8005940:	6060      	str	r0, [r4, #4]
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f81c 	bl	8005980 <__sfp>
 8005948:	60a0      	str	r0, [r4, #8]
 800594a:	4620      	mov	r0, r4
 800594c:	f000 f818 	bl	8005980 <__sfp>
 8005950:	2200      	movs	r2, #0
 8005952:	60e0      	str	r0, [r4, #12]
 8005954:	2104      	movs	r1, #4
 8005956:	6860      	ldr	r0, [r4, #4]
 8005958:	f7ff ff82 	bl	8005860 <std>
 800595c:	68a0      	ldr	r0, [r4, #8]
 800595e:	2201      	movs	r2, #1
 8005960:	2109      	movs	r1, #9
 8005962:	f7ff ff7d 	bl	8005860 <std>
 8005966:	68e0      	ldr	r0, [r4, #12]
 8005968:	2202      	movs	r2, #2
 800596a:	2112      	movs	r1, #18
 800596c:	f7ff ff78 	bl	8005860 <std>
 8005970:	2301      	movs	r3, #1
 8005972:	61a3      	str	r3, [r4, #24]
 8005974:	e7d2      	b.n	800591c <__sinit+0xc>
 8005976:	bf00      	nop
 8005978:	08008bc8 	.word	0x08008bc8
 800597c:	080058a9 	.word	0x080058a9

08005980 <__sfp>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	4607      	mov	r7, r0
 8005984:	f7ff ffac 	bl	80058e0 <__sfp_lock_acquire>
 8005988:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <__sfp+0x84>)
 800598a:	681e      	ldr	r6, [r3, #0]
 800598c:	69b3      	ldr	r3, [r6, #24]
 800598e:	b913      	cbnz	r3, 8005996 <__sfp+0x16>
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff ffbd 	bl	8005910 <__sinit>
 8005996:	3648      	adds	r6, #72	; 0x48
 8005998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800599c:	3b01      	subs	r3, #1
 800599e:	d503      	bpl.n	80059a8 <__sfp+0x28>
 80059a0:	6833      	ldr	r3, [r6, #0]
 80059a2:	b30b      	cbz	r3, 80059e8 <__sfp+0x68>
 80059a4:	6836      	ldr	r6, [r6, #0]
 80059a6:	e7f7      	b.n	8005998 <__sfp+0x18>
 80059a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059ac:	b9d5      	cbnz	r5, 80059e4 <__sfp+0x64>
 80059ae:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <__sfp+0x88>)
 80059b0:	60e3      	str	r3, [r4, #12]
 80059b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b6:	6665      	str	r5, [r4, #100]	; 0x64
 80059b8:	f000 f847 	bl	8005a4a <__retarget_lock_init_recursive>
 80059bc:	f7ff ff96 	bl	80058ec <__sfp_lock_release>
 80059c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059c8:	6025      	str	r5, [r4, #0]
 80059ca:	61a5      	str	r5, [r4, #24]
 80059cc:	2208      	movs	r2, #8
 80059ce:	4629      	mov	r1, r5
 80059d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d4:	f7ff fc8a 	bl	80052ec <memset>
 80059d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059e0:	4620      	mov	r0, r4
 80059e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e4:	3468      	adds	r4, #104	; 0x68
 80059e6:	e7d9      	b.n	800599c <__sfp+0x1c>
 80059e8:	2104      	movs	r1, #4
 80059ea:	4638      	mov	r0, r7
 80059ec:	f7ff ff62 	bl	80058b4 <__sfmoreglue>
 80059f0:	4604      	mov	r4, r0
 80059f2:	6030      	str	r0, [r6, #0]
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d1d5      	bne.n	80059a4 <__sfp+0x24>
 80059f8:	f7ff ff78 	bl	80058ec <__sfp_lock_release>
 80059fc:	230c      	movs	r3, #12
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	e7ee      	b.n	80059e0 <__sfp+0x60>
 8005a02:	bf00      	nop
 8005a04:	08008bc8 	.word	0x08008bc8
 8005a08:	ffff0001 	.word	0xffff0001

08005a0c <_fwalk_reent>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	4606      	mov	r6, r0
 8005a12:	4688      	mov	r8, r1
 8005a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a18:	2700      	movs	r7, #0
 8005a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a22:	d505      	bpl.n	8005a30 <_fwalk_reent+0x24>
 8005a24:	6824      	ldr	r4, [r4, #0]
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	d1f7      	bne.n	8005a1a <_fwalk_reent+0xe>
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a30:	89ab      	ldrh	r3, [r5, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d907      	bls.n	8005a46 <_fwalk_reent+0x3a>
 8005a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	d003      	beq.n	8005a46 <_fwalk_reent+0x3a>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4630      	mov	r0, r6
 8005a42:	47c0      	blx	r8
 8005a44:	4307      	orrs	r7, r0
 8005a46:	3568      	adds	r5, #104	; 0x68
 8005a48:	e7e9      	b.n	8005a1e <_fwalk_reent+0x12>

08005a4a <__retarget_lock_init_recursive>:
 8005a4a:	4770      	bx	lr

08005a4c <__retarget_lock_acquire_recursive>:
 8005a4c:	4770      	bx	lr

08005a4e <__retarget_lock_release_recursive>:
 8005a4e:	4770      	bx	lr

08005a50 <__swhatbuf_r>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	460e      	mov	r6, r1
 8005a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	b096      	sub	sp, #88	; 0x58
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	da07      	bge.n	8005a72 <__swhatbuf_r+0x22>
 8005a62:	2300      	movs	r3, #0
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	89b3      	ldrh	r3, [r6, #12]
 8005a68:	061a      	lsls	r2, r3, #24
 8005a6a:	d410      	bmi.n	8005a8e <__swhatbuf_r+0x3e>
 8005a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a70:	e00e      	b.n	8005a90 <__swhatbuf_r+0x40>
 8005a72:	466a      	mov	r2, sp
 8005a74:	f000 f8c2 	bl	8005bfc <_fstat_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	dbf2      	blt.n	8005a62 <__swhatbuf_r+0x12>
 8005a7c:	9a01      	ldr	r2, [sp, #4]
 8005a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a86:	425a      	negs	r2, r3
 8005a88:	415a      	adcs	r2, r3
 8005a8a:	602a      	str	r2, [r5, #0]
 8005a8c:	e7ee      	b.n	8005a6c <__swhatbuf_r+0x1c>
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	2000      	movs	r0, #0
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	b016      	add	sp, #88	; 0x58
 8005a96:	bd70      	pop	{r4, r5, r6, pc}

08005a98 <__smakebuf_r>:
 8005a98:	898b      	ldrh	r3, [r1, #12]
 8005a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a9c:	079d      	lsls	r5, r3, #30
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	d507      	bpl.n	8005ab4 <__smakebuf_r+0x1c>
 8005aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2301      	movs	r3, #1
 8005aae:	6163      	str	r3, [r4, #20]
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	ab01      	add	r3, sp, #4
 8005ab6:	466a      	mov	r2, sp
 8005ab8:	f7ff ffca 	bl	8005a50 <__swhatbuf_r>
 8005abc:	9900      	ldr	r1, [sp, #0]
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f7ff fc6b 	bl	800539c <_malloc_r>
 8005ac6:	b948      	cbnz	r0, 8005adc <__smakebuf_r+0x44>
 8005ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005acc:	059a      	lsls	r2, r3, #22
 8005ace:	d4ef      	bmi.n	8005ab0 <__smakebuf_r+0x18>
 8005ad0:	f023 0303 	bic.w	r3, r3, #3
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	e7e3      	b.n	8005aa4 <__smakebuf_r+0xc>
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <__smakebuf_r+0x7c>)
 8005ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	6020      	str	r0, [r4, #0]
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	9b00      	ldr	r3, [sp, #0]
 8005aec:	6163      	str	r3, [r4, #20]
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	6120      	str	r0, [r4, #16]
 8005af2:	b15b      	cbz	r3, 8005b0c <__smakebuf_r+0x74>
 8005af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f891 	bl	8005c20 <_isatty_r>
 8005afe:	b128      	cbz	r0, 8005b0c <__smakebuf_r+0x74>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	89a0      	ldrh	r0, [r4, #12]
 8005b0e:	4305      	orrs	r5, r0
 8005b10:	81a5      	strh	r5, [r4, #12]
 8005b12:	e7cd      	b.n	8005ab0 <__smakebuf_r+0x18>
 8005b14:	080058a9 	.word	0x080058a9

08005b18 <__malloc_lock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	; (8005b20 <__malloc_lock+0x8>)
 8005b1a:	f7ff bf97 	b.w	8005a4c <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	20000604 	.word	0x20000604

08005b24 <__malloc_unlock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__malloc_unlock+0x8>)
 8005b26:	f7ff bf92 	b.w	8005a4e <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	20000604 	.word	0x20000604

08005b30 <__sread>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	f000 f894 	bl	8005c64 <_read_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	bfab      	itete	ge
 8005b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b42:	89a3      	ldrhlt	r3, [r4, #12]
 8005b44:	181b      	addge	r3, r3, r0
 8005b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b4a:	bfac      	ite	ge
 8005b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b4e:	81a3      	strhlt	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__swrite>:
 8005b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	461f      	mov	r7, r3
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	05db      	lsls	r3, r3, #23
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4616      	mov	r6, r2
 8005b62:	d505      	bpl.n	8005b70 <__swrite+0x1e>
 8005b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b68:	2302      	movs	r3, #2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f000 f868 	bl	8005c40 <_lseek_r>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	463b      	mov	r3, r7
 8005b80:	4628      	mov	r0, r5
 8005b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	f000 b817 	b.w	8005bb8 <_write_r>

08005b8a <__sseek>:
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b92:	f000 f855 	bl	8005c40 <_lseek_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	bf15      	itete	ne
 8005b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ba6:	81a3      	strheq	r3, [r4, #12]
 8005ba8:	bf18      	it	ne
 8005baa:	81a3      	strhne	r3, [r4, #12]
 8005bac:	bd10      	pop	{r4, pc}

08005bae <__sclose>:
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 b813 	b.w	8005bdc <_close_r>
	...

08005bb8 <_write_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	; (8005bd8 <_write_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fb f821 	bl	8000c0e <_write>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_write_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_write_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	2000060c 	.word	0x2000060c

08005bdc <_close_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	; (8005bf8 <_close_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fb f82d 	bl	8000c46 <_close>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_close_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_close_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	2000060c 	.word	0x2000060c

08005bfc <_fstat_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	; (8005c1c <_fstat_r+0x20>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	f7fb f828 	bl	8000c5e <_fstat>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	d102      	bne.n	8005c18 <_fstat_r+0x1c>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	b103      	cbz	r3, 8005c18 <_fstat_r+0x1c>
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000060c 	.word	0x2000060c

08005c20 <_isatty_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_isatty_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fb f827 	bl	8000c7e <_isatty>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_isatty_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_isatty_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	2000060c 	.word	0x2000060c

08005c40 <_lseek_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d07      	ldr	r5, [pc, #28]	; (8005c60 <_lseek_r+0x20>)
 8005c44:	4604      	mov	r4, r0
 8005c46:	4608      	mov	r0, r1
 8005c48:	4611      	mov	r1, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fb f820 	bl	8000c94 <_lseek>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_lseek_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_lseek_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	2000060c 	.word	0x2000060c

08005c64 <_read_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d07      	ldr	r5, [pc, #28]	; (8005c84 <_read_r+0x20>)
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fa ffae 	bl	8000bd4 <_read>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_read_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_read_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	2000060c 	.word	0x2000060c

08005c88 <_init>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr

08005c94 <_fini>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	bf00      	nop
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr
