
Module_Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c220  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022838  08022838  0004000c  2**0
                  CONTENTS
  4 .ARM          00000008  08022838  08022838  00032838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022840  08022840  0004000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022840  08022840  00032840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022844  08022844  00032844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08022848  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  2000000c  08022854  0004000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08022854  00040608  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc94  00000000  00000000  0004003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359f  00000000  00000000  0005fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00063270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000649d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b335  00000000  00000000  00065fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7f3  00000000  00000000  00091305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb0a  00000000  00000000  000aeaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ba602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e8  00000000  00000000  001ba658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006600 	.word	0x08006600

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006600 	.word	0x08006600

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 fa1d 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f837 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fa1f 	bl	8000980 <MX_GPIO_Init>
  MX_ETH_Init();
 8000542:	f000 f8a5 	bl	8000690 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000546:	f000 f9bd 	bl	80008c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054a:	f000 f9eb 	bl	8000924 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800054e:	f000 f921 	bl	8000794 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000552:	f000 f95d 	bl	8000810 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000556:	f000 f8dd 	bl	8000714 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  
  uint8_t buffer[2];


  LCD_1IN28_SendCommand(0x28);
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 fe34 	bl	80011c8 <LCD_1IN28_SendCommand>
  buffer[0] = 0xF0;
 8000560:	23f0      	movs	r3, #240	; 0xf0
 8000562:	713b      	strb	r3, [r7, #4]
  buffer[1] = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR_SPI_I2C, buffer, 2, 0xFFFFFF);
 8000568:	1d3a      	adds	r2, r7, #4
 800056a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2302      	movs	r3, #2
 8000572:	2150      	movs	r1, #80	; 0x50
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <main+0x74>)
 8000576:	f002 fa25 	bl	80029c4 <HAL_I2C_Master_Transmit>
  LCD_1in28_test_I2C();
 800057a:	f001 f9f1 	bl	8001960 <LCD_1in28_test_I2C>

  LCD_1IN28_Display(gImage_monaLCD);
 800057e:	480a      	ldr	r0, [pc, #40]	; (80005a8 <main+0x78>)
 8000580:	f001 f95c 	bl	800183c <LCD_1IN28_Display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f001 fa53 	bl	8001a30 <HAL_Delay>
	  LCD_1IN28_SendCommand(0x29);  //MAKE THE SCREEN BLINK
 800058a:	2029      	movs	r0, #41	; 0x29
 800058c:	f000 fe1c 	bl	80011c8 <LCD_1IN28_SendCommand>
	  HAL_Delay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f001 fa4d 	bl	8001a30 <HAL_Delay>

	  LCD_1IN28_SendCommand(0x28);
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f000 fe16 	bl	80011c8 <LCD_1IN28_SendCommand>
	  HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f001 fa47 	bl	8001a30 <HAL_Delay>
	  HAL_Delay(100);
 80005a2:	e7ef      	b.n	8000584 <main+0x54>
 80005a4:	200000b4 	.word	0x200000b4
 80005a8:	08006630 	.word	0x08006630

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 f818 	bl	80065f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d0:	f002 feca 	bl	8003368 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <SystemClock_Config+0xdc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <SystemClock_Config+0xdc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xe0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a25      	ldr	r2, [pc, #148]	; (800068c <SystemClock_Config+0xe0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000610:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000620:	2360      	movs	r3, #96	; 0x60
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fef7 	bl	8003428 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 fa54 	bl	8000aec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f002 fea0 	bl	8003388 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064e:	f000 fa4d 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2103      	movs	r1, #3
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f988 	bl	8003984 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800067a:	f000 fa37 	bl	8000aec <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_ETH_Init+0x78>)
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <MX_ETH_Init+0x7c>)
 8000698:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_ETH_Init+0x78>)
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_ETH_Init+0x78>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_ETH_Init+0x78>)
 80006aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ae:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_ETH_Init+0x78>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_ETH_Init+0x80>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_ETH_Init+0x80>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ETH_Init+0x80>)
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ETH_Init+0x80>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_ETH_Init+0x80>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_ETH_Init+0x80>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_ETH_Init+0x78>)
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <MX_ETH_Init+0x80>)
 80006de:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_ETH_Init+0x78>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_ETH_Init+0x78>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_ETH_Init+0x78>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_ETH_Init+0x78>)
 80006f6:	f001 faa5 	bl	8001c44 <HAL_ETH_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000700:	f000 f9f4 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200005b4 	.word	0x200005b4
 800070c:	40028000 	.word	0x40028000
 8000710:	20000028 	.word	0x20000028

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_I2C1_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_I2C1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x004036FF;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_I2C1_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_I2C1_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_I2C1_Init+0x74>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <MX_I2C1_Init+0x74>)
 8000750:	f002 f8a8 	bl	80028a4 <HAL_I2C_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075a:	f000 f9c7 	bl	8000aec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_I2C1_Init+0x74>)
 8000762:	f002 fc21 	bl	8002fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 f9be 	bl	8000aec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_I2C1_Init+0x74>)
 8000774:	f002 fc63 	bl	800303e <HAL_I2CEx_ConfigDigitalFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f9b5 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000b4 	.word	0x200000b4
 800078c:	40005400 	.word	0x40005400
 8000790:	004036ff 	.word	0x004036ff

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_SPI1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_SPI1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x74>)
 80007c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SPI1_Init+0x74>)
 80007f4:	f003 fef0 	bl	80045d8 <HAL_SPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f975 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000550 	.word	0x20000550
 800080c:	40013000 	.word	0x40013000

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM3_Init+0xac>)
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <MX_TIM3_Init+0xb0>)
 8000838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_TIM3_Init+0xac>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM3_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_TIM3_Init+0xac>)
 8000848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM3_Init+0xac>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM3_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800085a:	4818      	ldr	r0, [pc, #96]	; (80008bc <MX_TIM3_Init+0xac>)
 800085c:	f004 fa5e 	bl	8004d1c <HAL_TIM_PWM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000866:	f000 f941 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <MX_TIM3_Init+0xac>)
 800087a:	f004 feb9 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000884:	f000 f932 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000888:	2360      	movs	r3, #96	; 0x60
 800088a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	2204      	movs	r2, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM3_Init+0xac>)
 80008a0:	f004 fa94 	bl	8004dcc <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008aa:	f000 f91f 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM3_Init+0xac>)
 80008b0:	f000 fae2 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000504 	.word	0x20000504
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_USART3_UART_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000908:	f004 ff00 	bl	800570c <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f8eb 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000030 	.word	0x20000030
 8000920:	40004800 	.word	0x40004800

08000924 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2206      	movs	r2, #6
 8000934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2202      	movs	r2, #2
 800093a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2201      	movs	r2, #1
 800094c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2201      	movs	r2, #1
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	f002 fbb5 	bl	80030d6 <HAL_PCD_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f8bb 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000100 	.word	0x20000100

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4f      	ldr	r2, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x158>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a43      	ldr	r2, [pc, #268]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <MX_GPIO_Init+0x158>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <MX_GPIO_Init+0x158>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x158>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <MX_GPIO_Init+0x158>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <MX_GPIO_Init+0x158>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a2c:	482b      	ldr	r0, [pc, #172]	; (8000adc <MX_GPIO_Init+0x15c>)
 8000a2e:	f001 ff1f 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	482a      	ldr	r0, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0x160>)
 8000a38:	f001 ff1a 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2170      	movs	r1, #112	; 0x70
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <MX_GPIO_Init+0x164>)
 8000a42:	f001 ff15 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0x168>)
 8000a5e:	f001 fd5b 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a62:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4818      	ldr	r0, [pc, #96]	; (8000adc <MX_GPIO_Init+0x15c>)
 8000a7c:	f001 fd4c 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a80:	2340      	movs	r3, #64	; 0x40
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x160>)
 8000a98:	f001 fd3e 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0x160>)
 8000ab0:	f001 fd32 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ab4:	2370      	movs	r3, #112	; 0x70
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x164>)
 8000acc:	f001 fd24 	bl	8002518 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40020800 	.word	0x40020800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x44>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a4e      	ldr	r2, [pc, #312]	; (8000c9c <HAL_ETH_MspInit+0x158>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	f040 8096 	bne.w	8000c94 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b68:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c10:	2332      	movs	r3, #50	; 0x32
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <HAL_ETH_MspInit+0x160>)
 8000c2c:	f001 fc74 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c30:	2386      	movs	r3, #134	; 0x86
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <HAL_ETH_MspInit+0x164>)
 8000c4c:	f001 fc64 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c62:	230b      	movs	r3, #11
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <HAL_ETH_MspInit+0x168>)
 8000c6e:	f001 fc53 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_ETH_MspInit+0x16c>)
 8000c90:	f001 fc42 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3738      	adds	r7, #56	; 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40028000 	.word	0x40028000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40021800 	.word	0x40021800

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0ae      	sub	sp, #184	; 0xb8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2290      	movs	r2, #144	; 0x90
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 fc8b 	bl	80065f0 <memset>
  if(hi2c->Instance==I2C1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HAL_I2C_MspInit+0xb4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d13c      	bne.n	8000d5e <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ce8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f848 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff fef5 	bl	8000aec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d42:	f001 fbe9 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	37b8      	adds	r7, #184	; 0xb8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <HAL_SPI_MspInit+0xb4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d143      	bne.n	8000e1e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000d9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_SPI_MspInit+0xb8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dde:	2320      	movs	r3, #32
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <HAL_SPI_MspInit+0xbc>)
 8000dfa:	f001 fb8d 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_SPI_MspInit+0xc0>)
 8000e1a:	f001 fb7d 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_TIM_PWM_MspInit+0x38>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_TIM_MspPostInit+0x64>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11b      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ece:	f001 fb23 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ae      	sub	sp, #184	; 0xb8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2290      	movs	r2, #144	; 0x90
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 fb71 	bl	80065f0 <memset>
  if(huart->Instance==USART3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d13c      	bne.n	8000f92 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 ff2e 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f32:	f7ff fddb 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f80:	2307      	movs	r3, #7
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_UART_MspInit+0xbc>)
 8000f8e:	f001 fac3 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	37b8      	adds	r7, #184	; 0xb8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020c00 	.word	0x40020c00

08000fa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0ae      	sub	sp, #184	; 0xb8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2290      	movs	r2, #144	; 0x90
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fb11 	bl	80065f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd6:	d159      	bne.n	800108c <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fecd 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff fd7a 	bl	8000aec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001010:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800102a:	230a      	movs	r3, #10
 800102c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001034:	4619      	mov	r1, r3
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <HAL_PCD_MspInit+0xf0>)
 8001038:	f001 fa6e 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800103c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_PCD_MspInit+0xf0>)
 8001058:	f001 fa5e 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_PCD_MspInit+0xec>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8001062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001066:	6353      	str	r3, [r2, #52]	; 0x34
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_PCD_MspInit+0xec>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_PCD_MspInit+0xec>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107e:	6453      	str	r3, [r2, #68]	; 0x44
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_PCD_MspInit+0xec>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	37b8      	adds	r7, #184	; 0xb8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 fc82 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f005 fa31 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff f9f3 	bl	8000530 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001158:	08022848 	.word	0x08022848
  ldr r2, =_sbss
 800115c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001160:	20000608 	.word	0x20000608

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8001172:	1df9      	adds	r1, r7, #7
 8001174:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001178:	2201      	movs	r2, #1
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <DEV_SPI_WRite+0x20>)
 800117c:	f003 fad7 	bl	800472e <HAL_SPI_Transmit>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000550 	.word	0x20000550

0800118c <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LCD_1IN28_Reset+0x38>)
 8001196:	f001 fb6b 	bl	8002870 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f000 fc48 	bl	8001a30 <HAL_Delay>
    LCD_1IN28_RST_0;
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <LCD_1IN28_Reset+0x38>)
 80011a6:	f001 fb63 	bl	8002870 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f000 fc40 	bl	8001a30 <HAL_Delay>
    LCD_1IN28_RST_1;
 80011b0:	2201      	movs	r2, #1
 80011b2:	2120      	movs	r1, #32
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <LCD_1IN28_Reset+0x38>)
 80011b6:	f001 fb5b 	bl	8002870 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f000 fc38 	bl	8001a30 <HAL_Delay>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <LCD_1IN28_SendCommand>:

void LCD_1IN28_SendCommand(UBYTE Reg)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(80);
 80011d2:	2050      	movs	r0, #80	; 0x50
 80011d4:	f000 fc2c 	bl	8001a30 <HAL_Delay>
    uint8_t buffer[2];
    buffer[0] = 0x01;
 80011d8:	2301      	movs	r3, #1
 80011da:	733b      	strb	r3, [r7, #12]
    buffer[1] = Reg;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADDR_SPI_I2C, buffer, 2, 0xFFFFFF);
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2302      	movs	r3, #2
 80011ec:	2150      	movs	r1, #80	; 0x50
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <LCD_1IN28_SendCommand+0x3c>)
 80011f0:	f001 fbe8 	bl	80029c4 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f000 fc1b 	bl	8001a30 <HAL_Delay>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000b4 	.word	0x200000b4

08001208 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    buffer[0] = 0x02;
 8001212:	2302      	movs	r3, #2
 8001214:	733b      	strb	r3, [r7, #12]
    buffer[1] = Data;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADDR_SPI_I2C, buffer, 2, 0xFFFFFF);
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2302      	movs	r3, #2
 8001226:	2150      	movs	r1, #80	; 0x50
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <LCD_1IN28_SendData_8Bit+0x30>)
 800122a:	f001 fbcb 	bl	80029c4 <HAL_I2C_Master_Transmit>

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000b4 	.word	0x200000b4

0800123c <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0x29);
 8001240:	2029      	movs	r0, #41	; 0x29
 8001242:	f7ff ffc1 	bl	80011c8 <LCD_1IN28_SendCommand>
  LCD_1IN28_SendCommand(0xEF);
 8001246:	20ef      	movs	r0, #239	; 0xef
 8001248:	f7ff ffbe 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800124c:	20eb      	movs	r0, #235	; 0xeb
 800124e:	f7ff ffbb 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 8001252:	2014      	movs	r0, #20
 8001254:	f7ff ffd8 	bl	8001208 <LCD_1IN28_SendData_8Bit>

  LCD_1IN28_SendCommand(0xFE);
 8001258:	20fe      	movs	r0, #254	; 0xfe
 800125a:	f7ff ffb5 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF);
 800125e:	20ef      	movs	r0, #239	; 0xef
 8001260:	f7ff ffb2 	bl	80011c8 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);
 8001264:	20eb      	movs	r0, #235	; 0xeb
 8001266:	f7ff ffaf 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 800126a:	2014      	movs	r0, #20
 800126c:	f7ff ffcc 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);
 8001270:	2084      	movs	r0, #132	; 0x84
 8001272:	f7ff ffa9 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40);
 8001276:	2040      	movs	r0, #64	; 0x40
 8001278:	f7ff ffc6 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);
 800127c:	2085      	movs	r0, #133	; 0x85
 800127e:	f7ff ffa3 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001282:	20ff      	movs	r0, #255	; 0xff
 8001284:	f7ff ffc0 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);
 8001288:	2086      	movs	r0, #134	; 0x86
 800128a:	f7ff ff9d 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800128e:	20ff      	movs	r0, #255	; 0xff
 8001290:	f7ff ffba 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);
 8001294:	2087      	movs	r0, #135	; 0x87
 8001296:	f7ff ff97 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800129a:	20ff      	movs	r0, #255	; 0xff
 800129c:	f7ff ffb4 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);
 80012a0:	2088      	movs	r0, #136	; 0x88
 80012a2:	f7ff ff91 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f7ff ffae 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);
 80012ac:	2089      	movs	r0, #137	; 0x89
 80012ae:	f7ff ff8b 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 80012b2:	2021      	movs	r0, #33	; 0x21
 80012b4:	f7ff ffa8 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);
 80012b8:	208a      	movs	r0, #138	; 0x8a
 80012ba:	f7ff ff85 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ffa2 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);
 80012c4:	208b      	movs	r0, #139	; 0x8b
 80012c6:	f7ff ff7f 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80);
 80012ca:	2080      	movs	r0, #128	; 0x80
 80012cc:	f7ff ff9c 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);
 80012d0:	208c      	movs	r0, #140	; 0x8c
 80012d2:	f7ff ff79 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ff96 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);
 80012dc:	208d      	movs	r0, #141	; 0x8d
 80012de:	f7ff ff73 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff90 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);
 80012e8:	208e      	movs	r0, #142	; 0x8e
 80012ea:	f7ff ff6d 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80012ee:	20ff      	movs	r0, #255	; 0xff
 80012f0:	f7ff ff8a 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);
 80012f4:	208f      	movs	r0, #143	; 0x8f
 80012f6:	f7ff ff67 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80012fa:	20ff      	movs	r0, #255	; 0xff
 80012fc:	f7ff ff84 	bl	8001208 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8001300:	20b6      	movs	r0, #182	; 0xb6
 8001302:	f7ff ff61 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ff7e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 800130c:	2020      	movs	r0, #32
 800130e:	f7ff ff7b 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001312:	2036      	movs	r0, #54	; 0x36
 8001314:	f7ff ff58 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001318:	2008      	movs	r0, #8
 800131a:	f7ff ff75 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);
 800131e:	203a      	movs	r0, #58	; 0x3a
 8001320:	f7ff ff52 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); //16 bit/pixel
 8001324:	2005      	movs	r0, #5
 8001326:	f7ff ff6f 	bl	8001208 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);
 800132a:	2090      	movs	r0, #144	; 0x90
 800132c:	f7ff ff4c 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001330:	2008      	movs	r0, #8
 8001332:	f7ff ff69 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001336:	2008      	movs	r0, #8
 8001338:	f7ff ff66 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800133c:	2008      	movs	r0, #8
 800133e:	f7ff ff63 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff ff60 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);
 8001348:	20bd      	movs	r0, #189	; 0xbd
 800134a:	f7ff ff3d 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 800134e:	2006      	movs	r0, #6
 8001350:	f7ff ff5a 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBC);
 8001354:	20bc      	movs	r0, #188	; 0xbc
 8001356:	f7ff ff37 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ff54 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);
 8001360:	20ff      	movs	r0, #255	; 0xff
 8001362:	f7ff ff31 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001366:	2060      	movs	r0, #96	; 0x60
 8001368:	f7ff ff4e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff ff4b 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001372:	2004      	movs	r0, #4
 8001374:	f7ff ff48 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);
 8001378:	20c3      	movs	r0, #195	; 0xc3
 800137a:	f7ff ff25 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800137e:	2013      	movs	r0, #19
 8001380:	f7ff ff42 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);
 8001384:	20c4      	movs	r0, #196	; 0xc4
 8001386:	f7ff ff1f 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800138a:	2013      	movs	r0, #19
 800138c:	f7ff ff3c 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);
 8001390:	20c9      	movs	r0, #201	; 0xc9
 8001392:	f7ff ff19 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001396:	2022      	movs	r0, #34	; 0x22
 8001398:	f7ff ff36 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);
 800139c:	20be      	movs	r0, #190	; 0xbe
 800139e:	f7ff ff13 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11);
 80013a2:	2011      	movs	r0, #17
 80013a4:	f7ff ff30 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);
 80013a8:	20e1      	movs	r0, #225	; 0xe1
 80013aa:	f7ff ff0d 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80013ae:	2010      	movs	r0, #16
 80013b0:	f7ff ff2a 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80013b4:	200e      	movs	r0, #14
 80013b6:	f7ff ff27 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);
 80013ba:	20df      	movs	r0, #223	; 0xdf
 80013bc:	f7ff ff04 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 80013c0:	2021      	movs	r0, #33	; 0x21
 80013c2:	f7ff ff21 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff ff1e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff ff1b 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);
 80013d2:	20f0      	movs	r0, #240	; 0xf0
 80013d4:	f7ff fef8 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 80013d8:	2045      	movs	r0, #69	; 0x45
 80013da:	f7ff ff15 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80013de:	2009      	movs	r0, #9
 80013e0:	f7ff ff12 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80013e4:	2008      	movs	r0, #8
 80013e6:	f7ff ff0f 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80013ea:	2008      	movs	r0, #8
 80013ec:	f7ff ff0c 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80013f0:	2026      	movs	r0, #38	; 0x26
 80013f2:	f7ff ff09 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80013f6:	202a      	movs	r0, #42	; 0x2a
 80013f8:	f7ff ff06 	bl	8001208 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);
 80013fc:	20f1      	movs	r0, #241	; 0xf1
 80013fe:	f7ff fee3 	bl	80011c8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001402:	2043      	movs	r0, #67	; 0x43
 8001404:	f7ff ff00 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001408:	2070      	movs	r0, #112	; 0x70
 800140a:	f7ff fefd 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 800140e:	2072      	movs	r0, #114	; 0x72
 8001410:	f7ff fefa 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001414:	2036      	movs	r0, #54	; 0x36
 8001416:	f7ff fef7 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);
 800141a:	2037      	movs	r0, #55	; 0x37
 800141c:	f7ff fef4 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001420:	206f      	movs	r0, #111	; 0x6f
 8001422:	f7ff fef1 	bl	8001208 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);
 8001426:	20f2      	movs	r0, #242	; 0xf2
 8001428:	f7ff fece 	bl	80011c8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 800142c:	2045      	movs	r0, #69	; 0x45
 800142e:	f7ff feeb 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001432:	2009      	movs	r0, #9
 8001434:	f7ff fee8 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001438:	2008      	movs	r0, #8
 800143a:	f7ff fee5 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 800143e:	2008      	movs	r0, #8
 8001440:	f7ff fee2 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001444:	2026      	movs	r0, #38	; 0x26
 8001446:	f7ff fedf 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 800144a:	202a      	movs	r0, #42	; 0x2a
 800144c:	f7ff fedc 	bl	8001208 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);
 8001450:	20f3      	movs	r0, #243	; 0xf3
 8001452:	f7ff feb9 	bl	80011c8 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001456:	2043      	movs	r0, #67	; 0x43
 8001458:	f7ff fed6 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 800145c:	2070      	movs	r0, #112	; 0x70
 800145e:	f7ff fed3 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001462:	2072      	movs	r0, #114	; 0x72
 8001464:	f7ff fed0 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f7ff fecd 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);
 800146e:	2037      	movs	r0, #55	; 0x37
 8001470:	f7ff feca 	bl	8001208 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001474:	206f      	movs	r0, #111	; 0x6f
 8001476:	f7ff fec7 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);
 800147a:	20ed      	movs	r0, #237	; 0xed
 800147c:	f7ff fea4 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B);
 8001480:	201b      	movs	r0, #27
 8001482:	f7ff fec1 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B);
 8001486:	200b      	movs	r0, #11
 8001488:	f7ff febe 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);
 800148c:	20ae      	movs	r0, #174	; 0xae
 800148e:	f7ff fe9b 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001492:	2077      	movs	r0, #119	; 0x77
 8001494:	f7ff feb8 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xCD);
 8001498:	20cd      	movs	r0, #205	; 0xcd
 800149a:	f7ff fe95 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);
 800149e:	2063      	movs	r0, #99	; 0x63
 80014a0:	f7ff feb2 	bl	8001208 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);
 80014a4:	2070      	movs	r0, #112	; 0x70
 80014a6:	f7ff fe8f 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 80014aa:	2007      	movs	r0, #7
 80014ac:	f7ff feac 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80014b0:	2007      	movs	r0, #7
 80014b2:	f7ff fea9 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80014b6:	2004      	movs	r0, #4
 80014b8:	f7ff fea6 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80014bc:	200e      	movs	r0, #14
 80014be:	f7ff fea3 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f7ff fea0 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80014c8:	2009      	movs	r0, #9
 80014ca:	f7ff fe9d 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80014ce:	2007      	movs	r0, #7
 80014d0:	f7ff fe9a 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80014d4:	2008      	movs	r0, #8
 80014d6:	f7ff fe97 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80014da:	2003      	movs	r0, #3
 80014dc:	f7ff fe94 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);
 80014e0:	20e8      	movs	r0, #232	; 0xe8
 80014e2:	f7ff fe71 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80014e6:	2034      	movs	r0, #52	; 0x34
 80014e8:	f7ff fe8e 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);
 80014ec:	2062      	movs	r0, #98	; 0x62
 80014ee:	f7ff fe6b 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80014f2:	2018      	movs	r0, #24
 80014f4:	f7ff fe88 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80014f8:	200d      	movs	r0, #13
 80014fa:	f7ff fe85 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80014fe:	2071      	movs	r0, #113	; 0x71
 8001500:	f7ff fe82 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001504:	20ed      	movs	r0, #237	; 0xed
 8001506:	f7ff fe7f 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800150a:	2070      	movs	r0, #112	; 0x70
 800150c:	f7ff fe7c 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001510:	2070      	movs	r0, #112	; 0x70
 8001512:	f7ff fe79 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001516:	2018      	movs	r0, #24
 8001518:	f7ff fe76 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 800151c:	200f      	movs	r0, #15
 800151e:	f7ff fe73 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001522:	2071      	movs	r0, #113	; 0x71
 8001524:	f7ff fe70 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001528:	20ef      	movs	r0, #239	; 0xef
 800152a:	f7ff fe6d 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800152e:	2070      	movs	r0, #112	; 0x70
 8001530:	f7ff fe6a 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001534:	2070      	movs	r0, #112	; 0x70
 8001536:	f7ff fe67 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);
 800153a:	2063      	movs	r0, #99	; 0x63
 800153c:	f7ff fe44 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001540:	2018      	movs	r0, #24
 8001542:	f7ff fe61 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001546:	2011      	movs	r0, #17
 8001548:	f7ff fe5e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800154c:	2071      	movs	r0, #113	; 0x71
 800154e:	f7ff fe5b 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001552:	20f1      	movs	r0, #241	; 0xf1
 8001554:	f7ff fe58 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001558:	2070      	movs	r0, #112	; 0x70
 800155a:	f7ff fe55 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800155e:	2070      	movs	r0, #112	; 0x70
 8001560:	f7ff fe52 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001564:	2018      	movs	r0, #24
 8001566:	f7ff fe4f 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 800156a:	2013      	movs	r0, #19
 800156c:	f7ff fe4c 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001570:	2071      	movs	r0, #113	; 0x71
 8001572:	f7ff fe49 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001576:	20f3      	movs	r0, #243	; 0xf3
 8001578:	f7ff fe46 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800157c:	2070      	movs	r0, #112	; 0x70
 800157e:	f7ff fe43 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001582:	2070      	movs	r0, #112	; 0x70
 8001584:	f7ff fe40 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);
 8001588:	2064      	movs	r0, #100	; 0x64
 800158a:	f7ff fe1d 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff fe3a 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001594:	2029      	movs	r0, #41	; 0x29
 8001596:	f7ff fe37 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 800159a:	20f1      	movs	r0, #241	; 0xf1
 800159c:	f7ff fe34 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff fe31 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80015a6:	20f1      	movs	r0, #241	; 0xf1
 80015a8:	f7ff fe2e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fe2b 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80015b2:	2007      	movs	r0, #7
 80015b4:	f7ff fe28 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);
 80015b8:	2066      	movs	r0, #102	; 0x66
 80015ba:	f7ff fe05 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 80015be:	203c      	movs	r0, #60	; 0x3c
 80015c0:	f7ff fe22 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fe1f 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 80015ca:	20cd      	movs	r0, #205	; 0xcd
 80015cc:	f7ff fe1c 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 80015d0:	2067      	movs	r0, #103	; 0x67
 80015d2:	f7ff fe19 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80015d6:	2045      	movs	r0, #69	; 0x45
 80015d8:	f7ff fe16 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80015dc:	2045      	movs	r0, #69	; 0x45
 80015de:	f7ff fe13 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80015e2:	2010      	movs	r0, #16
 80015e4:	f7ff fe10 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fe0d 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fe0a 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fe07 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);
 80015fa:	2067      	movs	r0, #103	; 0x67
 80015fc:	f7ff fde4 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fe01 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001606:	203c      	movs	r0, #60	; 0x3c
 8001608:	f7ff fdfe 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fdfb 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fdf8 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fdf5 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fdf2 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001624:	2054      	movs	r0, #84	; 0x54
 8001626:	f7ff fdef 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800162a:	2010      	movs	r0, #16
 800162c:	f7ff fdec 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8001630:	2032      	movs	r0, #50	; 0x32
 8001632:	f7ff fde9 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001636:	2098      	movs	r0, #152	; 0x98
 8001638:	f7ff fde6 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);
 800163c:	2074      	movs	r0, #116	; 0x74
 800163e:	f7ff fdc3 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001642:	2010      	movs	r0, #16
 8001644:	f7ff fde0 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);
 8001648:	2085      	movs	r0, #133	; 0x85
 800164a:	f7ff fddd 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	f7ff fdda 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fdd7 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fdd4 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8001660:	204e      	movs	r0, #78	; 0x4e
 8001662:	f7ff fdd1 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fdce 	bl	8001208 <LCD_1IN28_SendData_8Bit>

  LCD_1IN28_SendCommand(0x98);
 800166c:	2098      	movs	r0, #152	; 0x98
 800166e:	f7ff fdab 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001672:	203e      	movs	r0, #62	; 0x3e
 8001674:	f7ff fdc8 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001678:	2007      	movs	r0, #7
 800167a:	f7ff fdc5 	bl	8001208 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);
 800167e:	2035      	movs	r0, #53	; 0x35
 8001680:	f7ff fda2 	bl	80011c8 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001684:	2021      	movs	r0, #33	; 0x21
 8001686:	f7ff fd9f 	bl	80011c8 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 800168a:	2011      	movs	r0, #17
 800168c:	f7ff fd9c 	bl	80011c8 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f000 f9cd 	bl	8001a30 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001696:	2029      	movs	r0, #41	; 0x29
 8001698:	f7ff fd96 	bl	80011c8 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 800169c:	2014      	movs	r0, #20
 800169e:	f000 f9c7 	bl	8001a30 <HAL_Delay>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <LCD_1IN28_SetAttributes+0x54>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 80016b8:	2308      	movs	r3, #8
 80016ba:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <LCD_1IN28_SetAttributes+0x54>)
 80016c4:	22f0      	movs	r2, #240	; 0xf0
 80016c6:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LCD_1IN28_SetAttributes+0x54>)
 80016ca:	22f0      	movs	r2, #240	; 0xf0
 80016cc:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 80016ce:	23c8      	movs	r3, #200	; 0xc8
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e007      	b.n	80016e4 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <LCD_1IN28_SetAttributes+0x54>)
 80016d6:	22f0      	movs	r2, #240	; 0xf0
 80016d8:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LCD_1IN28_SetAttributes+0x54>)
 80016dc:	22f0      	movs	r2, #240	; 0xf0
 80016de:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80016e0:	2368      	movs	r3, #104	; 0x68
 80016e2:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80016e4:	2036      	movs	r0, #54	; 0x36
 80016e6:	f7ff fd6f 	bl	80011c8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd8b 	bl	8001208 <LCD_1IN28_SendData_8Bit>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200005fc 	.word	0x200005fc

08001700 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 800170a:	f7ff fd3f 	bl	800118c <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ffc9 	bl	80016a8 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8001716:	f7ff fd91 	bl	800123c <LCD_1IN28_InitReg>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001722:	b590      	push	{r4, r7, lr}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	4604      	mov	r4, r0
 800172a:	4608      	mov	r0, r1
 800172c:	4611      	mov	r1, r2
 800172e:	461a      	mov	r2, r3
 8001730:	4623      	mov	r3, r4
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	4603      	mov	r3, r0
 8001736:	80bb      	strh	r3, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001740:	202a      	movs	r0, #42	; 0x2a
 8001742:	f7ff fd41 	bl	80011c8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fd5e 	bl	8001208 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fd59 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fd56 	bl	8001208 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fd51 	bl	8001208 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001766:	202b      	movs	r0, #43	; 0x2b
 8001768:	f7ff fd2e 	bl	80011c8 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fd4b 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fd46 	bl	8001208 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fd43 	bl	8001208 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8001782:	883b      	ldrh	r3, [r7, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fd3e 	bl	8001208 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 800178c:	202c      	movs	r0, #44	; 0x2c
 800178e:	f7ff fd1b 	bl	80011c8 <LCD_1IN28_SendCommand>
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
	...

0800179c <LCD_1IN28_Clear_I2C>:
		}
	 }
}

void LCD_1IN28_Clear_I2C(UWORD Color)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 80017a6:	23ef      	movs	r3, #239	; 0xef
 80017a8:	22ef      	movs	r2, #239	; 0xef
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffb8 	bl	8001722 <LCD_1IN28_SetWindows>

//    uint8_t buffer[3];
    uint8_t buffer[3];
    uint8_t k = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	72fb      	strb	r3, [r7, #11]

    buffer[0] = 0x02;
 80017b6:	2302      	movs	r3, #2
 80017b8:	723b      	strb	r3, [r7, #8]
	DEV_Digital_Write(DEV_DC_PIN, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2140      	movs	r1, #64	; 0x40
 80017be:	481d      	ldr	r0, [pc, #116]	; (8001834 <LCD_1IN28_Clear_I2C+0x98>)
 80017c0:	f001 f856 	bl	8002870 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80017c4:	2300      	movs	r3, #0
 80017c6:	81fb      	strh	r3, [r7, #14]
 80017c8:	e02b      	b.n	8001822 <LCD_1IN28_Clear_I2C+0x86>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80017ca:	2300      	movs	r3, #0
 80017cc:	81bb      	strh	r3, [r7, #12]
 80017ce:	e022      	b.n	8001816 <LCD_1IN28_Clear_I2C+0x7a>
			buffer[2*k +1] = (Color>>8);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	3301      	adds	r3, #1
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f107 0110 	add.w	r1, r7, #16
 80017e2:	440b      	add	r3, r1
 80017e4:	f803 2c08 	strb.w	r2, [r3, #-8]
			buffer[2*(k+1)] = (Color);
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	88fa      	ldrh	r2, [r7, #6]
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f107 0110 	add.w	r1, r7, #16
 80017f6:	440b      	add	r3, r1
 80017f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			HAL_I2C_Master_Transmit(&hi2c1, ADDR_SPI_I2C, buffer, 3, 0xFFFFFF);
 80017fc:	f107 0208 	add.w	r2, r7, #8
 8001800:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2303      	movs	r3, #3
 8001808:	2150      	movs	r1, #80	; 0x50
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <LCD_1IN28_Clear_I2C+0x9c>)
 800180c:	f001 f8da 	bl	80029c4 <HAL_I2C_Master_Transmit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001810:	89bb      	ldrh	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	81bb      	strh	r3, [r7, #12]
 8001816:	89bb      	ldrh	r3, [r7, #12]
 8001818:	2bef      	cmp	r3, #239	; 0xef
 800181a:	d9d9      	bls.n	80017d0 <LCD_1IN28_Clear_I2C+0x34>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	3301      	adds	r3, #1
 8001820:	81fb      	strh	r3, [r7, #14]
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	2bef      	cmp	r3, #239	; 0xef
 8001826:	d9d0      	bls.n	80017ca <LCD_1IN28_Clear_I2C+0x2e>


		}
	 }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40020c00 	.word	0x40020c00
 8001838:	200000b4 	.word	0x200000b4

0800183c <LCD_1IN28_Display>:
function :	Sends the image buffer in RAM to displays
parameter:
******************************************************************************/

void LCD_1IN28_Display(const UBYTE *Image)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	6078      	str	r0, [r7, #4]
    UWORD i,j, temp, temp2;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001844:	23ef      	movs	r3, #239	; 0xef
 8001846:	22ef      	movs	r2, #239	; 0xef
 8001848:	2100      	movs	r1, #0
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff ff69 	bl	8001722 <LCD_1IN28_SetWindows>
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	483f      	ldr	r0, [pc, #252]	; (8001954 <LCD_1IN28_Display+0x118>)
 8001856:	f001 f80b 	bl	8002870 <HAL_GPIO_WritePin>
    uint8_t buffer[3];
    buffer[0] = 0x02;
 800185a:	2302      	movs	r3, #2
 800185c:	733b      	strb	r3, [r7, #12]
    for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800185e:	2300      	movs	r3, #0
 8001860:	82fb      	strh	r3, [r7, #22]
 8001862:	e06f      	b.n	8001944 <LCD_1IN28_Display+0x108>
      for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001864:	2300      	movs	r3, #0
 8001866:	82bb      	strh	r3, [r7, #20]
 8001868:	e066      	b.n	8001938 <LCD_1IN28_Display+0xfc>
    	  temp = (*Image+i*LCD_1IN28_WIDTH+j);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	4619      	mov	r1, r3
 8001874:	0109      	lsls	r1, r1, #4
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	b29b      	uxth	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	8abb      	ldrh	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	827b      	strh	r3, [r7, #18]
    	  temp2 = (Image[i*LCD_1IN28_WIDTH+j]);
 8001886:	8afa      	ldrh	r2, [r7, #22]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	461a      	mov	r2, r3
 8001892:	8abb      	ldrh	r3, [r7, #20]
 8001894:	4413      	add	r3, r2
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	823b      	strh	r3, [r7, #16]


  		  if (Use_Spi){
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <LCD_1IN28_Display+0x11c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01f      	beq.n	80018e8 <LCD_1IN28_Display+0xac>
			  DEV_SPI_WRITE((*(Image + j*LCD_1IN28_WIDTH*2 + i*2+1)));
 80018a8:	8aba      	ldrh	r2, [r7, #20]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	015b      	lsls	r3, r3, #5
 80018b2:	461a      	mov	r2, r3
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	3301      	adds	r3, #1
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc50 	bl	8001168 <DEV_SPI_WRite>
			  DEV_SPI_WRITE(*(Image + j*LCD_1IN28_WIDTH*2 + i*2))
 80018c8:	8aba      	ldrh	r2, [r7, #20]
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	015b      	lsls	r3, r3, #5
 80018d2:	461a      	mov	r2, r3
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fc41 	bl	8001168 <DEV_SPI_WRite>
 80018e6:	e024      	b.n	8001932 <LCD_1IN28_Display+0xf6>
		  }else{
			  buffer[1] = ((*(Image + j*LCD_1IN28_WIDTH*2 + i*2+1)));
 80018e8:	8aba      	ldrh	r2, [r7, #20]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	015b      	lsls	r3, r3, #5
 80018f2:	461a      	mov	r2, r3
 80018f4:	8afb      	ldrh	r3, [r7, #22]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	3301      	adds	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	737b      	strb	r3, [r7, #13]
			  buffer[2] = (*(Image + j*LCD_1IN28_WIDTH*2 + i*2));
 8001904:	8aba      	ldrh	r2, [r7, #20]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	015b      	lsls	r3, r3, #5
 800190e:	461a      	mov	r2, r3
 8001910:	8afb      	ldrh	r3, [r7, #22]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	73bb      	strb	r3, [r7, #14]
			  HAL_I2C_Master_Transmit(&hi2c1, ADDR_SPI_I2C, buffer, 3, 0xFFFFFF);
 800191e:	f107 020c 	add.w	r2, r7, #12
 8001922:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2303      	movs	r3, #3
 800192a:	2150      	movs	r1, #80	; 0x50
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <LCD_1IN28_Display+0x120>)
 800192e:	f001 f849 	bl	80029c4 <HAL_I2C_Master_Transmit>
      for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001932:	8abb      	ldrh	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	82bb      	strh	r3, [r7, #20]
 8001938:	8abb      	ldrh	r3, [r7, #20]
 800193a:	2bef      	cmp	r3, #239	; 0xef
 800193c:	d995      	bls.n	800186a <LCD_1IN28_Display+0x2e>
    for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800193e:	8afb      	ldrh	r3, [r7, #22]
 8001940:	3301      	adds	r3, #1
 8001942:	82fb      	strh	r3, [r7, #22]
 8001944:	8afb      	ldrh	r3, [r7, #22]
 8001946:	2bef      	cmp	r3, #239	; 0xef
 8001948:	d98c      	bls.n	8001864 <LCD_1IN28_Display+0x28>

		  }
      }
    }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020c00 	.word	0x40020c00
 8001958:	2000002e 	.word	0x2000002e
 800195c:	200000b4 	.word	0x200000b4

08001960 <LCD_1in28_test_I2C>:
#include "../image/image.h"
#include "math.h"


void LCD_1in28_test_I2C()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	LCD_1IN28_Init(VERTICAL);
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff fecb 	bl	8001700 <LCD_1IN28_Init>
	LCD_1IN28_Clear_I2C(BLUE);
 800196a:	201f      	movs	r0, #31
 800196c:	f7ff ff16 	bl	800179c <LCD_1IN28_Clear_I2C>

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f92f 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f806 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff f8ba 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f93b 	bl	8001c2a <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 f911 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000604 	.word	0x20000604

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000604 	.word	0x20000604

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	05fa0000 	.word	0x05fa0000

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff47 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff5c 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffb0 	bl	8001b98 <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001c54:	4ba9      	ldr	r3, [pc, #676]	; (8001efc <HAL_ETH_Init+0x2b8>)
 8001c56:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e181      	b.n	8001f6e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe ff60 	bl	8000b44 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_ETH_Init+0x2bc>)
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	4a9d      	ldr	r2, [pc, #628]	; (8001f00 <HAL_ETH_Init+0x2bc>)
 8001c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c90:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <HAL_ETH_Init+0x2bc>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c9c:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_ETH_Init+0x2c0>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a98      	ldr	r2, [pc, #608]	; (8001f04 <HAL_ETH_Init+0x2c0>)
 8001ca2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ca6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ca8:	4b96      	ldr	r3, [pc, #600]	; (8001f04 <HAL_ETH_Init+0x2c0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4994      	ldr	r1, [pc, #592]	; (8001f04 <HAL_ETH_Init+0x2c0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ccc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cce:	f7ff fea3 	bl	8001a18 <HAL_GetTick>
 8001cd2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001cd4:	e011      	b.n	8001cfa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001cd6:	f7ff fe9f 	bl	8001a18 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce4:	d909      	bls.n	8001cfa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e139      	b.n	8001f6e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e4      	bne.n	8001cd6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f023 031c 	bic.w	r3, r3, #28
 8001d1a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d1c:	f002 f800 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8001d20:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_ETH_Init+0x2c4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d908      	bls.n	8001d3c <HAL_ETH_Init+0xf8>
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4a77      	ldr	r2, [pc, #476]	; (8001f0c <HAL_ETH_Init+0x2c8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d804      	bhi.n	8001d3c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e027      	b.n	8001d8c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	4a73      	ldr	r2, [pc, #460]	; (8001f0c <HAL_ETH_Init+0x2c8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d908      	bls.n	8001d56 <HAL_ETH_Init+0x112>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	; (8001efc <HAL_ETH_Init+0x2b8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d204      	bcs.n	8001d56 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f043 030c 	orr.w	r3, r3, #12
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	e01a      	b.n	8001d8c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <HAL_ETH_Init+0x2b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d303      	bcc.n	8001d66 <HAL_ETH_Init+0x122>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_ETH_Init+0x2cc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d911      	bls.n	8001d8a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_ETH_Init+0x2cc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d908      	bls.n	8001d80 <HAL_ETH_Init+0x13c>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4a68      	ldr	r2, [pc, #416]	; (8001f14 <HAL_ETH_Init+0x2d0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d804      	bhi.n	8001d80 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e005      	b.n	8001d8c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e000      	b.n	8001d8c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d8a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d98:	2100      	movs	r1, #0
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f954 	bl	8002048 <HAL_ETH_WritePHYRegister>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f9b1 	bl	8002114 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0d7      	b.n	8001f6e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001dbe:	20ff      	movs	r0, #255	; 0xff
 8001dc0:	f7ff fe36 	bl	8001a30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a5 	beq.w	8001f18 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dce:	f7ff fe23 	bl	8001a18 <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2101      	movs	r1, #1
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8cb 	bl	8001f78 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001de2:	f7ff fe19 	bl	8001a18 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d90f      	bls.n	8001e14 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f98a 	bl	8002114 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ac      	b.n	8001f6e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0da      	beq.n	8001dd4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e22:	2100      	movs	r1, #0
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f90f 	bl	8002048 <HAL_ETH_WritePHYRegister>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f96c 	bl	8002114 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e44:	2301      	movs	r3, #1
 8001e46:	e092      	b.n	8001f6e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fde6 	bl	8001a18 <HAL_GetTick>
 8001e4c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	461a      	mov	r2, r3
 8001e54:	2101      	movs	r1, #1
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f88e 	bl	8001f78 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001e5c:	f7ff fddc 	bl	8001a18 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d90f      	bls.n	8001e8e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e72:	6939      	ldr	r1, [r7, #16]
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f94d 	bl	8002114 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e06f      	b.n	8001f6e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0da      	beq.n	8001e4e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f869 	bl	8001f78 <HAL_ETH_ReadPHYRegister>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001eb0:	6939      	ldr	r1, [r7, #16]
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f92e 	bl	8002114 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e054      	b.n	8001f6e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	e002      	b.n	8001ede <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	e035      	b.n	8001f5c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e030      	b.n	8001f5c <HAL_ETH_Init+0x318>
 8001efa:	bf00      	nop
 8001efc:	03938700 	.word	0x03938700
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	01312cff 	.word	0x01312cff
 8001f0c:	02160ebf 	.word	0x02160ebf
 8001f10:	05f5e0ff 	.word	0x05f5e0ff
 8001f14:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2100      	movs	r1, #0
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f889 	bl	8002048 <HAL_ETH_WritePHYRegister>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e6 	bl	8002114 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e00c      	b.n	8001f6e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001f58:	f7ff fd6a 	bl	8001a30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001f5c:	6939      	ldr	r1, [r7, #16]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8d8 	bl	8002114 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop

08001f78 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	460b      	mov	r3, r1
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b82      	cmp	r3, #130	; 0x82
 8001f98:	d101      	bne.n	8001f9e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e050      	b.n	8002040 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2282      	movs	r2, #130	; 0x82
 8001fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 031c 	and.w	r3, r3, #28
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8a1b      	ldrh	r3, [r3, #16]
 8001fba:	02db      	lsls	r3, r3, #11
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001fc4:	897b      	ldrh	r3, [r7, #10]
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f023 0302 	bic.w	r3, r3, #2
 8001fd8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fea:	f7ff fd15 	bl	8001a18 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ff0:	e015      	b.n	800201e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001ff2:	f7ff fd11 	bl	8001a18 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d309      	bcc.n	8002016 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e014      	b.n	8002040 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e4      	bne.n	8001ff2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	460b      	mov	r3, r1
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b42      	cmp	r3, #66	; 0x42
 8002068:	d101      	bne.n	800206e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e04e      	b.n	800210c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2242      	movs	r2, #66	; 0x42
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 031c 	and.w	r3, r3, #28
 8002084:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8a1b      	ldrh	r3, [r3, #16]
 800208a:	02db      	lsls	r3, r3, #11
 800208c:	b29b      	uxth	r3, r3
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	019b      	lsls	r3, r3, #6
 8002098:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020c4:	f7ff fca8 	bl	8001a18 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020ca:	e015      	b.n	80020f8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80020cc:	f7ff fca4 	bl	8001a18 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020da:	d309      	bcc.n	80020f0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e00d      	b.n	800210c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e4      	bne.n	80020cc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0b0      	sub	sp, #192	; 0xc0
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002130:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002138:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002142:	2300      	movs	r3, #0
 8002144:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	663b      	str	r3, [r7, #96]	; 0x60
 8002160:	e001      	b.n	8002166 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002170:	2300      	movs	r3, #0
 8002172:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ec:	4bab      	ldr	r3, [pc, #684]	; (800249c <ETH_MACDMAConfig+0x388>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002200:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002206:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800220a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800220c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800220e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002214:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002218:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800221a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800221c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800221e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002220:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002224:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002228:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800222a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fbf1 	bl	8001a30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002256:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002258:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800225c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800225e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002260:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002266:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800226c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800226e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002272:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002278:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800227c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002284:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002286:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fbcc 	bl	8001a30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022c8:	4013      	ands	r3, r2
 80022ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002304:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff fb8d 	bl	8001a30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002320:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002324:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff fb78 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002348:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800234e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002352:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800235c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800236e:	2304      	movs	r3, #4
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800237e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800238e:	2300      	movs	r3, #0
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002392:	2300      	movs	r3, #0
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f241 0318 	movw	r3, #4120	; 0x1018
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <ETH_MACDMAConfig+0x38c>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80023e6:	4413      	add	r3, r2
 80023e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80023f6:	4413      	add	r3, r2
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fb16 	bl	8001a30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	f241 0318 	movw	r3, #4120	; 0x1018
 800240c:	4413      	add	r3, r2
 800240e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002412:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002418:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800241c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002420:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002424:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800242a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800242e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800244c:	2001      	movs	r0, #1
 800244e:	f7ff faef 	bl	8001a30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10d      	bne.n	8002484 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6811      	ldr	r1, [r2, #0]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <ETH_MACDMAConfig+0x390>)
 800247a:	431a      	orrs	r2, r3
 800247c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002480:	440b      	add	r3, r1
 8002482:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	461a      	mov	r2, r3
 800248a:	2100      	movs	r1, #0
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f80b 	bl	80024a8 <ETH_MACAddressConfig>
}
 8002492:	bf00      	nop
 8002494:	37c0      	adds	r7, #192	; 0xc0
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	ff20810f 	.word	0xff20810f
 80024a0:	f8de3f23 	.word	0xf8de3f23
 80024a4:	00010040 	.word	0x00010040

080024a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3305      	adds	r3, #5
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	3204      	adds	r2, #4
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <ETH_MACAddressConfig+0x68>)
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3303      	adds	r3, #3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	061a      	lsls	r2, r3, #24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3302      	adds	r3, #2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3301      	adds	r3, #1
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	4313      	orrs	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <ETH_MACAddressConfig+0x6c>)
 80024fa:	4413      	add	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40028040 	.word	0x40028040
 8002514:	40028044 	.word	0x40028044

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e175      	b.n	8002824 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8164 	bne.w	800281e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x56>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80be 	beq.w	800281e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_GPIO_Init+0x324>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_GPIO_Init+0x324>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_GPIO_Init+0x324>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ba:	4a61      	ldr	r2, [pc, #388]	; (8002840 <HAL_GPIO_Init+0x328>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d037      	beq.n	8002756 <HAL_GPIO_Init+0x23e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_GPIO_Init+0x23a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_GPIO_Init+0x334>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x236>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a55      	ldr	r2, [pc, #340]	; (8002850 <HAL_GPIO_Init+0x338>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x232>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_GPIO_Init+0x33c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x22e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_GPIO_Init+0x340>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x22a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_GPIO_Init+0x344>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x226>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_GPIO_Init+0x348>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x222>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a50      	ldr	r2, [pc, #320]	; (8002864 <HAL_GPIO_Init+0x34c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x21e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_GPIO_Init+0x350>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x21a>
 800272e:	2309      	movs	r3, #9
 8002730:	e012      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002732:	230a      	movs	r3, #10
 8002734:	e010      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002736:	2308      	movs	r3, #8
 8002738:	e00e      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800273a:	2307      	movs	r3, #7
 800273c:	e00c      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800273e:	2306      	movs	r3, #6
 8002740:	e00a      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002742:	2305      	movs	r3, #5
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002746:	2304      	movs	r3, #4
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002756:	2300      	movs	r3, #0
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f002 0203 	and.w	r2, r2, #3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <HAL_GPIO_Init+0x328>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_GPIO_Init+0x354>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_GPIO_Init+0x354>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c4:	4a29      	ldr	r2, [pc, #164]	; (800286c <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ca:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_GPIO_Init+0x354>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_GPIO_Init+0x354>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_GPIO_Init+0x354>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_GPIO_Init+0x354>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	f67f ae86 	bls.w	8002538 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	40020400 	.word	0x40020400
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40021400 	.word	0x40021400
 800285c:	40021800 	.word	0x40021800
 8002860:	40021c00 	.word	0x40021c00
 8002864:	40022000 	.word	0x40022000
 8002868:	40022400 	.word	0x40022400
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f9f2 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002904:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e006      	b.n	800292c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800292a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d104      	bne.n	800293e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_I2C_Init+0x11c>)
 800294a:	430b      	orrs	r3, r1
 800294c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800295c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69d9      	ldr	r1, [r3, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1a      	ldr	r2, [r3, #32]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	02008000 	.word	0x02008000

080029c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	461a      	mov	r2, r3
 80029d0:	460b      	mov	r3, r1
 80029d2:	817b      	strh	r3, [r7, #10]
 80029d4:	4613      	mov	r3, r2
 80029d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 80da 	bne.w	8002b9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2C_Master_Transmit+0x30>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0d3      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029fc:	f7ff f80c 	bl	8001a18 <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f8f0 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0be      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2221      	movs	r2, #33	; 0x21
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2bff      	cmp	r3, #255	; 0xff
 8002a4e:	d90e      	bls.n	8002a6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa6c 	bl	8002f44 <I2C_TransferConfig>
 8002a6c:	e06c      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	8979      	ldrh	r1, [r7, #10]
 8002a80:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa5b 	bl	8002f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a8e:	e05b      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	6a39      	ldr	r1, [r7, #32]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f8ed 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e07b      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d034      	beq.n	8002b48 <HAL_I2C_Master_Transmit+0x184>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d130      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f87f 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e04d      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2bff      	cmp	r3, #255	; 0xff
 8002b08:	d90e      	bls.n	8002b28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa0f 	bl	8002f44 <I2C_TransferConfig>
 8002b26:	e00f      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f9fe 	bl	8002f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d19e      	bne.n	8002a90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	6a39      	ldr	r1, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8cc 	bl	8002cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01a      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	80002000 	.word	0x80002000
 8002ba8:	fe00e800 	.word	0xfe00e800

08002bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d007      	beq.n	8002be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	619a      	str	r2, [r3, #24]
  }
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	e022      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d01e      	beq.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe ff03 	bl	8001a18 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e00f      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d0cd      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c80:	e02c      	b.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f870 	bl	8002d6c <I2C_IsErrorOccurred>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e02a      	b.n	8002cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d01e      	beq.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7fe febb 	bl	8001a18 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d113      	bne.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d1cb      	bne.n	8002c82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d00:	e028      	b.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f830 	bl	8002d6c <I2C_IsErrorOccurred>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e026      	b.n	8002d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fe fe7f 	bl	8001a18 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d113      	bne.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d1cf      	bne.n	8002d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d075      	beq.n	8002e84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002da0:	e056      	b.n	8002e50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d052      	beq.n	8002e50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe fe35 	bl	8001a18 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_IsErrorOccurred+0x54>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d147      	bne.n	8002e50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de2:	d12e      	bne.n	8002e42 <I2C_IsErrorOccurred+0xd6>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d02a      	beq.n	8002e42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d027      	beq.n	8002e42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e02:	f7fe fe09 	bl	8001a18 <HAL_GetTick>
 8002e06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e08:	e01b      	b.n	8002e42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e0a:	f7fe fe05 	bl	8001a18 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b19      	cmp	r3, #25
 8002e16:	d914      	bls.n	8002e42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d1dc      	bne.n	8002e0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d003      	beq.n	8002e66 <I2C_IsErrorOccurred+0xfa>
 8002e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d09d      	beq.n	8002da2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2220      	movs	r2, #32
 8002e74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fe56 	bl	8002bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <I2C_IsErrorOccurred+0x1d4>)
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	4613      	mov	r3, r2
 8002f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f56:	897b      	ldrh	r3, [r7, #10]
 8002f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f5c:	7a7b      	ldrb	r3, [r7, #9]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f64:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <I2C_TransferConfig+0x60>)
 8002f84:	430b      	orrs	r3, r1
 8002f86:	43db      	mvns	r3, r3
 8002f88:	ea02 0103 	and.w	r1, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	03ff63ff 	.word	0x03ff63ff

08002fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d138      	bne.n	8003030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e032      	b.n	8003032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d139      	bne.n	80030c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800305e:	2302      	movs	r3, #2
 8003060:	e033      	b.n	80030ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2224      	movs	r2, #36	; 0x24
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d8:	b08f      	sub	sp, #60	; 0x3c
 80030da:	af0a      	add	r7, sp, #40	; 0x28
 80030dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e116      	b.n	8003316 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd ff50 	bl	8000fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ffa8 	bl	800607c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	687e      	ldr	r6, [r7, #4]
 8003134:	466d      	mov	r5, sp
 8003136:	f106 0410 	add.w	r4, r6, #16
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003146:	e885 0003 	stmia.w	r5, {r0, r1}
 800314a:	1d33      	adds	r3, r6, #4
 800314c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314e:	6838      	ldr	r0, [r7, #0]
 8003150:	f002 ff3c 	bl	8005fcc <USB_CoreInit>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0d7      	b.n	8003316 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f002 ff96 	bl	800609e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e04a      	b.n	800320e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	333d      	adds	r3, #61	; 0x3d
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	333c      	adds	r3, #60	; 0x3c
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	b298      	uxth	r0, r3
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3342      	adds	r3, #66	; 0x42
 80031b4:	4602      	mov	r2, r0
 80031b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	333f      	adds	r3, #63	; 0x3f
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3344      	adds	r3, #68	; 0x44
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3350      	adds	r3, #80	; 0x50
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3af      	bcc.n	8003178 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e044      	b.n	80032a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3301      	adds	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d3b5      	bcc.n	800321e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	687e      	ldr	r6, [r7, #4]
 80032ba:	466d      	mov	r5, sp
 80032bc:	f106 0410 	add.w	r4, r6, #16
 80032c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80032d0:	1d33      	adds	r3, r6, #4
 80032d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d4:	6838      	ldr	r0, [r7, #0]
 80032d6:	f002 ff2f 	bl	8006138 <USB_DevInit>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e014      	b.n	8003316 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f80b 	bl	8003320 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 f8e9 	bl	80064e6 <USB_DevDisconnect>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_PCDEx_ActivateLPM+0x44>)
 8003350:	4313      	orrs	r3, r2
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	10000003 	.word	0x10000003

08003368 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_PWREx_EnableOverDrive+0x98>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_PWREx_EnableOverDrive+0x98>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_PWREx_EnableOverDrive+0x98>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b6:	f7fe fb2f 	bl	8001a18 <HAL_GetTick>
 80033ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033bc:	e009      	b.n	80033d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033be:	f7fe fb2b 	bl	8001a18 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033cc:	d901      	bls.n	80033d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e022      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d1ee      	bne.n	80033be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ec:	f7fe fb14 	bl	8001a18 <HAL_GetTick>
 80033f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f2:	e009      	b.n	8003408 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f4:	f7fe fb10 	bl	8001a18 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003402:	d901      	bls.n	8003408 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e007      	b.n	8003418 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003414:	d1ee      	bne.n	80033f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e29b      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8087 	beq.w	800355a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800344c:	4b96      	ldr	r3, [pc, #600]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b04      	cmp	r3, #4
 8003456:	d00c      	beq.n	8003472 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003458:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d112      	bne.n	800348a <HAL_RCC_OscConfig+0x62>
 8003464:	4b90      	ldr	r3, [pc, #576]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003470:	d10b      	bne.n	800348a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06c      	beq.n	8003558 <HAL_RCC_OscConfig+0x130>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d168      	bne.n	8003558 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e275      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x7a>
 8003494:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a83      	ldr	r2, [pc, #524]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e02e      	b.n	8003500 <HAL_RCC_OscConfig+0xd8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x9c>
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7e      	ldr	r2, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7b      	ldr	r2, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xd8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 80034ce:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b73      	ldr	r3, [pc, #460]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a72      	ldr	r2, [pc, #456]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xd8>
 80034e8:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6b      	ldr	r2, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fa86 	bl	8001a18 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe fa82 	bl	8001a18 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e229      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fa72 	bl	8001a18 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fa6e 	bl	8001a18 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e215      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	4b57      	ldr	r3, [pc, #348]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x110>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d069      	beq.n	800363a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003566:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x190>
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1e9      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	493d      	ldr	r1, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e040      	b.n	800363a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d023      	beq.n	8003608 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a38      	ldr	r2, [pc, #224]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa24 	bl	8001a18 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fa20 	bl	8001a18 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1c7      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4929      	ldr	r1, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
 8003606:	e018      	b.n	800363a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fa00 	bl	8001a18 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7fe f9fc 	bl	8001a18 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1a3      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d038      	beq.n	80036b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d019      	beq.n	8003682 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fe f9dd 	bl	8001a18 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003662:	f7fe f9d9 	bl	8001a18 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e180      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x23a>
 8003680:	e01a      	b.n	80036b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_OscConfig+0x280>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe f9c3 	bl	8001a18 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003696:	f7fe f9bf 	bl	8001a18 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d903      	bls.n	80036ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e166      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
 80036a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ee      	bne.n	8003696 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a4 	beq.w	800380e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a88      	ldr	r2, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b86      	ldr	r3, [pc, #536]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ee:	4b83      	ldr	r3, [pc, #524]	; (80038fc <HAL_RCC_OscConfig+0x4d4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d118      	bne.n	800372c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036fa:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_RCC_OscConfig+0x4d4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0x4d4>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fe f987 	bl	8001a18 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370e:	f7fe f983 	bl	8001a18 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b64      	cmp	r3, #100	; 0x64
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e12a      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003720:	4b76      	ldr	r3, [pc, #472]	; (80038fc <HAL_RCC_OscConfig+0x4d4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x31a>
 8003734:	4b70      	ldr	r3, [pc, #448]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a6f      	ldr	r2, [pc, #444]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e02d      	b.n	800379e <HAL_RCC_OscConfig+0x376>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x33c>
 800374a:	4b6b      	ldr	r3, [pc, #428]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a6a      	ldr	r2, [pc, #424]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4a67      	ldr	r2, [pc, #412]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	6713      	str	r3, [r2, #112]	; 0x70
 8003762:	e01c      	b.n	800379e <HAL_RCC_OscConfig+0x376>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b05      	cmp	r3, #5
 800376a:	d10c      	bne.n	8003786 <HAL_RCC_OscConfig+0x35e>
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a61      	ldr	r2, [pc, #388]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	e00b      	b.n	800379e <HAL_RCC_OscConfig+0x376>
 8003786:	4b5c      	ldr	r3, [pc, #368]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a5b      	ldr	r2, [pc, #364]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d015      	beq.n	80037d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fe f937 	bl	8001a18 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fe f933 	bl	8001a18 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0d8      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ee      	beq.n	80037ae <HAL_RCC_OscConfig+0x386>
 80037d0:	e014      	b.n	80037fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe f921 	bl	8001a18 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe f91d 	bl	8001a18 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0c2      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ee      	bne.n	80037da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d105      	bne.n	800380e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80ae 	beq.w	8003974 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003818:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d06d      	beq.n	8003900 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d14b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f8ee 	bl	8001a18 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe f8ea 	bl	8001a18 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e091      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	019b      	lsls	r3, r3, #6
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	491b      	ldr	r1, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f8bc 	bl	8001a18 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe f8b8 	bl	8001a18 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e05f      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x47c>
 80038c2:	e057      	b.n	8003974 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe f8a2 	bl	8001a18 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe f89e 	bl	8001a18 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e045      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_OscConfig+0x4d0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4b0>
 80038f6:	e03d      	b.n	8003974 <HAL_RCC_OscConfig+0x54c>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCC_OscConfig+0x558>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d030      	beq.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d129      	bne.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d122      	bne.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003936:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003938:	4293      	cmp	r3, r2
 800393a:	d119      	bne.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	3b01      	subs	r3, #1
 800394a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d10f      	bne.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0d0      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d910      	bls.n	80039cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 020f 	bic.w	r2, r3, #15
 80039b2:	4965      	ldr	r1, [pc, #404]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494d      	ldr	r1, [pc, #308]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d040      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e073      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06b      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4936      	ldr	r1, [pc, #216]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd ffce 	bl	8001a18 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd ffca 	bl	8001a18 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e053      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d210      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 020f 	bic.w	r2, r3, #15
 8003abe:	4922      	ldr	r1, [pc, #136]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4916      	ldr	r1, [pc, #88]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f821 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490a      	ldr	r1, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x1cc>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1d0>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd ff2a 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006618 	.word	0x08006618
 8003b54:	20000000 	.word	0x20000000
 8003b58:	20000004 	.word	0x20000004

08003b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b74:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x40>
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	f200 80bd 	bhi.w	8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8e:	e0b7      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b92:	60bb      	str	r3, [r7, #8]
      break;
 8003b94:	e0b7      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b96:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b98:	60bb      	str	r3, [r7, #8]
      break;
 8003b9a:	e0b4      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9c:	4b5d      	ldr	r3, [pc, #372]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ba6:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04d      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	ea02 0800 	and.w	r8, r2, r0
 8003bca:	ea03 0901 	and.w	r9, r3, r1
 8003bce:	4640      	mov	r0, r8
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	014b      	lsls	r3, r1, #5
 8003bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003be0:	0142      	lsls	r2, r0, #5
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	ebb0 0008 	subs.w	r0, r0, r8
 8003bea:	eb61 0109 	sbc.w	r1, r1, r9
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	018b      	lsls	r3, r1, #6
 8003bf8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bfc:	0182      	lsls	r2, r0, #6
 8003bfe:	1a12      	subs	r2, r2, r0
 8003c00:	eb63 0301 	sbc.w	r3, r3, r1
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	00d9      	lsls	r1, r3, #3
 8003c0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c12:	00d0      	lsls	r0, r2, #3
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	eb12 0208 	adds.w	r2, r2, r8
 8003c1c:	eb43 0309 	adc.w	r3, r3, r9
 8003c20:	f04f 0000 	mov.w	r0, #0
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	0259      	lsls	r1, r3, #9
 8003c2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c2e:	0250      	lsls	r0, r2, #9
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	f7fc fafa 	bl	8000238 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e04a      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	461a      	mov	r2, r3
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	ea02 0400 	and.w	r4, r2, r0
 8003c66:	ea03 0501 	and.w	r5, r3, r1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	014b      	lsls	r3, r1, #5
 8003c78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c7c:	0142      	lsls	r2, r0, #5
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	1b00      	subs	r0, r0, r4
 8003c84:	eb61 0105 	sbc.w	r1, r1, r5
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	018b      	lsls	r3, r1, #6
 8003c92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c96:	0182      	lsls	r2, r0, #6
 8003c98:	1a12      	subs	r2, r2, r0
 8003c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	00d9      	lsls	r1, r3, #3
 8003ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cac:	00d0      	lsls	r0, r2, #3
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	1912      	adds	r2, r2, r4
 8003cb4:	eb45 0303 	adc.w	r3, r5, r3
 8003cb8:	f04f 0000 	mov.w	r0, #0
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	0299      	lsls	r1, r3, #10
 8003cc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cc6:	0290      	lsls	r0, r2, #10
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f7fc faae 	bl	8000238 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	60bb      	str	r3, [r7, #8]
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d02:	60bb      	str	r3, [r7, #8]
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	68bb      	ldr	r3, [r7, #8]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08006628 	.word	0x08006628

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08006628 	.word	0x08006628

08003d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a68      	ldr	r2, [pc, #416]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	4964      	ldr	r1, [pc, #400]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de2:	4b5d      	ldr	r3, [pc, #372]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	4959      	ldr	r1, [pc, #356]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	494a      	ldr	r1, [pc, #296]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 808b 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
 8003e78:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a34      	ldr	r2, [pc, #208]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fdc2 	bl	8001a18 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fdbe 	bl	8001a18 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e38f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eb6:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d035      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d02e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d114      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fd86 	bl	8001a18 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fd82 	bl	8001a18 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e351      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	4901      	ldr	r1, [pc, #4]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	0ffffcff 	.word	0x0ffffcff
 8003f64:	4bb3      	ldr	r3, [pc, #716]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4ab2      	ldr	r2, [pc, #712]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	4bb0      	ldr	r3, [pc, #704]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	49ad      	ldr	r1, [pc, #692]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f8e:	4ba9      	ldr	r3, [pc, #676]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f94:	4aa7      	ldr	r2, [pc, #668]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f9e:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	49a2      	ldr	r1, [pc, #648]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbc:	4b9d      	ldr	r3, [pc, #628]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fca:	499a      	ldr	r1, [pc, #616]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fde:	4b95      	ldr	r3, [pc, #596]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fec:	4991      	ldr	r1, [pc, #580]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004000:	4b8c      	ldr	r3, [pc, #560]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	4989      	ldr	r1, [pc, #548]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004022:	4b84      	ldr	r3, [pc, #528]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4980      	ldr	r1, [pc, #512]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004044:	4b7b      	ldr	r3, [pc, #492]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	4978      	ldr	r1, [pc, #480]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004066:	4b73      	ldr	r3, [pc, #460]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f023 020c 	bic.w	r2, r3, #12
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	496f      	ldr	r1, [pc, #444]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	4967      	ldr	r1, [pc, #412]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040aa:	4b62      	ldr	r3, [pc, #392]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	495e      	ldr	r1, [pc, #376]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	4956      	ldr	r1, [pc, #344]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ee:	4b51      	ldr	r3, [pc, #324]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004110:	4b48      	ldr	r3, [pc, #288]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	4945      	ldr	r1, [pc, #276]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	493c      	ldr	r1, [pc, #240]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004154:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	4934      	ldr	r1, [pc, #208]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004184:	492b      	ldr	r1, [pc, #172]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	491b      	ldr	r1, [pc, #108]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e8:	4912      	ldr	r1, [pc, #72]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	4909      	ldr	r1, [pc, #36]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	4986      	ldr	r1, [pc, #536]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800424c:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	497d      	ldr	r1, [pc, #500]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d006      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80d6 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004278:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a75      	ldr	r2, [pc, #468]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fd fbc8 	bl	8001a18 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800428c:	f7fd fbc4 	bl	8001a18 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e195      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d021      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042be:	4b65      	ldr	r3, [pc, #404]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042cc:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	019a      	lsls	r2, r3, #6
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	4958      	ldr	r1, [pc, #352]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004324:	d129      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004326:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004334:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	019a      	lsls	r2, r3, #6
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	493e      	ldr	r1, [pc, #248]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004362:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004368:	f023 021f 	bic.w	r2, r3, #31
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	3b01      	subs	r3, #1
 8004372:	4938      	ldr	r1, [pc, #224]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01d      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004394:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439a:	0f1b      	lsrs	r3, r3, #28
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4926      	ldr	r1, [pc, #152]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	019a      	lsls	r2, r3, #6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	491a      	ldr	r1, [pc, #104]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fd fb0b 	bl	8001a18 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fd fb07 	bl	8001a18 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	; 0x64
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0d8      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 80ce 	bne.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd faee 	bl	8001a18 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800443e:	e00b      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004440:	f7fd faea 	bl	8001a18 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d904      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0bb      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004458:	4b5e      	ldr	r3, [pc, #376]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004464:	d0ec      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d12a      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800449c:	4b4d      	ldr	r3, [pc, #308]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	4944      	ldr	r1, [pc, #272]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044ca:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	493d      	ldr	r1, [pc, #244]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f8:	d11d      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	0e1b      	lsrs	r3, r3, #24
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004508:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	0f1b      	lsrs	r3, r3, #28
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	019a      	lsls	r2, r3, #6
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	4929      	ldr	r1, [pc, #164]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	0e1b      	lsrs	r3, r3, #24
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	019a      	lsls	r2, r3, #6
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	4917      	ldr	r1, [pc, #92]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4911      	ldr	r1, [pc, #68]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fd fa3a 	bl	8001a18 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a8:	f7fd fa36 	bl	8001a18 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e007      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c6:	d1ef      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e09d      	b.n	8004726 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fba2 	bl	8000d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004650:	d902      	bls.n	8004658 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e002      	b.n	800465e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004666:	d007      	beq.n	8004678 <HAL_SPI_Init+0xa0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	ea42 0103 	orr.w	r1, r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	f003 0204 	and.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004714:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_SPI_Transmit+0x22>
 800474c:	2302      	movs	r3, #2
 800474e:	e158      	b.n	8004a02 <HAL_SPI_Transmit+0x2d4>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004758:	f7fd f95e 	bl	8001a18 <HAL_GetTick>
 800475c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800476e:	2302      	movs	r3, #2
 8004770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004772:	e13d      	b.n	80049f0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0x52>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004784:	e134      	b.n	80049f0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2203      	movs	r2, #3
 800478a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d10f      	bne.n	80047f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d007      	beq.n	8004810 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004818:	d94b      	bls.n	80048b2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_SPI_Transmit+0xfa>
 8004822:	8afb      	ldrh	r3, [r7, #22]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d13e      	bne.n	80048a6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	881a      	ldrh	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	1c9a      	adds	r2, r3, #2
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800484c:	e02b      	b.n	80048a6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d112      	bne.n	8004882 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004880:	e011      	b.n	80048a6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004882:	f7fd f8c9 	bl	8001a18 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d803      	bhi.n	800489a <HAL_SPI_Transmit+0x16c>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_Transmit+0x172>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048a4:	e0a4      	b.n	80049f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ce      	bne.n	800484e <HAL_SPI_Transmit+0x120>
 80048b0:	e07c      	b.n	80049ac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Transmit+0x192>
 80048ba:	8afb      	ldrh	r3, [r7, #22]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d170      	bne.n	80049a2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d912      	bls.n	80048f0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	1c9a      	adds	r2, r3, #2
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b02      	subs	r3, #2
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ee:	e058      	b.n	80049a2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004916:	e044      	b.n	80049a2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d12b      	bne.n	800497e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d912      	bls.n	8004956 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	881a      	ldrh	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b02      	subs	r3, #2
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004954:	e025      	b.n	80049a2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497c:	e011      	b.n	80049a2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497e:	f7fd f84b 	bl	8001a18 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d803      	bhi.n	8004996 <HAL_SPI_Transmit+0x268>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <HAL_SPI_Transmit+0x26e>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049a0:	e026      	b.n	80049f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1b5      	bne.n	8004918 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f949 	bl	8004c48 <SPI_EndRxTxTransaction>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e000      	b.n	80049f0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80049ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a1c:	f7fc fffc 	bl	8001a18 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a2c:	f7fc fff4 	bl	8001a18 <HAL_GetTick>
 8004a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a32:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	015b      	lsls	r3, r3, #5
 8004a38:	0d1b      	lsrs	r3, r3, #20
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a42:	e054      	b.n	8004aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d050      	beq.n	8004aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a4c:	f7fc ffe4 	bl	8001a18 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d902      	bls.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d13d      	bne.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7a:	d111      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a84:	d004      	beq.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d107      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa8:	d10f      	bne.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e017      	b.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4013      	ands	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d19b      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b2e:	f7fc ff73 	bl	8001a18 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b3e:	f7fc ff6b 	bl	8001a18 <HAL_GetTick>
 8004b42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00da      	lsls	r2, r3, #3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	0d1b      	lsrs	r3, r3, #20
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b64:	e060      	b.n	8004c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b6c:	d107      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d050      	beq.n	8004c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b86:	f7fc ff47 	bl	8001a18 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d902      	bls.n	8004b9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d13d      	bne.n	8004c18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb4:	d111      	bne.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbe:	d004      	beq.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d107      	bne.n	8004bda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d10f      	bne.n	8004c04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e010      	b.n	8004c3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d196      	bne.n	8004b66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3728      	adds	r7, #40	; 0x28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000

08004c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff ff5b 	bl	8004b1c <SPI_WaitFifoStateUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e046      	b.n	8004d0a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <SPI_EndRxTxTransaction+0xcc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <SPI_EndRxTxTransaction+0xd0>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	0d5b      	lsrs	r3, r3, #21
 8004c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9a:	d112      	bne.n	8004cc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff feb0 	bl	8004a0c <SPI_WaitFlagStateUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e023      	b.n	8004d0a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d0f2      	beq.n	8004cc2 <SPI_EndRxTxTransaction+0x7a>
 8004cdc:	e000      	b.n	8004ce0 <SPI_EndRxTxTransaction+0x98>
        break;
 8004cde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff ff15 	bl	8004b1c <SPI_WaitFifoStateUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e000      	b.n	8004d0a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000000 	.word	0x20000000
 8004d18:	165e9f81 	.word	0x165e9f81

08004d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc f878 	bl	8000e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 f94a 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0ff      	b.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b14      	cmp	r3, #20
 8004df6:	f200 80f0 	bhi.w	8004fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004fdb 	.word	0x08004fdb
 8004e08:	08004fdb 	.word	0x08004fdb
 8004e0c:	08004fdb 	.word	0x08004fdb
 8004e10:	08004e95 	.word	0x08004e95
 8004e14:	08004fdb 	.word	0x08004fdb
 8004e18:	08004fdb 	.word	0x08004fdb
 8004e1c:	08004fdb 	.word	0x08004fdb
 8004e20:	08004ed7 	.word	0x08004ed7
 8004e24:	08004fdb 	.word	0x08004fdb
 8004e28:	08004fdb 	.word	0x08004fdb
 8004e2c:	08004fdb 	.word	0x08004fdb
 8004e30:	08004f17 	.word	0x08004f17
 8004e34:	08004fdb 	.word	0x08004fdb
 8004e38:	08004fdb 	.word	0x08004fdb
 8004e3c:	08004fdb 	.word	0x08004fdb
 8004e40:	08004f59 	.word	0x08004f59
 8004e44:	08004fdb 	.word	0x08004fdb
 8004e48:	08004fdb 	.word	0x08004fdb
 8004e4c:	08004fdb 	.word	0x08004fdb
 8004e50:	08004f99 	.word	0x08004f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f96a 	bl	8005134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0208 	orr.w	r2, r2, #8
 8004e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	619a      	str	r2, [r3, #24]
      break;
 8004e92:	e0a5      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f9bc 	bl	8005218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6999      	ldr	r1, [r3, #24]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	021a      	lsls	r2, r3, #8
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	619a      	str	r2, [r3, #24]
      break;
 8004ed4:	e084      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fa13 	bl	8005308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0208 	orr.w	r2, r2, #8
 8004ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	61da      	str	r2, [r3, #28]
      break;
 8004f14:	e064      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fa69 	bl	80053f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	61da      	str	r2, [r3, #28]
      break;
 8004f56:	e043      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 faa0 	bl	80054a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f96:	e023      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fad2 	bl	8005548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <TIM_Base_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <TIM_Base_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3b      	ldr	r2, [pc, #236]	; (8005114 <TIM_Base_SetConfig+0x120>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3a      	ldr	r2, [pc, #232]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <TIM_Base_SetConfig+0x114>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d027      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_Base_SetConfig+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d023      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d017      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_Base_SetConfig+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a27      	ldr	r2, [pc, #156]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a26      	ldr	r2, [pc, #152]	; (8005124 <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <TIM_Base_SetConfig+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <TIM_Base_SetConfig+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a23      	ldr	r2, [pc, #140]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <TIM_Base_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	615a      	str	r2, [r3, #20]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800
 8005128:	40001800 	.word	0x40001800
 800512c:	40001c00 	.word	0x40001c00
 8005130:	40002000 	.word	0x40002000

08005134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4b2b      	ldr	r3, [pc, #172]	; (800520c <TIM_OC1_SetConfig+0xd8>)
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 0302 	bic.w	r3, r3, #2
 800517c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <TIM_OC1_SetConfig+0xdc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC1_SetConfig+0x64>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a20      	ldr	r2, [pc, #128]	; (8005214 <TIM_OC1_SetConfig+0xe0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10c      	bne.n	80051b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0308 	bic.w	r3, r3, #8
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC1_SetConfig+0xdc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC1_SetConfig+0x8e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a15      	ldr	r2, [pc, #84]	; (8005214 <TIM_OC1_SetConfig+0xe0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d111      	bne.n	80051e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	fffeff8f 	.word	0xfffeff8f
 8005210:	40010000 	.word	0x40010000
 8005214:	40010400 	.word	0x40010400

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <TIM_OC2_SetConfig+0xe4>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a23      	ldr	r2, [pc, #140]	; (8005300 <TIM_OC2_SetConfig+0xe8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0x68>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a22      	ldr	r2, [pc, #136]	; (8005304 <TIM_OC2_SetConfig+0xec>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <TIM_OC2_SetConfig+0xe8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC2_SetConfig+0x94>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a17      	ldr	r2, [pc, #92]	; (8005304 <TIM_OC2_SetConfig+0xec>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d113      	bne.n	80052d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	feff8fff 	.word	0xfeff8fff
 8005300:	40010000 	.word	0x40010000
 8005304:	40010400 	.word	0x40010400

08005308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <TIM_OC3_SetConfig+0xe0>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <TIM_OC3_SetConfig+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC3_SetConfig+0x66>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <TIM_OC3_SetConfig+0xe8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10d      	bne.n	800538a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a17      	ldr	r2, [pc, #92]	; (80053ec <TIM_OC3_SetConfig+0xe4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC3_SetConfig+0x92>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <TIM_OC3_SetConfig+0xe8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d113      	bne.n	80053c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	fffeff8f 	.word	0xfffeff8f
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <TIM_OC4_SetConfig+0xa4>)
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800543e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	031b      	lsls	r3, r3, #12
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a13      	ldr	r2, [pc, #76]	; (800549c <TIM_OC4_SetConfig+0xa8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC4_SetConfig+0x68>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <TIM_OC4_SetConfig+0xac>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d109      	bne.n	8005470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	019b      	lsls	r3, r3, #6
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	feff8fff 	.word	0xfeff8fff
 800549c:	40010000 	.word	0x40010000
 80054a0:	40010400 	.word	0x40010400

080054a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <TIM_OC5_SetConfig+0x98>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a12      	ldr	r2, [pc, #72]	; (8005540 <TIM_OC5_SetConfig+0x9c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_OC5_SetConfig+0x5e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a11      	ldr	r2, [pc, #68]	; (8005544 <TIM_OC5_SetConfig+0xa0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d109      	bne.n	8005516 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	fffeff8f 	.word	0xfffeff8f
 8005540:	40010000 	.word	0x40010000
 8005544:	40010400 	.word	0x40010400

08005548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <TIM_OC6_SetConfig+0x9c>)
 8005574:	4013      	ands	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800558a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	051b      	lsls	r3, r3, #20
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <TIM_OC6_SetConfig+0xa0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC6_SetConfig+0x60>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <TIM_OC6_SetConfig+0xa4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d109      	bne.n	80055bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	029b      	lsls	r3, r3, #10
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	feff8fff 	.word	0xfeff8fff
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40010400 	.word	0x40010400

080055f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e06d      	b.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a30      	ldr	r2, [pc, #192]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567a:	d01d      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a16      	ldr	r2, [pc, #88]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10c      	bne.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40014000 	.word	0x40014000
 8005708:	40001800 	.word	0x40001800

0800570c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e040      	b.n	80057a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb fbda 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f82c 	bl	80057a8 <UART_SetConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa82 	bl	8005c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb09 	bl	8005db0 <UART_CheckIdleState>
 800579e:	4603      	mov	r3, r0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4ba7      	ldr	r3, [pc, #668]	; (8005a70 <UART_SetConfig+0x2c8>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	430b      	orrs	r3, r1
 80057de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	430a      	orrs	r2, r1
 8005818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a95      	ldr	r2, [pc, #596]	; (8005a74 <UART_SetConfig+0x2cc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d120      	bne.n	8005866 <UART_SetConfig+0xbe>
 8005824:	4b94      	ldr	r3, [pc, #592]	; (8005a78 <UART_SetConfig+0x2d0>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b03      	cmp	r3, #3
 8005830:	d816      	bhi.n	8005860 <UART_SetConfig+0xb8>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x90>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005849 	.word	0x08005849
 800583c:	08005855 	.word	0x08005855
 8005840:	0800584f 	.word	0x0800584f
 8005844:	0800585b 	.word	0x0800585b
 8005848:	2301      	movs	r3, #1
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e14f      	b.n	8005aee <UART_SetConfig+0x346>
 800584e:	2302      	movs	r3, #2
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e14c      	b.n	8005aee <UART_SetConfig+0x346>
 8005854:	2304      	movs	r3, #4
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e149      	b.n	8005aee <UART_SetConfig+0x346>
 800585a:	2308      	movs	r3, #8
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e146      	b.n	8005aee <UART_SetConfig+0x346>
 8005860:	2310      	movs	r3, #16
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e143      	b.n	8005aee <UART_SetConfig+0x346>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a84      	ldr	r2, [pc, #528]	; (8005a7c <UART_SetConfig+0x2d4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d132      	bne.n	80058d6 <UART_SetConfig+0x12e>
 8005870:	4b81      	ldr	r3, [pc, #516]	; (8005a78 <UART_SetConfig+0x2d0>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b0c      	cmp	r3, #12
 800587c:	d828      	bhi.n	80058d0 <UART_SetConfig+0x128>
 800587e:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0xdc>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058c5 	.word	0x080058c5
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058bf 	.word	0x080058bf
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058cb 	.word	0x080058cb
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e117      	b.n	8005aee <UART_SetConfig+0x346>
 80058be:	2302      	movs	r3, #2
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e114      	b.n	8005aee <UART_SetConfig+0x346>
 80058c4:	2304      	movs	r3, #4
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e111      	b.n	8005aee <UART_SetConfig+0x346>
 80058ca:	2308      	movs	r3, #8
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e10e      	b.n	8005aee <UART_SetConfig+0x346>
 80058d0:	2310      	movs	r3, #16
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e10b      	b.n	8005aee <UART_SetConfig+0x346>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a69      	ldr	r2, [pc, #420]	; (8005a80 <UART_SetConfig+0x2d8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d120      	bne.n	8005922 <UART_SetConfig+0x17a>
 80058e0:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <UART_SetConfig+0x2d0>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058ea:	2b30      	cmp	r3, #48	; 0x30
 80058ec:	d013      	beq.n	8005916 <UART_SetConfig+0x16e>
 80058ee:	2b30      	cmp	r3, #48	; 0x30
 80058f0:	d814      	bhi.n	800591c <UART_SetConfig+0x174>
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d009      	beq.n	800590a <UART_SetConfig+0x162>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d810      	bhi.n	800591c <UART_SetConfig+0x174>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <UART_SetConfig+0x15c>
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d006      	beq.n	8005910 <UART_SetConfig+0x168>
 8005902:	e00b      	b.n	800591c <UART_SetConfig+0x174>
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e0f1      	b.n	8005aee <UART_SetConfig+0x346>
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e0ee      	b.n	8005aee <UART_SetConfig+0x346>
 8005910:	2304      	movs	r3, #4
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e0eb      	b.n	8005aee <UART_SetConfig+0x346>
 8005916:	2308      	movs	r3, #8
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e0e8      	b.n	8005aee <UART_SetConfig+0x346>
 800591c:	2310      	movs	r3, #16
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e0e5      	b.n	8005aee <UART_SetConfig+0x346>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <UART_SetConfig+0x2dc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d120      	bne.n	800596e <UART_SetConfig+0x1c6>
 800592c:	4b52      	ldr	r3, [pc, #328]	; (8005a78 <UART_SetConfig+0x2d0>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005936:	2bc0      	cmp	r3, #192	; 0xc0
 8005938:	d013      	beq.n	8005962 <UART_SetConfig+0x1ba>
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d814      	bhi.n	8005968 <UART_SetConfig+0x1c0>
 800593e:	2b80      	cmp	r3, #128	; 0x80
 8005940:	d009      	beq.n	8005956 <UART_SetConfig+0x1ae>
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d810      	bhi.n	8005968 <UART_SetConfig+0x1c0>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <UART_SetConfig+0x1a8>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d006      	beq.n	800595c <UART_SetConfig+0x1b4>
 800594e:	e00b      	b.n	8005968 <UART_SetConfig+0x1c0>
 8005950:	2300      	movs	r3, #0
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e0cb      	b.n	8005aee <UART_SetConfig+0x346>
 8005956:	2302      	movs	r3, #2
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e0c8      	b.n	8005aee <UART_SetConfig+0x346>
 800595c:	2304      	movs	r3, #4
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e0c5      	b.n	8005aee <UART_SetConfig+0x346>
 8005962:	2308      	movs	r3, #8
 8005964:	77fb      	strb	r3, [r7, #31]
 8005966:	e0c2      	b.n	8005aee <UART_SetConfig+0x346>
 8005968:	2310      	movs	r3, #16
 800596a:	77fb      	strb	r3, [r7, #31]
 800596c:	e0bf      	b.n	8005aee <UART_SetConfig+0x346>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a45      	ldr	r2, [pc, #276]	; (8005a88 <UART_SetConfig+0x2e0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d125      	bne.n	80059c4 <UART_SetConfig+0x21c>
 8005978:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <UART_SetConfig+0x2d0>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005986:	d017      	beq.n	80059b8 <UART_SetConfig+0x210>
 8005988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598c:	d817      	bhi.n	80059be <UART_SetConfig+0x216>
 800598e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005992:	d00b      	beq.n	80059ac <UART_SetConfig+0x204>
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d811      	bhi.n	80059be <UART_SetConfig+0x216>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <UART_SetConfig+0x1fe>
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d006      	beq.n	80059b2 <UART_SetConfig+0x20a>
 80059a4:	e00b      	b.n	80059be <UART_SetConfig+0x216>
 80059a6:	2300      	movs	r3, #0
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e0a0      	b.n	8005aee <UART_SetConfig+0x346>
 80059ac:	2302      	movs	r3, #2
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e09d      	b.n	8005aee <UART_SetConfig+0x346>
 80059b2:	2304      	movs	r3, #4
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e09a      	b.n	8005aee <UART_SetConfig+0x346>
 80059b8:	2308      	movs	r3, #8
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e097      	b.n	8005aee <UART_SetConfig+0x346>
 80059be:	2310      	movs	r3, #16
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e094      	b.n	8005aee <UART_SetConfig+0x346>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a30      	ldr	r2, [pc, #192]	; (8005a8c <UART_SetConfig+0x2e4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d125      	bne.n	8005a1a <UART_SetConfig+0x272>
 80059ce:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <UART_SetConfig+0x2d0>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059dc:	d017      	beq.n	8005a0e <UART_SetConfig+0x266>
 80059de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059e2:	d817      	bhi.n	8005a14 <UART_SetConfig+0x26c>
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e8:	d00b      	beq.n	8005a02 <UART_SetConfig+0x25a>
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ee:	d811      	bhi.n	8005a14 <UART_SetConfig+0x26c>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <UART_SetConfig+0x254>
 80059f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f8:	d006      	beq.n	8005a08 <UART_SetConfig+0x260>
 80059fa:	e00b      	b.n	8005a14 <UART_SetConfig+0x26c>
 80059fc:	2301      	movs	r3, #1
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e075      	b.n	8005aee <UART_SetConfig+0x346>
 8005a02:	2302      	movs	r3, #2
 8005a04:	77fb      	strb	r3, [r7, #31]
 8005a06:	e072      	b.n	8005aee <UART_SetConfig+0x346>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e06f      	b.n	8005aee <UART_SetConfig+0x346>
 8005a0e:	2308      	movs	r3, #8
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e06c      	b.n	8005aee <UART_SetConfig+0x346>
 8005a14:	2310      	movs	r3, #16
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e069      	b.n	8005aee <UART_SetConfig+0x346>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <UART_SetConfig+0x2e8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d137      	bne.n	8005a94 <UART_SetConfig+0x2ec>
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <UART_SetConfig+0x2d0>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a32:	d017      	beq.n	8005a64 <UART_SetConfig+0x2bc>
 8005a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a38:	d817      	bhi.n	8005a6a <UART_SetConfig+0x2c2>
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	d00b      	beq.n	8005a58 <UART_SetConfig+0x2b0>
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a44:	d811      	bhi.n	8005a6a <UART_SetConfig+0x2c2>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <UART_SetConfig+0x2aa>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d006      	beq.n	8005a5e <UART_SetConfig+0x2b6>
 8005a50:	e00b      	b.n	8005a6a <UART_SetConfig+0x2c2>
 8005a52:	2300      	movs	r3, #0
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e04a      	b.n	8005aee <UART_SetConfig+0x346>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e047      	b.n	8005aee <UART_SetConfig+0x346>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	77fb      	strb	r3, [r7, #31]
 8005a62:	e044      	b.n	8005aee <UART_SetConfig+0x346>
 8005a64:	2308      	movs	r3, #8
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e041      	b.n	8005aee <UART_SetConfig+0x346>
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e03e      	b.n	8005aee <UART_SetConfig+0x346>
 8005a70:	efff69f3 	.word	0xefff69f3
 8005a74:	40011000 	.word	0x40011000
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40004400 	.word	0x40004400
 8005a80:	40004800 	.word	0x40004800
 8005a84:	40004c00 	.word	0x40004c00
 8005a88:	40005000 	.word	0x40005000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	40007800 	.word	0x40007800
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <UART_SetConfig+0x4b8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d125      	bne.n	8005aea <UART_SetConfig+0x342>
 8005a9e:	4b71      	ldr	r3, [pc, #452]	; (8005c64 <UART_SetConfig+0x4bc>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aa8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005aac:	d017      	beq.n	8005ade <UART_SetConfig+0x336>
 8005aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ab2:	d817      	bhi.n	8005ae4 <UART_SetConfig+0x33c>
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	d00b      	beq.n	8005ad2 <UART_SetConfig+0x32a>
 8005aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abe:	d811      	bhi.n	8005ae4 <UART_SetConfig+0x33c>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <UART_SetConfig+0x324>
 8005ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac8:	d006      	beq.n	8005ad8 <UART_SetConfig+0x330>
 8005aca:	e00b      	b.n	8005ae4 <UART_SetConfig+0x33c>
 8005acc:	2300      	movs	r3, #0
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e00d      	b.n	8005aee <UART_SetConfig+0x346>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	77fb      	strb	r3, [r7, #31]
 8005ad6:	e00a      	b.n	8005aee <UART_SetConfig+0x346>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e007      	b.n	8005aee <UART_SetConfig+0x346>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e004      	b.n	8005aee <UART_SetConfig+0x346>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e001      	b.n	8005aee <UART_SetConfig+0x346>
 8005aea:	2310      	movs	r3, #16
 8005aec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af6:	d15a      	bne.n	8005bae <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005af8:	7ffb      	ldrb	r3, [r7, #31]
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d827      	bhi.n	8005b4e <UART_SetConfig+0x3a6>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x35c>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b3f 	.word	0x08005b3f
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b4f 	.word	0x08005b4f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe f906 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	61b8      	str	r0, [r7, #24]
        break;
 8005b2e:	e013      	b.n	8005b58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe f916 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8005b34:	61b8      	str	r0, [r7, #24]
        break;
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b4b      	ldr	r3, [pc, #300]	; (8005c68 <UART_SetConfig+0x4c0>)
 8005b3a:	61bb      	str	r3, [r7, #24]
        break;
 8005b3c:	e00c      	b.n	8005b58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe f80d 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8005b42:	61b8      	str	r0, [r7, #24]
        break;
 8005b44:	e008      	b.n	8005b58 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	61bb      	str	r3, [r7, #24]
        break;
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	77bb      	strb	r3, [r7, #30]
        break;
 8005b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d074      	beq.n	8005c48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	005a      	lsls	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d916      	bls.n	8005ba8 <UART_SetConfig+0x400>
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d212      	bcs.n	8005ba8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f023 030f 	bic.w	r3, r3, #15
 8005b8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	89fa      	ldrh	r2, [r7, #14]
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	e04f      	b.n	8005c48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	77bb      	strb	r3, [r7, #30]
 8005bac:	e04c      	b.n	8005c48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d828      	bhi.n	8005c06 <UART_SetConfig+0x45e>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x414>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe f8aa 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005be4:	61b8      	str	r0, [r7, #24]
        break;
 8005be6:	e013      	b.n	8005c10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe f8ba 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8005bec:	61b8      	str	r0, [r7, #24]
        break;
 8005bee:	e00f      	b.n	8005c10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <UART_SetConfig+0x4c0>)
 8005bf2:	61bb      	str	r3, [r7, #24]
        break;
 8005bf4:	e00c      	b.n	8005c10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd ffb1 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8005bfa:	61b8      	str	r0, [r7, #24]
        break;
 8005bfc:	e008      	b.n	8005c10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	61bb      	str	r3, [r7, #24]
        break;
 8005c04:	e004      	b.n	8005c10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	085a      	lsrs	r2, r3, #1
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	441a      	add	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b0f      	cmp	r3, #15
 8005c2e:	d909      	bls.n	8005c44 <UART_SetConfig+0x49c>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c36:	d205      	bcs.n	8005c44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e001      	b.n	8005c48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c54:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40007c00 	.word	0x40007c00
 8005c64:	40023800 	.word	0x40023800
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6a:	d10a      	bne.n	8005d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc0:	f7fb fe2a 	bl	8001a18 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d10e      	bne.n	8005df2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f82d 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e023      	b.n	8005e3a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d10e      	bne.n	8005e1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f817 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e00d      	b.n	8005e3a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b09c      	sub	sp, #112	; 0x70
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e52:	e0a5      	b.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	f000 80a1 	beq.w	8005fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5e:	f7fb fddb 	bl	8001a18 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d302      	bcc.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d13e      	bne.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e88:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e6      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e5      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e067      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d04f      	beq.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0e:	d147      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f6c:	623a      	str	r2, [r7, #32]
 8005f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69f9      	ldr	r1, [r7, #28]
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e010      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	f43f af4a 	beq.w	8005e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3770      	adds	r7, #112	; 0x70
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d120      	bne.n	8006026 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	4b20      	ldr	r3, [pc, #128]	; (8006078 <USB_CoreInit+0xac>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa92 	bl	8006544 <USB_CoreReset>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e010      	b.n	8006048 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa86 	bl	8006544 <USB_CoreReset>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10b      	bne.n	8006066 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f043 0206 	orr.w	r2, r3, #6
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006072:	b004      	add	sp, #16
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	ffbdffbf 	.word	0xffbdffbf

0800607c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 0201 	bic.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d115      	bne.n	80060ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060cc:	2001      	movs	r0, #1
 80060ce:	f7fb fcaf 	bl	8001a30 <HAL_Delay>
      ms++;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa25 	bl	8006528 <USB_GetMode>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d01e      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b31      	cmp	r3, #49	; 0x31
 80060e8:	d9f0      	bls.n	80060cc <USB_SetCurrentMode+0x2e>
 80060ea:	e01a      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fb fc96 	bl	8001a30 <HAL_Delay>
      ms++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa0c 	bl	8006528 <USB_GetMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b31      	cmp	r3, #49	; 0x31
 800611a:	d9f0      	bls.n	80060fe <USB_SetCurrentMode+0x60>
 800611c:	e001      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e005      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b32      	cmp	r3, #50	; 0x32
 8006126:	d101      	bne.n	800612c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006138:	b084      	sub	sp, #16
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e009      	b.n	800616c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3340      	adds	r3, #64	; 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0e      	cmp	r3, #14
 8006170:	d9f2      	bls.n	8006158 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e005      	b.n	80061be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	4619      	mov	r1, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d8:	461a      	mov	r2, r3
 80061da:	680b      	ldr	r3, [r1, #0]
 80061dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10c      	bne.n	80061fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061ea:	2100      	movs	r1, #0
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f961 	bl	80064b4 <USB_SetDevSpeed>
 80061f2:	e008      	b.n	8006206 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061f4:	2101      	movs	r1, #1
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f95c 	bl	80064b4 <USB_SetDevSpeed>
 80061fc:	e003      	b.n	8006206 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061fe:	2103      	movs	r1, #3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f957 	bl	80064b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006206:	2110      	movs	r1, #16
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8f3 	bl	80063f4 <USB_FlushTxFifo>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f91d 	bl	8006458 <USB_FlushRxFifo>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	461a      	mov	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	e043      	b.n	80062da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006268:	d118      	bne.n	800629c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e013      	b.n	80062ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e008      	b.n	80062ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	461a      	mov	r2, r3
 80062ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	3301      	adds	r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3b7      	bcc.n	8006252 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e043      	b.n	8006370 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062fe:	d118      	bne.n	8006332 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	461a      	mov	r2, r3
 8006314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e013      	b.n	8006344 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e008      	b.n	8006344 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	461a      	mov	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	2300      	movs	r3, #0
 8006354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3301      	adds	r3, #1
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3b7      	bcc.n	80062e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f043 0210 	orr.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <USB_DevInit+0x2b4>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d105      	bne.n	80063dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <USB_DevInit+0x2b8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr
 80063ec:	803c3800 	.word	0x803c3800
 80063f0:	40000004 	.word	0x40000004

080063f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	4a12      	ldr	r2, [pc, #72]	; (8006454 <USB_FlushTxFifo+0x60>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e01a      	b.n	8006448 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	daf3      	bge.n	8006402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	4a08      	ldr	r2, [pc, #32]	; (8006454 <USB_FlushTxFifo+0x60>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e006      	b.n	8006448 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b20      	cmp	r3, #32
 8006444:	d0f1      	beq.n	800642a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	00030d40 	.word	0x00030d40

08006458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	4a11      	ldr	r2, [pc, #68]	; (80064b0 <USB_FlushRxFifo+0x58>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d901      	bls.n	8006474 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e017      	b.n	80064a4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	daf3      	bge.n	8006464 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2210      	movs	r2, #16
 8006484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <USB_FlushRxFifo+0x58>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d901      	bls.n	8006496 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e006      	b.n	80064a4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	2b10      	cmp	r3, #16
 80064a0:	d0f1      	beq.n	8006486 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	00030d40 	.word	0x00030d40

080064b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d4:	4313      	orrs	r3, r2
 80064d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006500:	f023 0303 	bic.w	r3, r3, #3
 8006504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0301 	and.w	r3, r3, #1
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <USB_CoreReset+0x60>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d901      	bls.n	8006560 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e01a      	b.n	8006596 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	daf3      	bge.n	8006550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	4a09      	ldr	r2, [pc, #36]	; (80065a4 <USB_CoreReset+0x60>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d901      	bls.n	8006588 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e006      	b.n	8006596 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d0f1      	beq.n	8006578 <USB_CoreReset+0x34>

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	00030d40 	.word	0x00030d40

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2600      	movs	r6, #0
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	; (80065ec <__libc_init_array+0x44>)
 80065bc:	f000 f820 	bl	8006600 <_init>
 80065c0:	1b64      	subs	r4, r4, r5
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2600      	movs	r6, #0
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	4798      	blx	r3
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	4798      	blx	r3
 80065dc:	3601      	adds	r6, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	08022840 	.word	0x08022840
 80065e4:	08022840 	.word	0x08022840
 80065e8:	08022840 	.word	0x08022840
 80065ec:	08022844 	.word	0x08022844

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <_init>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr

0800660c <_fini>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr
